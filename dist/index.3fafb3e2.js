// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"3Imd1":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "0fa2489aa94c8731ee2aee9f3fafb3e2";
// @flow
/*global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE*/
/*::
import type {
HMRAsset,
HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
(string): mixed;
cache: {|[string]: ParcelModule|};
hotData: mixed;
Module: any;
parent: ?ParcelRequire;
isParcelRequire: true;
modules: {|[string]: [Function, {|[string]: string|}]|};
HMR_BUNDLE_ID: string;
root: ParcelRequire;
}
interface ParcelModule {
hot: {|
data: mixed,
accept(cb: (Function) => void): void,
dispose(cb: (mixed) => void): void,
// accept(deps: Array<string> | string, cb: (Function) => void): void,
// decline(): void,
_acceptCallbacks: Array<(Function) => void>,
_disposeCallbacks: Array<(mixed) => void>,
|};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || (function () {}));
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, /*: {|[string]: boolean|}*/
acceptedAssets, /*: {|[string]: boolean|}*/
/*: {|[string]: boolean|}*/
assetsToAccept;
function getHostname() {
  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
  return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = getHostname();
  var port = getPort();
  var protocol = HMR_SECURE || location.protocol == 'https:' && !(/localhost|127.0.0.1|0.0.0.0/).test(hostname) ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
  // $FlowFixMe
  ws.onmessage = function (event) /*: {data: string, ...}*/
  {
    checkedAssets = {
      /*: {|[string]: boolean|}*/
    };
    acceptedAssets = {
      /*: {|[string]: boolean|}*/
    };
    assetsToAccept = [];
    var data = /*: HMRMessage*/
    JSON.parse(event.data);
    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);
      // Handle HMR Update
      var handled = false;
      assets.forEach(asset => {
        var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        if (didAccept) {
          handled = true;
        }
      });
      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(module.bundle.root, asset);
        });
        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];
          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }
    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      }
      // Render the fancy html overlay
      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      // $FlowFixMe
      document.body.appendChild(overlay);
    }
  };
  ws.onerror = function (e) {
    console.error(e.message);
  };
  ws.onclose = function (e) {
    if (undefined !== 'test') {
      console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
    console.log('[parcel] ✨ Error resolved');
  }
}
function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }
  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]>*/
{
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function () {
    if (link.parentNode !== null) {
      // $FlowFixMe
      link.parentNode.removeChild(link);
    }
  };
  newLink.setAttribute('href', // $FlowFixMe
  link.getAttribute('href').split('?')[0] + '?' + Date.now());
  // $FlowFixMe
  link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }
  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      // $FlowFixMe[incompatible-type]
      var href = /*: string*/
      links[i].getAttribute('href');
      var hostname = getHostname();
      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
      var absolute = (/^https?:\/\//i).test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
      if (!absolute) {
        updateLink(links[i]);
      }
    }
    cssTimeout = null;
  }, 50);
}
function hmrApply(bundle, /*: ParcelRequire*/
asset) /*:  HMRAsset*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (asset.type === 'css') {
    reloadCSS();
    return;
  }
  let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
  if (deps) {
    var fn = new Function('require', 'module', 'exports', asset.output);
    modules[asset.id] = [fn, deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, /*: ParcelRequire*/
id, /*: ParcelRequire*/
/*: string*/
depsByBundle) /*: ?{ [string]: { [string]: string } }*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
    // If we reached the root bundle without finding where the asset should go,
    // there's nothing to do. Mark as "accepted" so we don't reload the page.
    if (!bundle.parent) {
      return true;
    }
    return hmrAcceptCheck(bundle.parent, id, depsByBundle);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(module.bundle.root, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1], null);
  });
}
function hmrAcceptRun(bundle, /*: ParcelRequire*/
id) /*: string*/
{
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(module.bundle.root, id);
      });
      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }
  acceptedAssets[id] = true;
}

},{}],"5rkFb":[function(require,module,exports) {
require("./styles.css");
var _firebaseApp = require("firebase/app");
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _firebaseAppDefault = _parcelHelpers.interopDefault(_firebaseApp);
require("firebase/auth");
require("firebase/firestore");
// Initializa Firebase App
var firebaseConfig = {
  apiKey: "AIzaSyD4uk8sIlNSznve9Ath-T8I3qYEPq6YBwE",
  authDomain: "fir-workbench-d5b34.firebaseapp.com",
  projectId: "fir-workbench-d5b34",
  storageBucket: "fir-workbench-d5b34.appspot.com",
  messagingSenderId: "1061987155341",
  appId: "1:1061987155341:web:7eb4e1c4416715e6a011c4",
  measurementId: "G-PL20HH5CK8"
};
// Initialize Firebase
_firebaseAppDefault.default.initializeApp(firebaseConfig);
var firesStoreDatabase = _firebaseAppDefault.default.firestore();
// Get Firebase resources after the content of the document has loaded
// document.addEventListener("DOMContentLoaded", event => {
// const app = firebase.app();
// })
// Available Collections
var collections = {
  AUTHORS: "Authors"
};
// Available Alert Types
var alertTypes = {
  SUCCESS: "success",
  ERROR: "error",
  INFO: "info",
  WARNING: "warning"
};
_firebaseAppDefault.default.auth().onAuthStateChanged(function (user) {
  if (user) {
    displaySignedInButtons();
  } else {
    displaySignedOutButtons();
  }
});
/**
* Authentication with Popup
*/
function loginWithPopup() {
  _firebaseAppDefault.default.auth().useDeviceLanguage();
  var provider = new _firebaseAppDefault.default.auth.GoogleAuthProvider();
  _firebaseAppDefault.default.auth().signInWithPopup(provider).then(function (result) {
    console.log(result);
    var message = "Signed In With Popup";
    var alertType = alertTypes.INFO;
    addAlertMessage(message, alertType);
    displaySignedInButtons();
  })["catch"](function (error) {
    var errorCode = error.code;
    var errorMessage = error.message;
    console.log(("Error code: ").concat(errorCode, " /n Error Message: ").concat(errorMessage));
    var message = ("Error code: ").concat(errorCode, " /n Error Message: ").concat(errorMessage);
    var alertType = alertTypes.ERROR;
    addAlertMessage(message, alertType);
  });
}
/**
* Authentication with Redirect
*/
function loginWithRedirect() {
  _firebaseAppDefault.default.auth().useDeviceLanguage();
  var provider = new _firebaseAppDefault.default.auth.GoogleAuthProvider();
  _firebaseAppDefault.default.auth().signInWithRedirect(provider).then(function (result) {
    console.log(result);
    var message = "Signed In With Redirect";
    var alertType = alertTypes.INFO;
    addAlertMessage(message, alertType);
    displaySignedInButtons();
  })["catch"](function (error) {
    var errorCode = error.code;
    var errorMessage = error.message;
    console.log(("Error code: ").concat(errorCode, " /n Error Message: ").concat(errorMessage));
    var message = ("Error code: ").concat(errorCode, " /n Error Message: ").concat(errorMessage);
    var alertType = alertTypes.ERROR;
    addAlertMessage(message, alertType);
  });
}
/**
*  Authentication Anonymously
*/
function loginAnonymously() {
  _firebaseAppDefault.default.auth().useDeviceLanguage();
  _firebaseAppDefault.default.auth().signInAnonymously().then(function () {
    var message = "Signed In Anonymously";
    var alertType = alertTypes.INFO;
    addAlertMessage(message, alertType);
    displaySignedInButtons();
  })["catch"](function (error) {
    var errorCode = error.code;
    var errorMessage = error.message;
    console.log(("Error code: ").concat(errorCode, " /n Error Message: ").concat(errorMessage));
    var message = ("Error code: ").concat(errorCode, " /n Error Message: ").concat(errorMessage);
    var alertType = alertTypes.ERROR;
    addAlertMessage(message, alertType);
  });
}
/**
* Signing Out
*/
function signOut() {
  _firebaseAppDefault.default.auth().signOut().then(function () {
    var message = "Signed Out";
    var alertType = alertTypes.INFO;
    addAlertMessage(message, alertType);
    displaySignedOutButtons();
  })["catch"](function (error) {
    var message = ("Error code: ").concat(errorCode, " /n Error Message: ").concat(errorMessage);
    var alertType = alertTypes.ERROR;
    addAlertMessage(message, alertType);
  });
}
// function createElement(object) {
// console.log(object);
// for(key in object){
// const paragraph = document.createElement("p");
// switch (typeof object[key]){
// case "string":
// break;
// case "number":
// break;
// case "Array":
// break;
// case "Object":
// break;
// default:
// break;
// }
// }
// }
/**
* Request all data from a specific Collection
*/
function requestAllData() {
  var collectionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : collections.AUTHORS;
  firesStoreDatabase.collection(collectionId).get().then(function (querySnapshot) {
    var data = [];
    querySnapshot.forEach(function (doc) {
      console.log(JSON.stringify(doc.data()));
      data.push(JSON.stringify(doc.data()));
    });
    var message = "Data Received";
    var alertType = alertTypes.SUCCESS;
    addAlertMessage(message, alertType);
    displayData(data);
  })["catch"](function (error) {
    var alertType = alertTypes.ERROR;
    addAlertMessage(error.message, alertType);
  });
}
/**
* Request data from a specific Collection and a specific Document
* @param collectionId The id of the collection
* @param documentId The id of the document
*/
function requestSpecificData() {
  var collectionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : collections.AUTHORS;
  var documentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "KGi8sT2VLjPmYpTqZd2s";
  console.log(documentId);
  firesStoreDatabase.collection(collectionId).doc(documentId).get().then(function (doc) {
    doc.exists ? console.log(JSON.stringify(doc.data())) : console.log("There is no document matching the id!");
    var data = [JSON.stringify(doc.data())];
    var message = "Data Received";
    var alertType = alertTypes.SUCCESS;
    addAlertMessage(message, alertType);
    displayData(data);
  })["catch"](function (error) {
    var alertType = alertTypes.ERROR;
    addAlertMessage(error.message, alertType);
  });
}
function removeAlertMessage(target) {
  target.remove();
}
function addAlertMessage(alertMessage, alertType) {
  var alertParagraphTextNode = document.createTextNode(alertMessage);
  var alertParagraphElement = document.createElement("p");
  alertParagraphElement.appendChild(alertParagraphTextNode);
  var alertItemElement = document.createElement("div");
  alertItemElement.appendChild(alertParagraphElement);
  alertItemElement.classList.add("alertbox__item");
  var alertTypeClass = ("alertbox__item--").concat(alertType);
  alertItemElement.classList.add(alertTypeClass);
  alertItemElement.addEventListener("click", function (event) {
    removeAlertMessage(event.currentTarget);
  });
  var alertbox = document.querySelector("#alertbox");
  alertbox.appendChild(alertItemElement);
  setTimeout(function () {
    // alertbox.removeChild(alertItemElement);
    removeAlertMessage(alertItemElement);
  }, 5000);
}
function displaySignedInButtons() {
  var signoutButton = document.querySelector(".button--signout");
  signoutButton.classList.remove("button--hidden");
  var loginRedirectButton = document.querySelector(".button--redirect");
  loginRedirectButton.classList.add("button--hidden");
  var loginPopupButton = document.querySelector(".button--popup");
  loginPopupButton.classList.add("button--hidden");
  var loginAnonymouslyButton = document.querySelector(".button--anonymously");
  loginAnonymouslyButton.classList.add("button--hidden");
}
function displaySignedOutButtons() {
  var signoutButton = document.querySelector(".button--signout");
  signoutButton.classList.add("button--hidden");
  var loginRedirectButton = document.querySelector(".button--redirect");
  loginRedirectButton.classList.remove("button--hidden");
  var loginPopupButton = document.querySelector(".button--popup");
  loginPopupButton.classList.remove("button--hidden");
  var loginAnonymouslyButton = document.querySelector(".button--anonymously");
  loginAnonymouslyButton.classList.remove("button--hidden");
}
function displayData(data) {
  var contentDataElement = document.querySelector(".content__data");
  contentDataElement.innerHTML = "";
  data.forEach(function (element) {
    var paragraph = document.createElement("p");
    var dataTextNode = document.createTextNode(data);
    paragraph.appendChild(dataTextNode);
    paragraph.classList.add("content__item");
    contentDataElement.appendChild(paragraph);
  });
}
function scrollTop() {
  document.body.scrollTop = 0;
  // For Safari
  document.documentElement.scrollTop = 0;
}
// Adding event listener for the login with redirect button
var loginRedirectButton = document.querySelector(".button--redirect");
loginRedirectButton.addEventListener("click", loginWithRedirect);
// Adding event listener for the login with popup button
var loginPopupButton = document.querySelector(".button--popup");
loginPopupButton.addEventListener("click", loginWithPopup);
// Adding event listener for the login with popup button
var loginAnonymouslyButton = document.querySelector(".button--anonymously");
loginAnonymouslyButton.addEventListener("click", loginAnonymously);
// Adding event listener for the sign out button
var signoutButton = document.querySelector(".button--signout");
signoutButton.addEventListener("click", signOut);
// Adding event listener for the request all data button
var requestAllDataButton = document.querySelector(".button--request-all");
requestAllDataButton.addEventListener("click", function (event) {
  requestAllData();
});
// Adding event listener for the request specific data button
var requestSpecificDataButton = document.querySelector(".button--request-specific");
requestSpecificDataButton.addEventListener("click", function (event) {
  requestSpecificData();
});
// Adding event listener for the scroll top button
var scrollTopButton = document.querySelector(".back-top-button");
scrollTopButton.addEventListener("click", scrollTop);

},{"./styles.css":"1jUZz","firebase/app":"6wFrx","firebase/auth":"3rqrX","firebase/firestore":"5Eq2v","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"1jUZz":[function() {},{}],"6wFrx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "default", function () {
  return _firebaseAppDefault.default;
});
var _firebaseApp = require('@firebase/app');
var _firebaseAppDefault = _parcelHelpers.interopDefault(_firebaseApp);
var _firebaseAppDefault = _parcelHelpers.interopDefault(_firebaseApp);
var name = "firebase";
var version = "8.2.10";
/**
* @license
* Copyright 2018 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
_firebaseAppDefault.default.registerVersion(name, version, 'app');

},{"@firebase/app":"6IUA5","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"6IUA5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "firebase", function () {
  return firebase$1;
});
var _tslib = require('tslib');
var _firebaseUtil = require('@firebase/util');
var _firebaseComponent = require('@firebase/component');
var _firebaseLogger = require('@firebase/logger');
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var _a;
var ERRORS = (_a = {}, _a["no-app"] = "No Firebase App '{$appName}' has been created - " + 'call Firebase App.initializeApp()', _a["bad-app-name"] = "Illegal App name: '{$appName}", _a["duplicate-app"] = "Firebase App named '{$appName}' already exists", _a["app-deleted"] = "Firebase App named '{$appName}' already deleted", _a["invalid-app-argument"] = 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.', _a["invalid-log-argument"] = 'First argument to `onLog` must be null or a function.', _a);
var ERROR_FACTORY = new _firebaseUtil.ErrorFactory('app', 'Firebase', ERRORS);
var name = "@firebase/app";
var version = "0.6.15";
var name$1 = "@firebase/analytics";
var name$2 = "@firebase/auth";
var name$3 = "@firebase/database";
var name$4 = "@firebase/functions";
var name$5 = "@firebase/installations";
var name$6 = "@firebase/messaging";
var name$7 = "@firebase/performance";
var name$8 = "@firebase/remote-config";
var name$9 = "@firebase/storage";
var name$a = "@firebase/firestore";
var name$b = "firebase-wrapper";
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var _a$1;
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
var PLATFORM_LOG_STRING = (_a$1 = {}, _a$1[name] = 'fire-core', _a$1[name$1] = 'fire-analytics', _a$1[name$2] = 'fire-auth', _a$1[name$3] = 'fire-rtdb', _a$1[name$4] = 'fire-fn', _a$1[name$5] = 'fire-iid', _a$1[name$6] = 'fire-fcm', _a$1[name$7] = 'fire-perf', _a$1[name$8] = 'fire-rc', _a$1[name$9] = 'fire-gcs', _a$1[name$a] = 'fire-fst', _a$1['fire-js'] = 'fire-js', _a$1[name$b] = 'fire-js-all', _a$1);
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var logger = new _firebaseLogger.Logger('@firebase/app');
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Global context object for a collection of services using
* a shared authentication state.
*/
var FirebaseAppImpl = /** @class*/
(function () {
  function FirebaseAppImpl(options, config, firebase_) {
    var _this = this;
    this.firebase_ = firebase_;
    this.isDeleted_ = false;
    this.name_ = config.name;
    this.automaticDataCollectionEnabled_ = config.automaticDataCollectionEnabled || false;
    this.options_ = _firebaseUtil.deepCopy(options);
    this.container = new _firebaseComponent.ComponentContainer(config.name);
    // add itself to container
    this._addComponent(new _firebaseComponent.Component('app', function () {
      return _this;
    }, "PUBLIC"));
    // populate ComponentContainer with existing components
    this.firebase_.INTERNAL.components.forEach(function (component) {
      return _this._addComponent(component);
    });
  }
  Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
    get: function () {
      this.checkDestroyed_();
      return this.automaticDataCollectionEnabled_;
    },
    set: function (val) {
      this.checkDestroyed_();
      this.automaticDataCollectionEnabled_ = val;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "name", {
    get: function () {
      this.checkDestroyed_();
      return this.name_;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "options", {
    get: function () {
      this.checkDestroyed_();
      return this.options_;
    },
    enumerable: false,
    configurable: true
  });
  FirebaseAppImpl.prototype.delete = function () {
    var _this = this;
    return new Promise(function (resolve) {
      _this.checkDestroyed_();
      resolve();
    }).then(function () {
      _this.firebase_.INTERNAL.removeApp(_this.name_);
      return Promise.all(_this.container.getProviders().map(function (provider) {
        return provider.delete();
      }));
    }).then(function () {
      _this.isDeleted_ = true;
    });
  };
  /**
  * Return a service instance associated with this app (creating it
  * on demand), identified by the passed instanceIdentifier.
  *
  * NOTE: Currently storage and functions are the only ones that are leveraging this
  * functionality. They invoke it by calling:
  *
  * ```javascript
  * firebase.app().storage('STORAGE BUCKET ID')
  * ```
  *
  * The service name is passed to this already
  * @internal
  */
  FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
    if (instanceIdentifier === void 0) {
      instanceIdentifier = DEFAULT_ENTRY_NAME;
    }
    this.checkDestroyed_();
    // getImmediate will always succeed because _getService is only called for registered components.
    return this.container.getProvider(name).getImmediate({
      identifier: instanceIdentifier
    });
  };
  /**
  * Remove a service instance from the cache, so we will create a new instance for this service
  * when people try to get this service again.
  *
  * NOTE: currently only firestore is using this functionality to support firestore shutdown.
  *
  * @param name The service name
  * @param instanceIdentifier instance identifier in case multiple instances are allowed
  * @internal
  */
  FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
    if (instanceIdentifier === void 0) {
      instanceIdentifier = DEFAULT_ENTRY_NAME;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.container.getProvider(name).clearInstance(instanceIdentifier);
  };
  /**
  * @param component the component being added to this app's container
  */
  FirebaseAppImpl.prototype._addComponent = function (component) {
    try {
      this.container.addComponent(component);
    } catch (e) {
      logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
    }
  };
  FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
    this.container.addOrOverwriteComponent(component);
  };
  FirebaseAppImpl.prototype.toJSON = function () {
    return {
      name: this.name,
      automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,
      options: this.options
    };
  };
  /**
  * This function will throw an Error if the App has already been deleted -
  * use before performing API actions on the App.
  */
  FirebaseAppImpl.prototype.checkDestroyed_ = function () {
    if (this.isDeleted_) {
      throw ERROR_FACTORY.create("app-deleted", /*APP_DELETED*/
      {
        appName: this.name_
      });
    }
  };
  return FirebaseAppImpl;
})();
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log('dc');
var version$1 = "8.2.9";
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Because auth can't share code with other components, we attach the utility functions
* in an internal namespace to share code.
* This function return a firebase namespace object without
* any utility functions, so it can be shared between the regular firebaseNamespace and
* the lite version.
*/
function createFirebaseNamespaceCore(firebaseAppImpl) {
  var apps = {};
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  var components = new Map();
  // A namespace is a plain JavaScript Object.
  var namespace = {
    // Hack to prevent Babel from modifying the object returned
    // as the firebase namespace.
    // @ts-ignore
    __esModule: true,
    initializeApp: initializeApp,
    // @ts-ignore
    app: app,
    registerVersion: registerVersion,
    setLogLevel: _firebaseLogger.setLogLevel,
    onLog: onLog,
    // @ts-ignore
    apps: null,
    SDK_VERSION: version$1,
    INTERNAL: {
      registerComponent: registerComponent,
      removeApp: removeApp,
      components: components,
      useAsService: useAsService
    }
  };
  // Inject a circular default export to allow Babel users who were previously
  // using:
  // 
  // import firebase from 'firebase';
  // which becomes: var firebase = require('firebase').default;
  // 
  // instead of
  // 
  // import * as firebase from 'firebase';
  // which becomes: var firebase = require('firebase');
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  namespace['default'] = namespace;
  // firebase.apps is a read-only getter.
  Object.defineProperty(namespace, 'apps', {
    get: getApps
  });
  /**
  * Called by App.delete() - but before any services associated with the App
  * are deleted.
  */
  function removeApp(name) {
    delete apps[name];
  }
  /**
  * Get the App object for a given name (or DEFAULT).
  */
  function app(name) {
    name = name || DEFAULT_ENTRY_NAME;
    if (!_firebaseUtil.contains(apps, name)) {
      throw ERROR_FACTORY.create("no-app", /*NO_APP*/
      {
        appName: name
      });
    }
    return apps[name];
  }
  // @ts-ignore
  app['App'] = firebaseAppImpl;
  function initializeApp(options, rawConfig) {
    if (rawConfig === void 0) {
      rawConfig = {};
    }
    if (typeof rawConfig !== 'object' || rawConfig === null) {
      var name_1 = rawConfig;
      rawConfig = {
        name: name_1
      };
    }
    var config = rawConfig;
    if (config.name === undefined) {
      config.name = DEFAULT_ENTRY_NAME;
    }
    var name = config.name;
    if (typeof name !== 'string' || !name) {
      throw ERROR_FACTORY.create("bad-app-name", /*BAD_APP_NAME*/
      {
        appName: String(name)
      });
    }
    if (_firebaseUtil.contains(apps, name)) {
      throw ERROR_FACTORY.create("duplicate-app", /*DUPLICATE_APP*/
      {
        appName: name
      });
    }
    var app = new firebaseAppImpl(options, config, namespace);
    apps[name] = app;
    return app;
  }
  /*
  * Return an array of all the non-deleted FirebaseApps.
  */
  function getApps() {
    // Make a copy so caller cannot mutate the apps list.
    return Object.keys(apps).map(function (name) {
      return apps[name];
    });
  }
  function registerComponent(component) {
    var componentName = component.name;
    if (components.has(componentName)) {
      logger.debug("There were multiple attempts to register component " + componentName + ".");
      return component.type === "PUBLIC" ? /*PUBLIC*/
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      namespace[componentName] : null;
    }
    components.set(componentName, component);
    // create service namespace for public components
    if (component.type === "PUBLIC") /*PUBLIC*/
    {
      // The Service namespace is an accessor function ...
      var serviceNamespace = function (appArg) {
        if (appArg === void 0) {
          appArg = app();
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (typeof appArg[componentName] !== 'function') {
          // Invalid argument.
          // This happens in the following case: firebase.storage('gs:/')
          throw ERROR_FACTORY.create("invalid-app-argument", /*INVALID_APP_ARGUMENT*/
          {
            appName: componentName
          });
        }
        // Forward service instance lookup to the FirebaseApp.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return appArg[componentName]();
      };
      // ... and a container for service-level properties.
      if (component.serviceProps !== undefined) {
        _firebaseUtil.deepExtend(serviceNamespace, component.serviceProps);
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      namespace[componentName] = serviceNamespace;
      // Patch the FirebaseAppImpl prototype
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      firebaseAppImpl.prototype[componentName] = // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
      // option added to the no-explicit-any rule when ESlint releases it.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var serviceFxn = this._getService.bind(this, componentName);
        return serviceFxn.apply(this, component.multipleInstances ? args : []);
      };
    }
    // add the component to existing app instances
    for (var _i = 0, _a = Object.keys(apps); _i < _a.length; _i++) {
      var appName = _a[_i];
      apps[appName]._addComponent(component);
    }
    return component.type === "PUBLIC" ? /*PUBLIC*/
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace[componentName] : null;
  }
  function registerVersion(libraryKeyOrName, version, variant) {
    var _a;
    // TODO: We can use this check to whitelist strings when/if we set up
    // a good whitelist system.
    var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
    if (variant) {
      library += "-" + variant;
    }
    var libraryMismatch = library.match(/\s|\//);
    var versionMismatch = version.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
      var warning = ["Unable to register library \"" + library + "\" with version \"" + version + "\":"];
      if (libraryMismatch) {
        warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
      }
      if (libraryMismatch && versionMismatch) {
        warning.push('and');
      }
      if (versionMismatch) {
        warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
      }
      logger.warn(warning.join(' '));
      return;
    }
    registerComponent(new _firebaseComponent.Component(library + "-version", function () {
      return {
        library: library,
        version: version
      };
    }, "VERSION"));
  }
  function onLog(logCallback, options) {
    if (logCallback !== null && typeof logCallback !== 'function') {
      throw ERROR_FACTORY.create("invalid-log-argument");
    }
    _firebaseLogger.setUserLogHandler(logCallback, options);
  }
  // Map the requested service to a registered service name
  // (used to map auth to serverAuth service when needed).
  function useAsService(app, name) {
    if (name === 'serverAuth') {
      return null;
    }
    var useService = name;
    return useService;
  }
  return namespace;
}
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Return a firebase namespace object.
*
* In production, this will be called exactly once and the result
* assigned to the 'firebase' global.  It may be called multiple times
* in unit tests.
*/
function createFirebaseNamespace() {
  var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
  namespace.INTERNAL = _tslib.__assign(_tslib.__assign({}, namespace.INTERNAL), {
    createFirebaseNamespace: createFirebaseNamespace,
    extendNamespace: extendNamespace,
    createSubscribe: _firebaseUtil.createSubscribe,
    ErrorFactory: _firebaseUtil.ErrorFactory,
    deepExtend: _firebaseUtil.deepExtend
  });
  /**
  * Patch the top-level firebase namespace with additional properties.
  *
  * firebase.INTERNAL.extendNamespace()
  */
  function extendNamespace(props) {
    _firebaseUtil.deepExtend(namespace, props);
  }
  return namespace;
}
var firebase = createFirebaseNamespace();
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var PlatformLoggerService = /** @class*/
(function () {
  function PlatformLoggerService(container) {
    this.container = container;
  }
  // In initial implementation, this will be called by installations on
  // auth token refresh, and installations will send this string.
  PlatformLoggerService.prototype.getPlatformInfoString = function () {
    var providers = this.container.getProviders();
    // Loop through providers and get library/version pairs from any that are
    // version components.
    return providers.map(function (provider) {
      if (isVersionServiceProvider(provider)) {
        var service = provider.getImmediate();
        return service.library + "/" + service.version;
      } else {
        return null;
      }
    }).filter(function (logString) {
      return logString;
    }).join(' ');
  };
  return PlatformLoggerService;
})();
/**
*
* @param provider check if this provider provides a VersionService
*
* NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
* provides VersionService. The provider is not necessarily a 'app-version'
* provider.
*/
function isVersionServiceProvider(provider) {
  var component = provider.getComponent();
  return (component === null || component === void 0 ? void 0 : component.type) === "VERSION";
}
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function registerCoreComponents(firebase, variant) {
  firebase.INTERNAL.registerComponent(new _firebaseComponent.Component('platform-logger', function (container) {
    return new PlatformLoggerService(container);
  }, "PRIVATE"));
  // Register `app` package.
  firebase.registerVersion(name, version, variant);
  // Register platform SDK identifier (no version).
  firebase.registerVersion('fire-js', '');
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
// Firebase Lite detection test
// eslint-disable-next-line @typescript-eslint/no-explicit-any
if (_firebaseUtil.isBrowser() && self.firebase !== undefined) {
  logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
  // eslint-disable-next-line
  var sdkVersion = self.firebase.SDK_VERSION;
  if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
    logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
  }
}
var initializeApp = firebase.initializeApp;
// TODO: This disable can be removed and the 'ignoreRestArgs' option added to
// the no-explicit-any rule when ESlint releases it.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
firebase.initializeApp = function () {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  // Environment check before initializing app
  // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
  // in @firebase/logger
  if (_firebaseUtil.isNode()) {
    logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      ");
  }
  return initializeApp.apply(undefined, args);
};
var firebase$1 = firebase;
registerCoreComponents(firebase$1);
exports.default = firebase$1;

},{"tslib":"4rd38","@firebase/util":"3bR6t","@firebase/component":"5qT0x","@firebase/logger":"5PuYX","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"4rd38":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __createBinding = function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __exportStar = function (m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"3bR6t":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CONSTANTS", function () {
  return CONSTANTS;
});
_parcelHelpers.export(exports, "Deferred", function () {
  return Deferred;
});
_parcelHelpers.export(exports, "ErrorFactory", function () {
  return ErrorFactory;
});
_parcelHelpers.export(exports, "FirebaseError", function () {
  return FirebaseError;
});
_parcelHelpers.export(exports, "MAX_VALUE_MILLIS", function () {
  return MAX_VALUE_MILLIS;
});
_parcelHelpers.export(exports, "RANDOM_FACTOR", function () {
  return RANDOM_FACTOR;
});
_parcelHelpers.export(exports, "Sha1", function () {
  return Sha1;
});
_parcelHelpers.export(exports, "areCookiesEnabled", function () {
  return areCookiesEnabled;
});
_parcelHelpers.export(exports, "assert", function () {
  return assert;
});
_parcelHelpers.export(exports, "assertionError", function () {
  return assertionError;
});
_parcelHelpers.export(exports, "async", function () {
  return async;
});
_parcelHelpers.export(exports, "base64", function () {
  return base64;
});
_parcelHelpers.export(exports, "base64Decode", function () {
  return base64Decode;
});
_parcelHelpers.export(exports, "base64Encode", function () {
  return base64Encode;
});
_parcelHelpers.export(exports, "calculateBackoffMillis", function () {
  return calculateBackoffMillis;
});
_parcelHelpers.export(exports, "contains", function () {
  return contains;
});
_parcelHelpers.export(exports, "createSubscribe", function () {
  return createSubscribe;
});
_parcelHelpers.export(exports, "decode", function () {
  return decode;
});
_parcelHelpers.export(exports, "deepCopy", function () {
  return deepCopy;
});
_parcelHelpers.export(exports, "deepExtend", function () {
  return deepExtend;
});
_parcelHelpers.export(exports, "errorPrefix", function () {
  return errorPrefix;
});
_parcelHelpers.export(exports, "getUA", function () {
  return getUA;
});
_parcelHelpers.export(exports, "isAdmin", function () {
  return isAdmin;
});
_parcelHelpers.export(exports, "isBrowser", function () {
  return isBrowser;
});
_parcelHelpers.export(exports, "isBrowserExtension", function () {
  return isBrowserExtension;
});
_parcelHelpers.export(exports, "isElectron", function () {
  return isElectron;
});
_parcelHelpers.export(exports, "isEmpty", function () {
  return isEmpty;
});
_parcelHelpers.export(exports, "isIE", function () {
  return isIE;
});
_parcelHelpers.export(exports, "isIndexedDBAvailable", function () {
  return isIndexedDBAvailable;
});
_parcelHelpers.export(exports, "isMobileCordova", function () {
  return isMobileCordova;
});
_parcelHelpers.export(exports, "isNode", function () {
  return isNode;
});
_parcelHelpers.export(exports, "isNodeSdk", function () {
  return isNodeSdk;
});
_parcelHelpers.export(exports, "isReactNative", function () {
  return isReactNative;
});
_parcelHelpers.export(exports, "isSafari", function () {
  return isSafari;
});
_parcelHelpers.export(exports, "isUWP", function () {
  return isUWP;
});
_parcelHelpers.export(exports, "isValidFormat", function () {
  return isValidFormat;
});
_parcelHelpers.export(exports, "isValidTimestamp", function () {
  return isValidTimestamp;
});
_parcelHelpers.export(exports, "issuedAtTime", function () {
  return issuedAtTime;
});
_parcelHelpers.export(exports, "jsonEval", function () {
  return jsonEval;
});
_parcelHelpers.export(exports, "map", function () {
  return map;
});
_parcelHelpers.export(exports, "ordinal", function () {
  return ordinal;
});
_parcelHelpers.export(exports, "querystring", function () {
  return querystring;
});
_parcelHelpers.export(exports, "querystringDecode", function () {
  return querystringDecode;
});
_parcelHelpers.export(exports, "safeGet", function () {
  return safeGet;
});
_parcelHelpers.export(exports, "stringLength", function () {
  return stringLength;
});
_parcelHelpers.export(exports, "stringToByteArray", function () {
  return stringToByteArray$1;
});
_parcelHelpers.export(exports, "stringify", function () {
  return stringify;
});
_parcelHelpers.export(exports, "validateArgCount", function () {
  return validateArgCount;
});
_parcelHelpers.export(exports, "validateCallback", function () {
  return validateCallback;
});
_parcelHelpers.export(exports, "validateContextObject", function () {
  return validateContextObject;
});
_parcelHelpers.export(exports, "validateIndexedDBOpenable", function () {
  return validateIndexedDBOpenable;
});
_parcelHelpers.export(exports, "validateNamespace", function () {
  return validateNamespace;
});
var _tslib = require('tslib');
var global = arguments[3];
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
*/
var CONSTANTS = {
  /**
  * @define {boolean} Whether this is the client Node.js SDK.
  */
  NODE_CLIENT: false,
  /**
  * @define {boolean} Whether this is the Admin Node.js SDK.
  */
  NODE_ADMIN: false,
  /**
  * Firebase SDK Version
  */
  SDK_VERSION: '${JSCORE_VERSION}'
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Throws an error if the provided assertion is falsy
*/
var assert = function (assertion, message) {
  if (!assertion) {
    throw assertionError(message);
  }
};
/**
* Returns an Error object suitable for throwing.
*/
var assertionError = function (message) {
  return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var stringToByteArray = function (str) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
      // Surrogate Pair
      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }
  return out;
};
/**
* Turns an array of numbers into the string given by the concatenation of the
* characters to which the numbers correspond.
* @param bytes Array of numbers representing characters.
* @return Stringification of the array.
*/
var byteArrayToString = function (bytes) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      var c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else if (c1 > 239 && c1 < 365) {
      // Surrogate Pair
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      var c4 = bytes[pos++];
      var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
      out[c++] = String.fromCharCode(0xd800 + (u >> 10));
      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
    } else {
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }
  return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
var base64 = {
  /**
  * Maps bytes to characters.
  */
  byteToCharMap_: null,
  /**
  * Maps characters to bytes.
  */
  charToByteMap_: null,
  /**
  * Maps bytes to websafe characters.
  * @private
  */
  byteToCharMapWebSafe_: null,
  /**
  * Maps websafe characters to bytes.
  * @private
  */
  charToByteMapWebSafe_: null,
  /**
  * Our default alphabet, shared between
  * ENCODED_VALS and ENCODED_VALS_WEBSAFE
  */
  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
  /**
  * Our default alphabet. Value 64 (=) is special; it means "nothing."
  */
  /**
  * Our default alphabet. Value 64 (=) is special; it means "nothing."
  */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + '+/=';
  },
  /**
  * Our websafe alphabet.
  */
  /**
  * Our websafe alphabet.
  */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + '-_.';
  },
  /**
  * Whether this browser supports the atob and btoa functions. This extension
  * started at Mozilla but is now implemented by many browsers. We use the
  * ASSUME_* variables to avoid pulling in the full useragent detection library
  * but still allowing the standard per-browser compilations.
  *
  */
  HAS_NATIVE_SUPPORT: typeof atob === 'function',
  /**
  * Base64-encode an array of bytes.
  *
  * @param input An array of bytes (numbers with
  *     value in [0, 255]) to encode.
  * @param webSafe Boolean indicating we should use the
  *     alternative alphabet.
  * @return The base64 encoded string.
  */
  encodeByteArray: function (input, webSafe) {
    if (!Array.isArray(input)) {
      throw Error('encodeByteArray takes an array as a parameter');
    }
    this.init_();
    var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
    var output = [];
    for (var i = 0; i < input.length; i += 3) {
      var byte1 = input[i];
      var haveByte2 = i + 1 < input.length;
      var byte2 = haveByte2 ? input[i + 1] : 0;
      var haveByte3 = i + 2 < input.length;
      var byte3 = haveByte3 ? input[i + 2] : 0;
      var outByte1 = byte1 >> 2;
      var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
      var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
      var outByte4 = byte3 & 0x3f;
      if (!haveByte3) {
        outByte4 = 64;
        if (!haveByte2) {
          outByte3 = 64;
        }
      }
      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
    }
    return output.join('');
  },
  /**
  * Base64-encode a string.
  *
  * @param input A string to encode.
  * @param webSafe If true, we should use the
  *     alternative alphabet.
  * @return The base64 encoded string.
  */
  encodeString: function (input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return btoa(input);
    }
    return this.encodeByteArray(stringToByteArray(input), webSafe);
  },
  /**
  * Base64-decode a string.
  *
  * @param input to decode.
  * @param webSafe True if we should use the
  *     alternative alphabet.
  * @return string representing the decoded value.
  */
  decodeString: function (input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return atob(input);
    }
    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
  },
  /**
  * Base64-decode a string.
  *
  * In base-64 decoding, groups of four characters are converted into three
  * bytes.  If the encoder did not apply padding, the input length may not
  * be a multiple of 4.
  *
  * In this case, the last group will have fewer than 4 characters, and
  * padding will be inferred.  If the group has one or two characters, it decodes
  * to one byte.  If the group has three characters, it decodes to two bytes.
  *
  * @param input Input to decode.
  * @param webSafe True if we should use the web-safe alphabet.
  * @return bytes representing the decoded value.
  */
  decodeStringToByteArray: function (input, webSafe) {
    this.init_();
    var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
    var output = [];
    for (var i = 0; i < input.length; ) {
      var byte1 = charToByteMap[input.charAt(i++)];
      var haveByte2 = i < input.length;
      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
      ++i;
      var haveByte3 = i < input.length;
      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      var haveByte4 = i < input.length;
      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
        throw Error();
      }
      var outByte1 = byte1 << 2 | byte2 >> 4;
      output.push(outByte1);
      if (byte3 !== 64) {
        var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
        output.push(outByte2);
        if (byte4 !== 64) {
          var outByte3 = byte3 << 6 & 0xc0 | byte4;
          output.push(outByte3);
        }
      }
    }
    return output;
  },
  /**
  * Lazy static initialization function. Called before
  * accessing any of the static map variables.
  * @private
  */
  init_: function () {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {};
      this.charToByteMap_ = {};
      this.byteToCharMapWebSafe_ = {};
      this.charToByteMapWebSafe_ = {};
      // We want quick mappings back and forth, so we precompute two maps.
      for (var i = 0; i < this.ENCODED_VALS.length; i++) {
        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
        this.charToByteMap_[this.byteToCharMap_[i]] = i;
        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
        // Be forgiving when decoding and correctly decode both encodings.
        if (i >= this.ENCODED_VALS_BASE.length) {
          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
        }
      }
    }
  }
};
/**
* URL-safe base64 encoding
*/
var base64Encode = function (str) {
  var utf8Bytes = stringToByteArray(str);
  return base64.encodeByteArray(utf8Bytes, true);
};
/**
* URL-safe base64 decoding
*
* NOTE: DO NOT use the global atob() function - it does NOT support the
* base64Url variant encoding.
*
* @param str To be decoded
* @return Decoded result, if possible
*/
var base64Decode = function (str) {
  try {
    return base64.decodeString(str, true);
  } catch (e) {
    console.error('base64Decode failed: ', e);
  }
  return null;
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Do a deep-copy of basic JavaScript Objects or Arrays.
*/
function deepCopy(value) {
  return deepExtend(undefined, value);
}
/**
* Copy properties from source to target (recursively allows extension
* of Objects and Arrays).  Scalar values in the target are over-written.
* If target is undefined, an object of the appropriate type will be created
* (and returned).
*
* We recursively copy all child properties of plain Objects in the source- so
* that namespace- like dictionaries are merged.
*
* Note that the target can be a function, in which case the properties in
* the source Object are copied onto it as static properties of the Function.
*
* Note: we don't merge __proto__ to prevent prototype pollution
*/
function deepExtend(target, source) {
  if (!(source instanceof Object)) {
    return source;
  }
  switch (source.constructor) {
    case Date:
      // Treat Dates like scalars; if the target date object had any child
      // properties - they will be lost!
      var dateValue = source;
      return new Date(dateValue.getTime());
    case Object:
      if (target === undefined) {
        target = {};
      }
      break;
    case Array:
      // Always copy the array source and overwrite the target.
      target = [];
      break;
    default:
      // Not a plain Object - treat it as a scalar.
      return source;
  }
  for (var prop in source) {
    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
      continue;
    }
    target[prop] = deepExtend(target[prop], source[prop]);
  }
  return target;
}
function isValidKey(key) {
  return key !== '__proto__';
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var Deferred = /** @class*/
(function () {
  function Deferred() {
    var _this = this;
    this.reject = function () {};
    this.resolve = function () {};
    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
  }
  /**
  * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
  * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
  * and returns a node-style callback which will resolve or reject the Deferred's promise.
  */
  Deferred.prototype.wrapCallback = function (callback) {
    var _this = this;
    return function (error, value) {
      if (error) {
        _this.reject(error);
      } else {
        _this.resolve(value);
      }
      if (typeof callback === 'function') {
        // Attaching noop handler just in case developer wasn't expecting
        // promises
        _this.promise.catch(function () {});
        // Some of our callbacks don't expect a value and our own tests
        // assert that the parameter length is 1
        if (callback.length === 1) {
          callback(error);
        } else {
          callback(error, value);
        }
      }
    };
  };
  return Deferred;
})();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Returns navigator.userAgent string or '' if it's not defined.
* @return user agent string
*/
function getUA() {
  if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {
    return navigator['userAgent'];
  } else {
    return '';
  }
}
/**
* Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
*
* Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
* in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
* wait for a callback.
*/
function isMobileCordova() {
  return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && (/ios|iphone|ipod|ipad|android|blackberry|iemobile/i).test(getUA());
}
/**
* Detect Node.js.
*
* @return true if Node.js environment is detected.
*/
// Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
  try {
    return Object.prototype.toString.call(global.process) === '[object process]';
  } catch (e) {
    return false;
  }
}
/**
* Detect Browser Environment
*/
function isBrowser() {
  return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
  var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
  return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
* Detect React Native.
*
* @return true if ReactNative environment is detected.
*/
function isReactNative() {
  return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps.*/
function isElectron() {
  return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer.*/
function isIE() {
  var ua = getUA();
  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps.*/
function isUWP() {
  return getUA().indexOf('MSAppHost/') >= 0;
}
/**
* Detect whether the current SDK build is the Node version.
*
* @return true if it's the Node SDK build.
*/
function isNodeSdk() {
  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari.*/
function isSafari() {
  return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/**
* This method checks if indexedDB is supported by current browser/service worker context
* @return true if indexedDB is supported by current browser/service worker context
*/
function isIndexedDBAvailable() {
  return ('indexedDB' in self) && indexedDB != null;
}
/**
* This method validates browser context for indexedDB by opening a dummy indexedDB database and reject
* if errors occur during the database open operation.
*/
function validateIndexedDBOpenable() {
  return new Promise(function (resolve, reject) {
    try {
      var preExist_1 = true;
      var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
      var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);
      request_1.onsuccess = function () {
        request_1.result.close();
        // delete database only when it doesn't pre-exist
        if (!preExist_1) {
          window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
        }
        resolve(true);
      };
      request_1.onupgradeneeded = function () {
        preExist_1 = false;
      };
      request_1.onerror = function () {
        var _a;
        reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
      };
    } catch (error) {
      reject(error);
    }
  });
}
/**
*
* This method checks whether cookie is enabled within current browser
* @return true if cookie is enabled within current browser
*/
function areCookiesEnabled() {
  if (!navigator || !navigator.cookieEnabled) {
    return false;
  }
  return true;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
var FirebaseError = /** @class*/
(function (_super) {
  _tslib.__extends(FirebaseError, _super);
  function FirebaseError(code, message, customData) {
    var _this = _super.call(this, message) || this;
    _this.code = code;
    _this.customData = customData;
    _this.name = ERROR_NAME;
    // Fix For ES5
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
    Object.setPrototypeOf(_this, FirebaseError.prototype);
    // Maintains proper stack trace for where our error was thrown.
    // Only available on V8.
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, ErrorFactory.prototype.create);
    }
    return _this;
  }
  return FirebaseError;
})(Error);
var ErrorFactory = /** @class*/
(function () {
  function ErrorFactory(service, serviceName, errors) {
    this.service = service;
    this.serviceName = serviceName;
    this.errors = errors;
  }
  ErrorFactory.prototype.create = function (code) {
    var data = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      data[_i - 1] = arguments[_i];
    }
    var customData = data[0] || ({});
    var fullCode = this.service + "/" + code;
    var template = this.errors[code];
    var message = template ? replaceTemplate(template, customData) : 'Error';
    // Service Name: Error message (service/code).
    var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
    var error = new FirebaseError(fullCode, fullMessage, customData);
    return error;
  };
  return ErrorFactory;
})();
function replaceTemplate(template, data) {
  return template.replace(PATTERN, function (_, key) {
    var value = data[key];
    return value != null ? String(value) : "<" + key + "?>";
  });
}
var PATTERN = /\{\$([^}]+)}/g;
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Evaluates a JSON string into a javascript object.
*
* @param {string} str A string containing JSON.
* @return {*} The javascript object representing the specified JSON.
*/
function jsonEval(str) {
  return JSON.parse(str);
}
/**
* Returns JSON representing a javascript object.
* @param {*} data Javascript object to be stringified.
* @return {string} The JSON contents of the object.
*/
function stringify(data) {
  return JSON.stringify(data);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Decodes a Firebase auth. token into constituent parts.
*
* Notes:
* - May return with invalid / incomplete claims if there's no native base64 decoding support.
* - Doesn't check if the token is actually valid.
*/
var decode = function (token) {
  var header = {}, claims = {}, data = {}, signature = '';
  try {
    var parts = token.split('.');
    header = jsonEval(base64Decode(parts[0]) || '');
    claims = jsonEval(base64Decode(parts[1]) || '');
    signature = parts[2];
    data = claims['d'] || ({});
    delete claims['d'];
  } catch (e) {}
  return {
    header: header,
    claims: claims,
    data: data,
    signature: signature
  };
};
/**
* Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
* token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
*
* Notes:
* - May return a false negative if there's no native base64 decoding support.
* - Doesn't check if the token is actually valid.
*/
var isValidTimestamp = function (token) {
  var claims = decode(token).claims;
  var now = Math.floor(new Date().getTime() / 1000);
  var validSince = 0, validUntil = 0;
  if (typeof claims === 'object') {
    if (claims.hasOwnProperty('nbf')) {
      validSince = claims['nbf'];
    } else if (claims.hasOwnProperty('iat')) {
      validSince = claims['iat'];
    }
    if (claims.hasOwnProperty('exp')) {
      validUntil = claims['exp'];
    } else {
      // token will expire after 24h by default
      validUntil = validSince + 86400;
    }
  }
  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
* Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
*
* Notes:
* - May return null if there's no native base64 decoding support.
* - Doesn't check if the token is actually valid.
*/
var issuedAtTime = function (token) {
  var claims = decode(token).claims;
  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
    return claims['iat'];
  }
  return null;
};
/**
* Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
*
* Notes:
* - May return a false negative if there's no native base64 decoding support.
* - Doesn't check if the token is actually valid.
*/
var isValidFormat = function (token) {
  var decoded = decode(token), claims = decoded.claims;
  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
* Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
*
* Notes:
* - May return a false negative if there's no native base64 decoding support.
* - Doesn't check if the token is actually valid.
*/
var isAdmin = function (token) {
  var claims = decode(token).claims;
  return typeof claims === 'object' && claims['admin'] === true;
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function contains(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
  if (Object.prototype.hasOwnProperty.call(obj, key)) {
    return obj[key];
  } else {
    return undefined;
  }
}
function isEmpty(obj) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }
  return true;
}
function map(obj, fn, contextObj) {
  var res = {};
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      res[key] = fn.call(contextObj, obj[key], key, obj);
    }
  }
  return res;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
* params object (e.g. {arg: 'val', arg2: 'val2'})
* Note: You must prepend it with ? when adding it to a URL.
*/
function querystring(querystringParams) {
  var params = [];
  var _loop_1 = function (key, value) {
    if (Array.isArray(value)) {
      value.forEach(function (arrayVal) {
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }
  };
  for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
    var _b = _a[_i], key = _b[0], value = _b[1];
    _loop_1(key, value);
  }
  return params.length ? '&' + params.join('&') : '';
}
/**
* Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
* (e.g. {arg: 'val', arg2: 'val2'})
*/
function querystringDecode(querystring) {
  var obj = {};
  var tokens = querystring.replace(/^\?/, '').split('&');
  tokens.forEach(function (token) {
    if (token) {
      var key = token.split('=');
      obj[key[0]] = key[1];
    }
  });
  return obj;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @fileoverview SHA-1 cryptographic hash.
* Variable names follow the notation in FIPS PUB 180-3:
* http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
*
* Usage:
*   var sha1 = new sha1();
*   sha1.update(bytes);
*   var hash = sha1.digest();
*
* Performance:
*   Chrome 23:   ~400 Mbit/s
*   Firefox 16:  ~250 Mbit/s
*
*/
/**
* SHA-1 cryptographic hash constructor.
*
* The properties declared here are discussed in the above algorithm document.
* @constructor
* @final
* @struct
*/
var Sha1 = /** @class*/
(function () {
  function Sha1() {
    /**
    * Holds the previous values of accumulated variables a-e in the compress_
    * function.
    * @private
    */
    this.chain_ = [];
    /**
    * A buffer holding the partially computed hash result.
    * @private
    */
    this.buf_ = [];
    /**
    * An array of 80 bytes, each a part of the message to be hashed.  Referred to
    * as the message schedule in the docs.
    * @private
    */
    this.W_ = [];
    /**
    * Contains data needed to pad messages less than 64 bytes.
    * @private
    */
    this.pad_ = [];
    /**
    * @private {number}
    */
    this.inbuf_ = 0;
    /**
    * @private {number}
    */
    this.total_ = 0;
    this.blockSize = 512 / 8;
    this.pad_[0] = 128;
    for (var i = 1; i < this.blockSize; ++i) {
      this.pad_[i] = 0;
    }
    this.reset();
  }
  Sha1.prototype.reset = function () {
    this.chain_[0] = 0x67452301;
    this.chain_[1] = 0xefcdab89;
    this.chain_[2] = 0x98badcfe;
    this.chain_[3] = 0x10325476;
    this.chain_[4] = 0xc3d2e1f0;
    this.inbuf_ = 0;
    this.total_ = 0;
  };
  /**
  * Internal compress helper function.
  * @param buf Block to compress.
  * @param offset Offset of the block in the buffer.
  * @private
  */
  Sha1.prototype.compress_ = function (buf, offset) {
    if (!offset) {
      offset = 0;
    }
    var W = this.W_;
    // get 16 big endian words
    if (typeof buf === 'string') {
      for (var i = 0; i < 16; i++) {
        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
        // have a bug that turns the post-increment ++ operator into pre-increment
        // during JIT compilation.  We have code that depends heavily on SHA-1 for
        // correctness and which is affected by this bug, so I've removed all uses
        // of post-increment ++ in which the result value is used.  We can revert
        // this change once the Safari bug
        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
        // most clients have been updated.
        W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
        offset += 4;
      }
    } else {
      for (var i = 0; i < 16; i++) {
        W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
        offset += 4;
      }
    }
    // expand to 80 words
    for (var i = 16; i < 80; i++) {
      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      W[i] = (t << 1 | t >>> 31) & 0xffffffff;
    }
    var a = this.chain_[0];
    var b = this.chain_[1];
    var c = this.chain_[2];
    var d = this.chain_[3];
    var e = this.chain_[4];
    var f, k;
    // TODO(user): Try to unroll this loop to speed up the computation.
    for (var i = 0; i < 80; i++) {
      if (i < 40) {
        if (i < 20) {
          f = d ^ b & (c ^ d);
          k = 0x5a827999;
        } else {
          f = b ^ c ^ d;
          k = 0x6ed9eba1;
        }
      } else {
        if (i < 60) {
          f = b & c | d & (b | c);
          k = 0x8f1bbcdc;
        } else {
          f = b ^ c ^ d;
          k = 0xca62c1d6;
        }
      }
      var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;
      e = d;
      d = c;
      c = (b << 30 | b >>> 2) & 0xffffffff;
      b = a;
      a = t;
    }
    this.chain_[0] = this.chain_[0] + a & 0xffffffff;
    this.chain_[1] = this.chain_[1] + b & 0xffffffff;
    this.chain_[2] = this.chain_[2] + c & 0xffffffff;
    this.chain_[3] = this.chain_[3] + d & 0xffffffff;
    this.chain_[4] = this.chain_[4] + e & 0xffffffff;
  };
  Sha1.prototype.update = function (bytes, length) {
    // TODO(johnlenz): tighten the function signature and remove this check
    if (bytes == null) {
      return;
    }
    if (length === undefined) {
      length = bytes.length;
    }
    var lengthMinusBlock = length - this.blockSize;
    var n = 0;
    // Using local instead of member variables gives ~5% speedup on Firefox 16.
    var buf = this.buf_;
    var inbuf = this.inbuf_;
    // The outer while loop should execute at most twice.
    while (n < length) {
      // When we have no data in the block to top up, we can directly process the
      // input buffer (assuming it contains sufficient data). This gives ~25%
      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
      // the data is provided in large chunks (or in multiples of 64 bytes).
      if (inbuf === 0) {
        while (n <= lengthMinusBlock) {
          this.compress_(bytes, n);
          n += this.blockSize;
        }
      }
      if (typeof bytes === 'string') {
        while (n < length) {
          buf[inbuf] = bytes.charCodeAt(n);
          ++inbuf;
          ++n;
          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0;
            // Jump to the outer loop so we use the full-block optimization.
            break;
          }
        }
      } else {
        while (n < length) {
          buf[inbuf] = bytes[n];
          ++inbuf;
          ++n;
          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0;
            // Jump to the outer loop so we use the full-block optimization.
            break;
          }
        }
      }
    }
    this.inbuf_ = inbuf;
    this.total_ += length;
  };
  /** @override*/
  Sha1.prototype.digest = function () {
    var digest = [];
    var totalBits = this.total_ * 8;
    // Add pad 0x80 0x00*.
    if (this.inbuf_ < 56) {
      this.update(this.pad_, 56 - this.inbuf_);
    } else {
      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
    }
    // Add # bits.
    for (var i = this.blockSize - 1; i >= 56; i--) {
      this.buf_[i] = totalBits & 255;
      totalBits /= 256;
    }
    this.compress_(this.buf_);
    var n = 0;
    for (var i = 0; i < 5; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        digest[n] = this.chain_[i] >> j & 255;
        ++n;
      }
    }
    return digest;
  };
  return Sha1;
})();
/**
* Helper to make a Subscribe function (just like Promise helps make a
* Thenable).
*
* @param executor Function which can make calls to a single Observer
*     as a proxy.
* @param onNoObservers Callback when count of Observers goes to zero.
*/
function createSubscribe(executor, onNoObservers) {
  var proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
/**
* Implement fan-out for any number of Observers attached via a subscribe
* function.
*/
var ObserverProxy = /** @class*/
(function () {
  /**
  * @param executor Function which can make calls to a single Observer
  *     as a proxy.
  * @param onNoObservers Callback when count of Observers goes to zero.
  */
  function ObserverProxy(executor, onNoObservers) {
    var _this = this;
    this.observers = [];
    this.unsubscribes = [];
    this.observerCount = 0;
    // Micro-task scheduling by calling task.then().
    this.task = Promise.resolve();
    this.finalized = false;
    this.onNoObservers = onNoObservers;
    // Call the executor asynchronously so subscribers that are called
    // synchronously after the creation of the subscribe function
    // can still receive the very first value generated in the executor.
    this.task.then(function () {
      executor(_this);
    }).catch(function (e) {
      _this.error(e);
    });
  }
  ObserverProxy.prototype.next = function (value) {
    this.forEachObserver(function (observer) {
      observer.next(value);
    });
  };
  ObserverProxy.prototype.error = function (error) {
    this.forEachObserver(function (observer) {
      observer.error(error);
    });
    this.close(error);
  };
  ObserverProxy.prototype.complete = function () {
    this.forEachObserver(function (observer) {
      observer.complete();
    });
    this.close();
  };
  /**
  * Subscribe function that can be used to add an Observer to the fan-out list.
  *
  * - We require that no event is sent to a subscriber sychronously to their
  *   call to subscribe().
  */
  ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
    var _this = this;
    var observer;
    if (nextOrObserver === undefined && error === undefined && complete === undefined) {
      throw new Error('Missing Observer.');
    }
    // Assemble an Observer object when passed as callback functions.
    if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
      observer = nextOrObserver;
    } else {
      observer = {
        next: nextOrObserver,
        error: error,
        complete: complete
      };
    }
    if (observer.next === undefined) {
      observer.next = noop;
    }
    if (observer.error === undefined) {
      observer.error = noop;
    }
    if (observer.complete === undefined) {
      observer.complete = noop;
    }
    var unsub = this.unsubscribeOne.bind(this, this.observers.length);
    // Attempt to subscribe to a terminated Observable - we
    // just respond to the Observer with the final error or complete
    // event.
    if (this.finalized) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.task.then(function () {
        try {
          if (_this.finalError) {
            observer.error(_this.finalError);
          } else {
            observer.complete();
          }
        } catch (e) {}
        return;
      });
    }
    this.observers.push(observer);
    return unsub;
  };
  // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.
  ObserverProxy.prototype.unsubscribeOne = function (i) {
    if (this.observers === undefined || this.observers[i] === undefined) {
      return;
    }
    delete this.observers[i];
    this.observerCount -= 1;
    if (this.observerCount === 0 && this.onNoObservers !== undefined) {
      this.onNoObservers(this);
    }
  };
  ObserverProxy.prototype.forEachObserver = function (fn) {
    if (this.finalized) {
      // Already closed by previous event....just eat the additional values.
      return;
    }
    // Since sendOne calls asynchronously - there is no chance that
    // this.observers will become undefined.
    for (var i = 0; i < this.observers.length; i++) {
      this.sendOne(i, fn);
    }
  };
  // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.
  ObserverProxy.prototype.sendOne = function (i, fn) {
    var _this = this;
    // Execute the callback asynchronously
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.task.then(function () {
      if (_this.observers !== undefined && _this.observers[i] !== undefined) {
        try {
          fn(_this.observers[i]);
        } catch (e) {
          // Ignore exceptions raised in Observers or missing methods of an
          // Observer.
          // Log error to console. b/31404806
          if (typeof console !== 'undefined' && console.error) {
            console.error(e);
          }
        }
      }
    });
  };
  ObserverProxy.prototype.close = function (err) {
    var _this = this;
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    if (err !== undefined) {
      this.finalError = err;
    }
    // Proxy is no longer needed - garbage collect references
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.task.then(function () {
      _this.observers = undefined;
      _this.onNoObservers = undefined;
    });
  };
  return ObserverProxy;
})();
/** Turn synchronous function into one called asynchronously.*/
// eslint-disable-next-line @typescript-eslint/ban-types
function async(fn, onError) {
  return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    Promise.resolve(true).then(function () {
      fn.apply(void 0, args);
    }).catch(function (error) {
      if (onError) {
        onError(error);
      }
    });
  };
}
/**
* Return true if the object passed in implements any of the named methods.
*/
function implementsAnyMethods(obj, methods) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }
  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
    var method = methods_1[_i];
    if ((method in obj) && typeof obj[method] === 'function') {
      return true;
    }
  }
  return false;
}
function noop() {}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Check to make sure the appropriate number of arguments are provided for a public function.
* Throws an error if it fails.
*
* @param fnName The function name
* @param minCount The minimum number of arguments to allow for the function call
* @param maxCount The maximum number of argument to allow for the function call
* @param argCount The actual number of arguments provided.
*/
var validateArgCount = function (fnName, minCount, maxCount, argCount) {
  var argError;
  if (argCount < minCount) {
    argError = 'at least ' + minCount;
  } else if (argCount > maxCount) {
    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
  }
  if (argError) {
    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
    throw new Error(error);
  }
};
/**
* Generates a string to prefix an error message about failed argument validation
*
* @param fnName The function name
* @param argumentNumber The index of the argument
* @param optional Whether or not the argument is optional
* @return The prefix to add to the error thrown for validation.
*/
function errorPrefix(fnName, argumentNumber, optional) {
  var argName = '';
  switch (argumentNumber) {
    case 1:
      argName = optional ? 'first' : 'First';
      break;
    case 2:
      argName = optional ? 'second' : 'Second';
      break;
    case 3:
      argName = optional ? 'third' : 'Third';
      break;
    case 4:
      argName = optional ? 'fourth' : 'Fourth';
      break;
    default:
      throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
  }
  var error = fnName + ' failed: ';
  error += argName + ' argument ';
  return error;
}
/**
* @param fnName
* @param argumentNumber
* @param namespace
* @param optional
*/
function validateNamespace(fnName, argumentNumber, namespace, optional) {
  if (optional && !namespace) {
    return;
  }
  if (typeof namespace !== 'string') {
    // TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');
  }
}
function validateCallback(fnName, argumentNumber, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
  if (optional && !callback) {
    return;
  }
  if (typeof callback !== 'function') {
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');
  }
}
function validateContextObject(fnName, argumentNumber, context, optional) {
  if (optional && !context) {
    return;
  }
  if (typeof context !== 'object' || context === null) {
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');
  }
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
* @param {string} str
* @return {Array}
*/
var stringToByteArray$1 = function (str) {
  var out = [];
  var p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    // Is this the lead surrogate in a surrogate pair?
    if (c >= 0xd800 && c <= 0xdbff) {
      var high = c - 0xd800;
      // the high 10 bits.
      i++;
      assert(i < str.length, 'Surrogate pair missing trail surrogate.');
      var low = str.charCodeAt(i) - 0xdc00;
      // the low 10 bits.
      c = 0x10000 + (high << 10) + low;
    }
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if (c < 65536) {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }
  return out;
};
/**
* Calculate length without actually converting; useful for doing cheaper validation.
* @param {string} str
* @return {number}
*/
var stringLength = function (str) {
  var p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      p++;
    } else if (c < 2048) {
      p += 2;
    } else if (c >= 0xd800 && c <= 0xdbff) {
      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
      p += 4;
      i++;
    } else {
      p += 3;
    }
  }
  return p;
};
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* The amount of milliseconds to exponentially increase.
*/
var DEFAULT_INTERVAL_MILLIS = 1000;
/**
* The factor to backoff by.
* Should be a number greater than 1.
*/
var DEFAULT_BACKOFF_FACTOR = 2;
/**
* The maximum milliseconds to increase to.
*
* <p>Visible for testing
*/
var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000;
// Four hours, like iOS and Android.
/**
* The percentage of backoff time to randomize by.
* See
* http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
* for context.
*
* <p>Visible for testing
*/
var RANDOM_FACTOR = 0.5;
/**
* Based on the backoff method from
* https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
* Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
*/
function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
  if (intervalMillis === void 0) {
    intervalMillis = DEFAULT_INTERVAL_MILLIS;
  }
  if (backoffFactor === void 0) {
    backoffFactor = DEFAULT_BACKOFF_FACTOR;
  }
  // Calculates an exponentially increasing value.
  // Deviation: calculates value from count and a constant interval, so we only need to save value
  // and count to restore state.
  var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
  // A random "fuzz" to avoid waves of retries.
  // Deviation: randomFactor is required.
  var randomWait = Math.round(// A fraction of the backoff value to add/subtract.
  // Deviation: changes multiplication order to improve readability.
  RANDOM_FACTOR * currBaseValue * (// A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
  // if we add or subtract.
  Math.random() - 0.5) * 2);
  // Limits backoff to max to avoid effectively permanent backoff.
  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Provide English ordinal letters after a number
*/
function ordinal(i) {
  if (!Number.isFinite(i)) {
    return "" + i;
  }
  return i + indicator(i);
}
function indicator(i) {
  i = Math.abs(i);
  var cent = i % 100;
  if (cent >= 10 && cent <= 20) {
    return 'th';
  }
  var dec = i % 10;
  if (dec === 1) {
    return 'st';
  }
  if (dec === 2) {
    return 'nd';
  }
  if (dec === 3) {
    return 'rd';
  }
  return 'th';
}

},{"tslib":"4rd38","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"5gA8y":[function(require,module,exports) {
"use strict";

exports.interopDefault = function (a) {
  return a && a.__esModule ? a : {
    default: a
  };
};

exports.defineInteropFlag = function (a) {
  Object.defineProperty(a, '__esModule', {
    value: true
  });
};

exports.exportAll = function (source, dest) {
  Object.keys(source).forEach(function (key) {
    if (key === 'default' || key === '__esModule') {
      return;
    } // Skip duplicate re-exports when they have the same value.


    if (key in dest && dest[key] === source[key]) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function () {
        return source[key];
      }
    });
  });
  return dest;
};

exports.export = function (dest, destName, get) {
  Object.defineProperty(dest, destName, {
    enumerable: true,
    get: get
  });
};
},{}],"5qT0x":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Component", function () {
  return Component;
});
_parcelHelpers.export(exports, "ComponentContainer", function () {
  return ComponentContainer;
});
_parcelHelpers.export(exports, "Provider", function () {
  return Provider;
});
var _tslib = require('tslib');
var _firebaseUtil = require('@firebase/util');
/**
* Component for service name T, e.g. `auth`, `auth-internal`
*/
var Component = /** @class*/
(function () {
  /**
  *
  * @param name The public service name, e.g. app, auth, firestore, database
  * @param instanceFactory Service factory responsible for creating the public interface
  * @param type whether the service provided by the component is public or private
  */
  function Component(name, instanceFactory, type) {
    this.name = name;
    this.instanceFactory = instanceFactory;
    this.type = type;
    this.multipleInstances = false;
    /**
    * Properties to be added to the service namespace
    */
    this.serviceProps = {};
    this.instantiationMode = "LAZY";
  }
  Component.prototype.setInstantiationMode = function (mode) {
    this.instantiationMode = mode;
    return this;
  };
  Component.prototype.setMultipleInstances = function (multipleInstances) {
    this.multipleInstances = multipleInstances;
    return this;
  };
  Component.prototype.setServiceProps = function (props) {
    this.serviceProps = props;
    return this;
  };
  return Component;
})();
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Provider for instance for service name T, e.g. 'auth', 'auth-internal'
* NameServiceMapping[T] is an alias for the type of the instance
*/
var Provider = /** @class*/
(function () {
  function Provider(name, container) {
    this.name = name;
    this.container = container;
    this.component = null;
    this.instances = new Map();
    this.instancesDeferred = new Map();
  }
  /**
  * @param identifier A provider can provide mulitple instances of a service
  * if this.component.multipleInstances is true.
  */
  Provider.prototype.get = function (identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }
    // if multipleInstances is not supported, use the default name
    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
    if (!this.instancesDeferred.has(normalizedIdentifier)) {
      var deferred = new _firebaseUtil.Deferred();
      this.instancesDeferred.set(normalizedIdentifier, deferred);
      // If the service instance is available, resolve the promise with it immediately
      try {
        var instance = this.getOrInitializeService(normalizedIdentifier);
        if (instance) {
          deferred.resolve(instance);
        }
      } catch (e) {}
    }
    return this.instancesDeferred.get(normalizedIdentifier).promise;
  };
  Provider.prototype.getImmediate = function (options) {
    var _a = _tslib.__assign({
      identifier: DEFAULT_ENTRY_NAME,
      optional: false
    }, options), identifier = _a.identifier, optional = _a.optional;
    // if multipleInstances is not supported, use the default name
    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
    try {
      var instance = this.getOrInitializeService(normalizedIdentifier);
      if (!instance) {
        if (optional) {
          return null;
        }
        throw Error("Service " + this.name + " is not available");
      }
      return instance;
    } catch (e) {
      if (optional) {
        return null;
      } else {
        throw e;
      }
    }
  };
  Provider.prototype.getComponent = function () {
    return this.component;
  };
  Provider.prototype.setComponent = function (component) {
    var e_1, _a;
    if (component.name !== this.name) {
      throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
    }
    if (this.component) {
      throw Error("Component for " + this.name + " has already been provided");
    }
    this.component = component;
    // if the service is eager, initialize the default instance
    if (isComponentEager(component)) {
      try {
        this.getOrInitializeService(DEFAULT_ENTRY_NAME);
      } catch (e) {}
    }
    try {
      // Create service instances for the pending promises and resolve them
      // NOTE: if this.multipleInstances is false, only the default instance will be created
      // and all promises with resolve with it regardless of the identifier.
      for (var _b = _tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var _d = _tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
        try {
          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
          var instance = this.getOrInitializeService(normalizedIdentifier);
          instanceDeferred.resolve(instance);
        } catch (e) {}
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };
  Provider.prototype.clearInstance = function (identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }
    this.instancesDeferred.delete(identifier);
    this.instances.delete(identifier);
  };
  // app.delete() will call this method on every provider to delete the services
  // TODO: should we mark the provider as deleted?
  Provider.prototype.delete = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var services;
      return _tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            services = Array.from(this.instances.values());
            return [4, /*yield*/
            Promise.all(_tslib.__spread(services.filter(function (service) {
              return ('INTERNAL' in service);
            }).// legacy services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            map(function (service) {
              return service.INTERNAL.delete();
            }), services.filter(function (service) {
              return ('_delete' in service);
            }).// modularized services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            map(function (service) {
              return service._delete();
            })))];
          case 1:
            _a.sent();
            return [2];
        }
      });
    });
  };
  Provider.prototype.isComponentSet = function () {
    return this.component != null;
  };
  Provider.prototype.isInitialized = function (identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }
    return this.instances.has(identifier);
  };
  Provider.prototype.getOrInitializeService = function (identifier) {
    var instance = this.instances.get(identifier);
    if (!instance && this.component) {
      instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
      this.instances.set(identifier, instance);
    }
    return instance || null;
  };
  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
    if (this.component) {
      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
    } else {
      return identifier;
    }
  };
  return Provider;
})();
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
  return component.instantiationMode === "EAGER";
}
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
*/
var ComponentContainer = /** @class*/
(function () {
  function ComponentContainer(name) {
    this.name = name;
    this.providers = new Map();
  }
  /**
  *
  * @param component Component being added
  * @param overwrite When a component with the same name has already been registered,
  * if overwrite is true: overwrite the existing component with the new component and create a new
  * provider with the new component. It can be useful in tests where you want to use different mocks
  * for different tests.
  * if overwrite is false: throw an exception
  */
  ComponentContainer.prototype.addComponent = function (component) {
    var provider = this.getProvider(component.name);
    if (provider.isComponentSet()) {
      throw new Error("Component " + component.name + " has already been registered with " + this.name);
    }
    provider.setComponent(component);
  };
  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
    var provider = this.getProvider(component.name);
    if (provider.isComponentSet()) {
      // delete the existing provider from the container, so we can register the new component
      this.providers.delete(component.name);
    }
    this.addComponent(component);
  };
  /**
  * getProvider provides a type safe interface where it can only be called with a field name
  * present in NameServiceMapping interface.
  *
  * Firebase SDKs providing services should extend NameServiceMapping interface to register
  * themselves.
  */
  ComponentContainer.prototype.getProvider = function (name) {
    if (this.providers.has(name)) {
      return this.providers.get(name);
    }
    // create a Provider for a service that hasn't registered with Firebase
    var provider = new Provider(name, this);
    this.providers.set(name, provider);
    return provider;
  };
  ComponentContainer.prototype.getProviders = function () {
    return Array.from(this.providers.values());
  };
  return ComponentContainer;
})();

},{"tslib":"4rd38","@firebase/util":"3bR6t","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"5PuYX":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;
/**
 * A container for all of the Logger instances
 */
var instances = [];
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(exports.LogLevel || (exports.LogLevel = {}));
var levelStringToEnum = {
    'debug': exports.LogLevel.DEBUG,
    'verbose': exports.LogLevel.VERBOSE,
    'info': exports.LogLevel.INFO,
    'warn': exports.LogLevel.WARN,
    'error': exports.LogLevel.ERROR,
    'silent': exports.LogLevel.SILENT
};
/**
 * The default log level
 */
var defaultLogLevel = exports.LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */
var ConsoleMethod = (_a = {},
    _a[exports.LogLevel.DEBUG] = 'log',
    _a[exports.LogLevel.VERBOSE] = 'log',
    _a[exports.LogLevel.INFO] = 'info',
    _a[exports.LogLevel.WARN] = 'warn',
    _a[exports.LogLevel.ERROR] = 'error',
    _a);
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */
var defaultLogHandler = function (instance, logType) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (logType < instance.logLevel) {
        return;
    }
    var now = new Date().toISOString();
    var method = ConsoleMethod[logType];
    if (method) {
        console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
    }
    else {
        throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
    }
};
var Logger = /** @class */ (function () {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */
    function Logger(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */
        this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */
        this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */
        this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */
        instances.push(this);
    }
    Object.defineProperty(Logger.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        set: function (val) {
            if (!(val in exports.LogLevel)) {
                throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
            }
            this._logLevel = val;
        },
        enumerable: false,
        configurable: true
    });
    // Workaround for setter/getter having to be the same type.
    Logger.prototype.setLogLevel = function (val) {
        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    };
    Object.defineProperty(Logger.prototype, "logHandler", {
        get: function () {
            return this._logHandler;
        },
        set: function (val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "userLogHandler", {
        get: function () {
            return this._userLogHandler;
        },
        set: function (val) {
            this._userLogHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The functions below are all based on the `console` interface
     */
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.DEBUG], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.DEBUG], args));
    };
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.VERBOSE], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.VERBOSE], args));
    };
    Logger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.INFO], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.INFO], args));
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.WARN], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.WARN], args));
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.ERROR], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.ERROR], args));
    };
    return Logger;
}());
function setLogLevel(level) {
    instances.forEach(function (inst) {
        inst.setLogLevel(level);
    });
}
function setUserLogHandler(logCallback, options) {
    var _loop_1 = function (instance) {
        var customLogLevel = null;
        if (options && options.level) {
            customLogLevel = levelStringToEnum[options.level];
        }
        if (logCallback === null) {
            instance.userLogHandler = null;
        }
        else {
            instance.userLogHandler = function (instance, level) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                var message = args
                    .map(function (arg) {
                    if (arg == null) {
                        return null;
                    }
                    else if (typeof arg === 'string') {
                        return arg;
                    }
                    else if (typeof arg === 'number' || typeof arg === 'boolean') {
                        return arg.toString();
                    }
                    else if (arg instanceof Error) {
                        return arg.message;
                    }
                    else {
                        try {
                            return JSON.stringify(arg);
                        }
                        catch (ignored) {
                            return null;
                        }
                    }
                })
                    .filter(function (arg) { return arg; })
                    .join(' ');
                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                    logCallback({
                        level: exports.LogLevel[level].toLowerCase(),
                        message: message,
                        args: args,
                        type: instance.name
                    });
                }
            };
        }
    };
    for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
        var instance = instances_1[_i];
        _loop_1(instance);
    }
}

exports.Logger = Logger;
exports.setLogLevel = setLogLevel;
exports.setUserLogHandler = setUserLogHandler;

},{}],"3rqrX":[function(require,module,exports) {
'use strict';

require('@firebase/auth');


},{"@firebase/auth":"2lC03"}],"2lC03":[function(require,module,exports) {
var _firebaseApp = require('@firebase/app');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _firebaseAppDefault = _parcelHelpers.interopDefault(_firebaseApp);
var global = arguments[3];
(function () {
  /*
  
  Copyright The Closure Library Authors.
  SPDX-License-Identifier: Apache-2.0
  */
  var k, aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
    a != Array.prototype && a != Object.prototype && (a[b] = c.value);
  };
  function ba(a) {
    a = ["object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global, a];
    for (var b = 0; b < a.length; ++b) {
      var c = a[b];
      if (c && c.Math == Math) return c;
    }
    return globalThis;
  }
  var ca = ba(this);
  function da(a, b) {
    if (b) {
      var c = ca;
      a = a.split(".");
      for (var d = 0; d < a.length - 1; d++) {
        var e = a[d];
        (e in c) || (c[e] = {});
        c = c[e];
      }
      a = a[a.length - 1];
      d = c[a];
      b = b(d);
      b != d && null != b && aa(c, a, {
        configurable: !0,
        writable: !0,
        value: b
      });
    }
  }
  function ea(a) {
    var b = 0;
    return function () {
      return b < a.length ? {
        done: !1,
        value: a[b++]
      } : {
        done: !0
      };
    };
  }
  function fa(a) {
    var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
    return b ? b.call(a) : {
      next: ea(a)
    };
  }
  da("Promise", function (a) {
    function b(g) {
      this.b = 0;
      this.c = void 0;
      this.a = [];
      var h = this.f();
      try {
        g(h.resolve, h.reject);
      } catch (m) {
        h.reject(m);
      }
    }
    function c() {
      this.a = null;
    }
    function d(g) {
      return g instanceof b ? g : new b(function (h) {
        h(g);
      });
    }
    if (a) return a;
    c.prototype.b = function (g) {
      if (null == this.a) {
        this.a = [];
        var h = this;
        this.c(function () {
          h.g();
        });
      }
      this.a.push(g);
    };
    var e = ca.setTimeout;
    c.prototype.c = function (g) {
      e(g, 0);
    };
    c.prototype.g = function () {
      for (; this.a && this.a.length; ) {
        var g = this.a;
        this.a = [];
        for (var h = 0; h < g.length; ++h) {
          var m = g[h];
          g[h] = null;
          try {
            m();
          } catch (p) {
            this.f(p);
          }
        }
      }
      this.a = null;
    };
    c.prototype.f = function (g) {
      this.c(function () {
        throw g;
      });
    };
    b.prototype.f = function () {
      function g(p) {
        return function (v) {
          m || (m = !0, p.call(h, v));
        };
      }
      var h = this, m = !1;
      return {
        resolve: g(this.m),
        reject: g(this.g)
      };
    };
    b.prototype.m = function (g) {
      if (g === this) this.g(new TypeError("A Promise cannot resolve to itself")); else if (g instanceof b) this.s(g); else {
        a: switch (typeof g) {
          case "object":
            var h = null != g;
            break a;
          case "function":
            h = !0;
            break a;
          default:
            h = !1;
        }
        h ? this.v(g) : this.h(g);
      }
    };
    b.prototype.v = function (g) {
      var h = void 0;
      try {
        h = g.then;
      } catch (m) {
        this.g(m);
        return;
      }
      "function" == typeof h ? this.u(h, g) : this.h(g);
    };
    b.prototype.g = function (g) {
      this.i(2, g);
    };
    b.prototype.h = function (g) {
      this.i(1, g);
    };
    b.prototype.i = function (g, h) {
      if (0 != this.b) throw Error("Cannot settle(" + g + ", " + h + "): Promise already settled in state" + this.b);
      this.b = g;
      this.c = h;
      this.l();
    };
    b.prototype.l = function () {
      if (null != this.a) {
        for (var g = 0; g < this.a.length; ++g) f.b(this.a[g]);
        this.a = null;
      }
    };
    var f = new c();
    b.prototype.s = function (g) {
      var h = this.f();
      g.Qa(h.resolve, h.reject);
    };
    b.prototype.u = function (g, h) {
      var m = this.f();
      try {
        g.call(h, m.resolve, m.reject);
      } catch (p) {
        m.reject(p);
      }
    };
    b.prototype.then = function (g, h) {
      function m(A, Q) {
        return "function" == typeof A ? function (ya) {
          try {
            p(A(ya));
          } catch (Ad) {
            v(Ad);
          }
        } : Q;
      }
      var p, v, B = new b(function (A, Q) {
        p = A;
        v = Q;
      });
      this.Qa(m(g, p), m(h, v));
      return B;
    };
    b.prototype.catch = function (g) {
      return this.then(void 0, g);
    };
    b.prototype.Qa = function (g, h) {
      function m() {
        switch (p.b) {
          case 1:
            g(p.c);
            break;
          case 2:
            h(p.c);
            break;
          default:
            throw Error("Unexpected state: " + p.b);
        }
      }
      var p = this;
      null == this.a ? f.b(m) : this.a.push(m);
    };
    b.resolve = d;
    b.reject = function (g) {
      return new b(function (h, m) {
        m(g);
      });
    };
    b.race = function (g) {
      return new b(function (h, m) {
        for (var p = fa(g), v = p.next(); !v.done; v = p.next()) d(v.value).Qa(h, m);
      });
    };
    b.all = function (g) {
      var h = fa(g), m = h.next();
      return m.done ? d([]) : new b(function (p, v) {
        function B(ya) {
          return function (Ad) {
            A[ya] = Ad;
            Q--;
            0 == Q && p(A);
          };
        }
        var A = [], Q = 0;
        do (A.push(void 0), Q++, d(m.value).Qa(B(A.length - 1), v), m = h.next()); while (!m.done);
      });
    };
    return b;
  });
  var ha = ha || ({}), l = this || self, ia = /^[\w+/_-]+[=]{0,2}$/, ja = null;
  function ka(a) {
    return (a = a.querySelector && a.querySelector("script[nonce]")) && (a = a.nonce || a.getAttribute("nonce")) && ia.test(a) ? a : "";
  }
  function la() {}
  function ma(a) {
    var b = typeof a;
    return "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
  }
  function na(a) {
    var b = ma(a);
    return "array" == b || "object" == b && "number" == typeof a.length;
  }
  function oa(a) {
    return "function" == ma(a);
  }
  function n(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
  }
  function pa(a) {
    return Object.prototype.hasOwnProperty.call(a, qa) && a[qa] || (a[qa] = ++ra);
  }
  var qa = "closure_uid_" + (1E9 * Math.random() >>> 0), ra = 0;
  function sa(a, b, c) {
    return a.call.apply(a.bind, arguments);
  }
  function ta(a, b, c) {
    if (!a) throw Error();
    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () {
        var e = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(e, d);
        return a.apply(b, e);
      };
    }
    return function () {
      return a.apply(b, arguments);
    };
  }
  function q(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q = sa : q = ta;
    return q.apply(null, arguments);
  }
  function ua(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function () {
      var d = c.slice();
      d.push.apply(d, arguments);
      return a.apply(this, d);
    };
  }
  var va = Date.now;
  function r(a, b) {
    function c() {}
    c.prototype = b.prototype;
    a.ab = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;
  }
  function wa(a) {
    return a;
  }
  ;
  /*
  
  Copyright 2017 Google Inc.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  function t(a, b, c) {
    this.code = xa + a;
    this.message = b || za[a] || "";
    this.a = c || null;
  }
  r(t, Error);
  t.prototype.w = function () {
    var a = {
      code: this.code,
      message: this.message
    };
    this.a && (a.serverResponse = this.a);
    return a;
  };
  t.prototype.toJSON = function () {
    return this.w();
  };
  function Aa(a) {
    var b = a && a.code;
    return b ? new t(b.substring(xa.length), a.message, a.serverResponse) : null;
  }
  var xa = "auth/", za = {
    "admin-restricted-operation": "This operation is restricted to administrators only.",
    "argument-error": "",
    "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
    "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
    "captcha-check-failed": "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
    "code-expired": "The SMS code has expired. Please re-send the verification code to try again.",
    "cordova-not-ready": "Cordova framework is not ready.",
    "cors-unsupported": "This browser is not supported.",
    "credential-already-in-use": "This credential is already associated with a different user account.",
    "custom-token-mismatch": "The custom token corresponds to a different audience.",
    "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
    "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
    "email-change-needs-verification": "Multi-factor users must always have a verified email.",
    "email-already-in-use": "The email address is already in use by another account.",
    "expired-action-code": "The action code has expired. ",
    "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.",
    "internal-error": "An internal error has occurred.",
    "invalid-app-credential": "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
    "invalid-app-id": "The mobile app identifier is not registed for the current project.",
    "invalid-user-token": "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
    "invalid-auth-event": "An internal error has occurred.",
    "invalid-verification-code": "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",
    "invalid-continue-uri": "The continue URL provided in the request is invalid.",
    "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
    "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",
    "invalid-dynamic-link-domain": "The provided dynamic link domain is not configured or authorized for the current project.",
    "invalid-email": "The email address is badly formatted.",
    "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",
    "invalid-cert-hash": "The SHA-1 certificate hash provided is invalid.",
    "invalid-credential": "The supplied auth credential is malformed or has expired.",
    "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
    "invalid-multi-factor-session": "The request does not contain a valid proof of first factor successful sign-in.",
    "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
    "invalid-oauth-client-id": "The OAuth client ID provided is either invalid or does not match the specified API key.",
    "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
    "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
    "wrong-password": "The password is invalid or the user does not have a password.",
    "invalid-persistence-type": "The specified persistence type is invalid. It can only be local, session or none.",
    "invalid-phone-number": "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
    "invalid-provider-id": "The specified provider ID is invalid.",
    "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
    "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
    "invalid-verification-id": "The verification ID used to create the phone auth credential is invalid.",
    "invalid-tenant-id": "The Auth instance's tenant ID is invalid.",
    "multi-factor-info-not-found": "The user does not have a second factor matching the identifier provided.",
    "multi-factor-auth-required": "Proof of ownership of a second factor is required to complete sign-in.",
    "missing-android-pkg-name": "An Android Package Name must be provided if the Android App is required to be installed.",
    "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
    "missing-app-credential": "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
    "missing-verification-code": "The phone auth credential was created with an empty SMS verification code.",
    "missing-continue-uri": "A continue URL must be provided in the request.",
    "missing-iframe-start": "An internal error has occurred.",
    "missing-ios-bundle-id": "An iOS Bundle ID must be provided if an App Store ID is provided.",
    "missing-multi-factor-info": "No second factor identifier is provided.",
    "missing-multi-factor-session": "The request is missing proof of first factor successful sign-in.",
    "missing-or-invalid-nonce": "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
    "missing-phone-number": "To send verification codes, provide a phone number for the recipient.",
    "missing-verification-id": "The phone auth credential was created with an empty verification ID.",
    "app-deleted": "This instance of FirebaseApp has been deleted.",
    "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
    "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
    "no-auth-event": "An internal error has occurred.",
    "no-such-provider": "User was not linked to an account with the given provider.",
    "null-user": "A null user object was provided as the argument for an operation which requires a non-null user object.",
    "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
    "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
    "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.",
    "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",
    "provider-already-linked": "User can only be linked to one identity for the given provider.",
    "quota-exceeded": "The project's quota for this operation has been exceeded.",
    "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.",
    "redirect-operation-pending": "A redirect sign-in operation is already pending.",
    "rejected-credential": "The request contains malformed or mismatching credentials.",
    "second-factor-already-in-use": "The second factor is already enrolled on this account.",
    "maximum-second-factor-count-exceeded": "The maximum allowed number of second factors on a user has been exceeded.",
    "tenant-id-mismatch": "The provided tenant ID does not match the Auth instance's tenant ID",
    timeout: "The operation has timed out.",
    "user-token-expired": "The user's credential is no longer valid. The user must sign in again.",
    "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
    "unauthorized-continue-uri": "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
    "unsupported-first-factor": "Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.",
    "unsupported-persistence-type": "The current environment does not support the specified persistence type.",
    "unsupported-tenant-operation": "This operation is not supported in a multi-tenant context.",
    "unverified-email": "The operation requires a verified email.",
    "user-cancelled": "The user did not grant your application the permissions it requested.",
    "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.",
    "user-disabled": "The user account has been disabled by an administrator.",
    "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",
    "user-signed-out": "",
    "weak-password": "The password must be 6 characters long or more.",
    "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled."
  };
  /*
  
  Copyright 2017 Google LLC
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  var Ba = {
    ld: {
      Ta: "https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
      Za: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
      Wa: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/",
      id: "b"
    },
    sd: {
      Ta: "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
      Za: "https://securetoken.googleapis.com/v1/token",
      Wa: "https://identitytoolkit.googleapis.com/v2/",
      id: "p"
    },
    ud: {
      Ta: "https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
      Za: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
      Wa: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/",
      id: "s"
    },
    vd: {
      Ta: "https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",
      Za: "https://test-securetoken.sandbox.googleapis.com/v1/token",
      Wa: "https://test-identitytoolkit.sandbox.googleapis.com/v2/",
      id: "t"
    }
  };
  function Ca(a) {
    for (var b in Ba) if (Ba[b].id === a) return (a = Ba[b], {
      firebaseEndpoint: a.Ta,
      secureTokenEndpoint: a.Za,
      identityPlatformEndpoint: a.Wa
    });
    return null;
  }
  var Da;
  Da = Ca("__EID__") ? "__EID__" : void 0;
  function Ea(a) {
    if (!a) return !1;
    try {
      return !!a.$goog_Thenable;
    } catch (b) {
      return !1;
    }
  }
  ;
  function u(a) {
    if (Error.captureStackTrace) Error.captureStackTrace(this, u); else {
      var b = Error().stack;
      b && (this.stack = b);
    }
    a && (this.message = String(a));
  }
  r(u, Error);
  u.prototype.name = "CustomError";
  function Fa(a, b) {
    a = a.split("%s");
    for (var c = "", d = a.length - 1, e = 0; e < d; e++) c += a[e] + (e < b.length ? b[e] : "%s");
    u.call(this, c + a[d]);
  }
  r(Fa, u);
  Fa.prototype.name = "AssertionError";
  function Ga(a, b) {
    throw new Fa("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
  }
  ;
  function Ha(a, b) {
    this.c = a;
    this.f = b;
    this.b = 0;
    this.a = null;
  }
  Ha.prototype.get = function () {
    if (0 < this.b) {
      this.b--;
      var a = this.a;
      this.a = a.next;
      a.next = null;
    } else a = this.c();
    return a;
  };
  function Ia(a, b) {
    a.f(b);
    100 > a.b && (a.b++, b.next = a.a, a.a = b);
  }
  ;
  function Ja() {
    this.b = this.a = null;
  }
  var La = new Ha(function () {
    return new Ka();
  }, function (a) {
    a.reset();
  });
  Ja.prototype.add = function (a, b) {
    var c = La.get();
    c.set(a, b);
    this.b ? this.b.next = c : this.a = c;
    this.b = c;
  };
  function Ma() {
    var a = Na, b = null;
    a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
    return b;
  }
  function Ka() {
    this.next = this.b = this.a = null;
  }
  Ka.prototype.set = function (a, b) {
    this.a = a;
    this.b = b;
    this.next = null;
  };
  Ka.prototype.reset = function () {
    this.next = this.b = this.a = null;
  };
  var Oa = Array.prototype.indexOf ? function (a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
  } : function (a, b) {
    if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
    for (var c = 0; c < a.length; c++) if ((c in a) && a[c] === b) return c;
    return -1;
  }, w = Array.prototype.forEach ? function (a, b, c) {
    Array.prototype.forEach.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++) (f in e) && b.call(c, e[f], f, a);
  };
  function Pa(a, b) {
    for (var c = "string" === typeof a ? a.split("") : a, d = a.length - 1; 0 <= d; --d) (d in c) && b.call(void 0, c[d], d, a);
  }
  var Qa = Array.prototype.filter ? function (a, b) {
    return Array.prototype.filter.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = [], e = 0, f = "string" === typeof a ? a.split("") : a, g = 0; g < c; g++) if ((g in f)) {
      var h = f[g];
      b.call(void 0, h, g, a) && (d[e++] = h);
    }
    return d;
  }, Ra = Array.prototype.map ? function (a, b) {
    return Array.prototype.map.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = Array(c), e = "string" === typeof a ? a.split("") : a, f = 0; f < c; f++) (f in e) && (d[f] = b.call(void 0, e[f], f, a));
    return d;
  }, Sa = Array.prototype.some ? function (a, b) {
    return Array.prototype.some.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++) if ((e in d) && b.call(void 0, d[e], e, a)) return !0;
    return !1;
  };
  function Ta(a) {
    a: {
      var b = Ua;
      for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++) if ((e in d) && b.call(void 0, d[e], e, a)) {
        b = e;
        break a;
      }
      b = -1;
    }
    return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
  }
  function Va(a, b) {
    return 0 <= Oa(a, b);
  }
  function Wa(a, b) {
    b = Oa(a, b);
    var c;
    (c = 0 <= b) && Array.prototype.splice.call(a, b, 1);
    return c;
  }
  function Xa(a, b) {
    var c = 0;
    Pa(a, function (d, e) {
      b.call(void 0, d, e, a) && 1 == Array.prototype.splice.call(a, e, 1).length && c++;
    });
  }
  function Ya(a) {
    return Array.prototype.concat.apply([], arguments);
  }
  function Za(a) {
    var b = a.length;
    if (0 < b) {
      for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];
      return c;
    }
    return [];
  }
  ;
  var $a = String.prototype.trim ? function (a) {
    return a.trim();
  } : function (a) {
    return (/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/).exec(a)[1];
  }, ab = /&/g, bb = /</g, cb = />/g, db = /"/g, eb = /'/g, fb = /\x00/g, gb = /[\x00&<>"']/;
  function x(a, b) {
    return -1 != a.indexOf(b);
  }
  function hb(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  ;
  var ib;
  a: {
    var jb = l.navigator;
    if (jb) {
      var kb = jb.userAgent;
      if (kb) {
        ib = kb;
        break a;
      }
    }
    ib = "";
  }
  function y(a) {
    return x(ib, a);
  }
  ;
  function lb(a, b) {
    for (var c in a) b.call(void 0, a[c], c, a);
  }
  function mb(a) {
    for (var b in a) return !1;
    return !0;
  }
  function nb(a) {
    var b = {}, c;
    for (c in a) b[c] = a[c];
    return b;
  }
  var ob = ("constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf").split(" ");
  function z(a, b) {
    for (var c, d, e = 1; e < arguments.length; e++) {
      d = arguments[e];
      for (c in d) a[c] = d[c];
      for (var f = 0; f < ob.length; f++) (c = ob[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]));
    }
  }
  ;
  function pb(a, b) {
    a: {
      try {
        var c = a && a.ownerDocument, d = c && (c.defaultView || c.parentWindow);
        d = d || l;
        if (d.Element && d.Location) {
          var e = d;
          break a;
        }
      } catch (g) {}
      e = null;
    }
    if (e && "undefined" != typeof e[b] && (!a || !(a instanceof e[b]) && (a instanceof e.Location || a instanceof e.Element))) {
      if (n(a)) try {
        var f = a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a);
      } catch (g) {
        f = "<object could not be stringified>";
      } else f = void 0 === a ? "undefined" : null === a ? "null" : typeof a;
      Ga("Argument is not a %s (or a non-Element, non-Location mock); got: %s", b, f);
    }
  }
  ;
  function qb(a, b) {
    this.a = a === rb && b || "";
    this.b = sb;
  }
  qb.prototype.sa = !0;
  qb.prototype.ra = function () {
    return this.a;
  };
  qb.prototype.toString = function () {
    return "Const{" + this.a + "}";
  };
  function tb(a) {
    if (a instanceof qb && a.constructor === qb && a.b === sb) return a.a;
    Ga("expected object of type Const, got '" + a + "'");
    return "type_error:Const";
  }
  var sb = {}, rb = {};
  var ub;
  function vb() {
    if (void 0 === ub) {
      var a = null, b = l.trustedTypes;
      if (b && b.createPolicy) {
        try {
          a = b.createPolicy("goog#html", {
            createHTML: wa,
            createScript: wa,
            createScriptURL: wa
          });
        } catch (c) {
          l.console && l.console.error(c.message);
        }
        ub = a;
      } else ub = a;
    }
    return ub;
  }
  ;
  function wb(a, b) {
    this.a = b === xb ? a : "";
  }
  wb.prototype.sa = !0;
  wb.prototype.ra = function () {
    return this.a.toString();
  };
  wb.prototype.toString = function () {
    return "TrustedResourceUrl{" + this.a + "}";
  };
  function yb(a) {
    if (a instanceof wb && a.constructor === wb) return a.a;
    Ga("expected object of type TrustedResourceUrl, got '" + a + "' of type " + ma(a));
    return "type_error:TrustedResourceUrl";
  }
  function zb(a, b) {
    var c = tb(a);
    if (!Ab.test(c)) throw Error("Invalid TrustedResourceUrl format: " + c);
    a = c.replace(Bb, function (d, e) {
      if (!Object.prototype.hasOwnProperty.call(b, e)) throw Error('Found marker, "' + e + '", in format string, "' + c + '", but no valid label mapping found in args: ' + JSON.stringify(b));
      d = b[e];
      return d instanceof qb ? tb(d) : encodeURIComponent(String(d));
    });
    return Cb(a);
  }
  var Bb = /%{(\w+)}/g, Ab = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i, xb = {};
  function Cb(a) {
    var b = vb();
    a = b ? b.createScriptURL(a) : a;
    return new wb(a, xb);
  }
  ;
  function C(a, b) {
    this.a = b === Db ? a : "";
  }
  C.prototype.sa = !0;
  C.prototype.ra = function () {
    return this.a.toString();
  };
  C.prototype.toString = function () {
    return "SafeUrl{" + this.a + "}";
  };
  function Eb(a) {
    if (a instanceof C && a.constructor === C) return a.a;
    Ga("expected object of type SafeUrl, got '" + a + "' of type " + ma(a));
    return "type_error:SafeUrl";
  }
  var Fb = /^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i, Gb = /^data:(.*);base64,[a-z0-9+\/]+=*$/i, Hb = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
  function Ib(a) {
    if (a instanceof C) return a;
    a = "object" == typeof a && a.sa ? a.ra() : String(a);
    if (Hb.test(a)) a = new C(a, Db); else {
      a = String(a);
      a = a.replace(/(%0A|%0D)/g, "");
      var b = a.match(Gb);
      a = b && Fb.test(b[1]) ? new C(a, Db) : null;
    }
    return a;
  }
  function Jb(a) {
    if (a instanceof C) return a;
    a = "object" == typeof a && a.sa ? a.ra() : String(a);
    Hb.test(a) || (a = "about:invalid#zClosurez");
    return new C(a, Db);
  }
  var Db = {}, Kb = new C("about:invalid#zClosurez", Db);
  function Lb(a, b, c) {
    this.a = c === Mb ? a : "";
  }
  Lb.prototype.sa = !0;
  Lb.prototype.ra = function () {
    return this.a.toString();
  };
  Lb.prototype.toString = function () {
    return "SafeHtml{" + this.a + "}";
  };
  function Nb(a) {
    if (a instanceof Lb && a.constructor === Lb) return a.a;
    Ga("expected object of type SafeHtml, got '" + a + "' of type " + ma(a));
    return "type_error:SafeHtml";
  }
  var Mb = {};
  function Ob(a, b) {
    pb(a, "HTMLScriptElement");
    a.src = yb(b);
    (b = a.ownerDocument && a.ownerDocument.defaultView) && b != l ? b = ka(b.document) : (null === ja && (ja = ka(l.document)), b = ja);
    b && a.setAttribute("nonce", b);
  }
  function Pb(a, b, c, d) {
    a = a instanceof C ? a : Jb(a);
    b = b || l;
    c = c instanceof qb ? tb(c) : c || "";
    return b.open(Eb(a), c, d, void 0);
  }
  ;
  function Qb(a, b) {
    for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length; ) d += c.shift() + e.shift();
    return d + c.join("%s");
  }
  function Rb(a) {
    gb.test(a) && (-1 != a.indexOf("&") && (a = a.replace(ab, "&amp;")), -1 != a.indexOf("<") && (a = a.replace(bb, "&lt;")), -1 != a.indexOf(">") && (a = a.replace(cb, "&gt;")), -1 != a.indexOf('"') && (a = a.replace(db, "&quot;")), -1 != a.indexOf("'") && (a = a.replace(eb, "&#39;")), -1 != a.indexOf("\x00") && (a = a.replace(fb, "&#0;")));
    return a;
  }
  ;
  function Sb(a) {
    Sb[" "](a);
    return a;
  }
  Sb[" "] = la;
  function Tb(a, b) {
    var c = Ub;
    return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
  }
  ;
  var Vb = y("Opera"), Wb = y("Trident") || y("MSIE"), Xb = y("Edge"), Yb = Xb || Wb, Zb = y("Gecko") && !(x(ib.toLowerCase(), "webkit") && !y("Edge")) && !(y("Trident") || y("MSIE")) && !y("Edge"), $b = x(ib.toLowerCase(), "webkit") && !y("Edge");
  function ac() {
    var a = l.document;
    return a ? a.documentMode : void 0;
  }
  var bc;
  a: {
    var cc = "", dc = (function () {
      var a = ib;
      if (Zb) return (/rv:([^\);]+)(\)|;)/).exec(a);
      if (Xb) return (/Edge\/([\d\.]+)/).exec(a);
      if (Wb) return (/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/).exec(a);
      if ($b) return (/WebKit\/(\S+)/).exec(a);
      if (Vb) return (/(?:Version)[ \/]?(\S+)/).exec(a);
    })();
    dc && (cc = dc ? dc[1] : "");
    if (Wb) {
      var ec = ac();
      if (null != ec && ec > parseFloat(cc)) {
        bc = String(ec);
        break a;
      }
    }
    bc = cc;
  }
  var Ub = {};
  function fc(a) {
    return Tb(a, function () {
      for (var b = 0, c = $a(String(bc)).split("."), d = $a(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
        var g = c[f] || "", h = d[f] || "";
        do {
          g = (/(\d*)(\D*)(.*)/).exec(g) || ["", "", "", ""];
          h = (/(\d*)(\D*)(.*)/).exec(h) || ["", "", "", ""];
          if (0 == g[0].length && 0 == h[0].length) break;
          b = hb(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || hb(0 == g[2].length, 0 == h[2].length) || hb(g[2], h[2]);
          g = g[3];
          h = h[3];
        } while (0 == b);
      }
      return 0 <= b;
    });
  }
  var gc;
  if (l.document && Wb) {
    var hc = ac();
    gc = hc ? hc : parseInt(bc, 10) || void 0;
  } else gc = void 0;
  var ic = gc;
  try {
    new self.OffscreenCanvas(0, 0).getContext("2d");
  } catch (a) {}
  var jc = !Wb || 9 <= Number(ic);
  function kc(a) {
    var b = document;
    return "string" === typeof a ? b.getElementById(a) : a;
  }
  function lc(a, b) {
    lb(b, function (c, d) {
      c && "object" == typeof c && c.sa && (c = c.ra());
      "style" == d ? a.style.cssText = c : "class" == d ? a.className = c : "for" == d ? a.htmlFor = c : mc.hasOwnProperty(d) ? a.setAttribute(mc[d], c) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, c) : a[d] = c;
    });
  }
  var mc = {
    cellpadding: "cellPadding",
    cellspacing: "cellSpacing",
    colspan: "colSpan",
    frameborder: "frameBorder",
    height: "height",
    maxlength: "maxLength",
    nonce: "nonce",
    role: "role",
    rowspan: "rowSpan",
    type: "type",
    usemap: "useMap",
    valign: "vAlign",
    width: "width"
  };
  function nc(a, b, c) {
    var d = arguments, e = document, f = String(d[0]), g = d[1];
    if (!jc && g && (g.name || g.type)) {
      f = ["<", f];
      g.name && f.push(' name="', Rb(g.name), '"');
      if (g.type) {
        f.push(' type="', Rb(g.type), '"');
        var h = {};
        z(h, g);
        delete h.type;
        g = h;
      }
      f.push(">");
      f = f.join("");
    }
    f = oc(e, f);
    g && ("string" === typeof g ? f.className = g : Array.isArray(g) ? f.className = g.join(" ") : lc(f, g));
    2 < d.length && pc(e, f, d);
    return f;
  }
  function pc(a, b, c) {
    function d(h) {
      h && b.appendChild("string" === typeof h ? a.createTextNode(h) : h);
    }
    for (var e = 2; e < c.length; e++) {
      var f = c[e];
      if (!na(f) || n(f) && 0 < f.nodeType) d(f); else {
        a: {
          if (f && "number" == typeof f.length) {
            if (n(f)) {
              var g = "function" == typeof f.item || "string" == typeof f.item;
              break a;
            }
            if (oa(f)) {
              g = "function" == typeof f.item;
              break a;
            }
          }
          g = !1;
        }
        w(g ? Za(f) : f, d);
      }
    }
  }
  function oc(a, b) {
    b = String(b);
    "application/xhtml+xml" === a.contentType && (b = b.toLowerCase());
    return a.createElement(b);
  }
  ;
  function qc(a) {
    l.setTimeout(function () {
      throw a;
    }, 0);
  }
  var rc;
  function sc() {
    var a = l.MessageChannel;
    "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !y("Presto") && (a = function () {
      var e = oc(document, "IFRAME");
      e.style.display = "none";
      document.documentElement.appendChild(e);
      var f = e.contentWindow;
      e = f.document;
      e.open();
      e.close();
      var g = "callImmediate" + Math.random(), h = "file:" == f.location.protocol ? "*" : f.location.protocol + "//" + f.location.host;
      e = q(function (m) {
        if (("*" == h || m.origin == h) && m.data == g) this.port1.onmessage();
      }, this);
      f.addEventListener("message", e, !1);
      this.port1 = {};
      this.port2 = {
        postMessage: function () {
          f.postMessage(g, h);
        }
      };
    });
    if ("undefined" !== typeof a && !y("Trident") && !y("MSIE")) {
      var b = new a(), c = {}, d = c;
      b.port1.onmessage = function () {
        if (void 0 !== c.next) {
          c = c.next;
          var e = c.Gb;
          c.Gb = null;
          e();
        }
      };
      return function (e) {
        d.next = {
          Gb: e
        };
        d = d.next;
        b.port2.postMessage(0);
      };
    }
    return function (e) {
      l.setTimeout(e, 0);
    };
  }
  ;
  function tc(a, b) {
    uc || vc();
    wc || (uc(), wc = !0);
    Na.add(a, b);
  }
  var uc;
  function vc() {
    if (l.Promise && l.Promise.resolve) {
      var a = l.Promise.resolve(void 0);
      uc = function () {
        a.then(xc);
      };
    } else uc = function () {
      var b = xc;
      !oa(l.setImmediate) || l.Window && l.Window.prototype && !y("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (rc || (rc = sc()), rc(b)) : l.setImmediate(b);
    };
  }
  var wc = !1, Na = new Ja();
  function xc() {
    for (var a; a = Ma(); ) {
      try {
        a.a.call(a.b);
      } catch (b) {
        qc(b);
      }
      Ia(La, a);
    }
    wc = !1;
  }
  ;
  function D(a, b) {
    this.a = yc;
    this.i = void 0;
    this.f = this.b = this.c = null;
    this.g = this.h = !1;
    if (a != la) try {
      var c = this;
      a.call(b, function (d) {
        zc(c, Ac, d);
      }, function (d) {
        if (!(d instanceof Bc)) try {
          if (d instanceof Error) throw d;
          throw Error("Promise rejected.");
        } catch (e) {}
        zc(c, Cc, d);
      });
    } catch (d) {
      zc(this, Cc, d);
    }
  }
  var yc = 0, Ac = 2, Cc = 3;
  function Dc() {
    this.next = this.f = this.b = this.g = this.a = null;
    this.c = !1;
  }
  Dc.prototype.reset = function () {
    this.f = this.b = this.g = this.a = null;
    this.c = !1;
  };
  var Ec = new Ha(function () {
    return new Dc();
  }, function (a) {
    a.reset();
  });
  function Fc(a, b, c) {
    var d = Ec.get();
    d.g = a;
    d.b = b;
    d.f = c;
    return d;
  }
  function E(a) {
    if (a instanceof D) return a;
    var b = new D(la);
    zc(b, Ac, a);
    return b;
  }
  function F(a) {
    return new D(function (b, c) {
      c(a);
    });
  }
  function Gc(a, b, c) {
    Hc(a, b, c, null) || tc(ua(b, a));
  }
  function Ic(a) {
    return new D(function (b, c) {
      var d = a.length, e = [];
      if (d) for (var f = function (p, v) {
        d--;
        e[p] = v;
        0 == d && b(e);
      }, g = function (p) {
        c(p);
      }, h = 0, m; h < a.length; h++) (m = a[h], Gc(m, ua(f, h), g)); else b(e);
    });
  }
  function Jc(a) {
    return new D(function (b) {
      var c = a.length, d = [];
      if (c) for (var e = function (h, m, p) {
        c--;
        d[h] = m ? {
          Pb: !0,
          value: p
        } : {
          Pb: !1,
          reason: p
        };
        0 == c && b(d);
      }, f = 0, g; f < a.length; f++) (g = a[f], Gc(g, ua(e, f, !0), ua(e, f, !1))); else b(d);
    });
  }
  D.prototype.then = function (a, b, c) {
    return Kc(this, oa(a) ? a : null, oa(b) ? b : null, c);
  };
  D.prototype.$goog_Thenable = !0;
  k = D.prototype;
  k.oa = function (a, b) {
    a = Fc(a, a, b);
    a.c = !0;
    Lc(this, a);
    return this;
  };
  k.o = function (a, b) {
    return Kc(this, null, a, b);
  };
  k.cancel = function (a) {
    if (this.a == yc) {
      var b = new Bc(a);
      tc(function () {
        Mc(this, b);
      }, this);
    }
  };
  function Mc(a, b) {
    if (a.a == yc) if (a.c) {
      var c = a.c;
      if (c.b) {
        for (var d = 0, e = null, f = null, g = c.b; g && (g.c || (d++, g.a == a && (e = g), !(e && 1 < d))); g = g.next) e || (f = g);
        e && (c.a == yc && 1 == d ? Mc(c, b) : (f ? (d = f, d.next == c.f && (c.f = d), d.next = d.next.next) : Nc(c), Oc(c, e, Cc, b)));
      }
      a.c = null;
    } else zc(a, Cc, b);
  }
  function Lc(a, b) {
    a.b || a.a != Ac && a.a != Cc || Pc(a);
    a.f ? a.f.next = b : a.b = b;
    a.f = b;
  }
  function Kc(a, b, c, d) {
    var e = Fc(null, null, null);
    e.a = new D(function (f, g) {
      e.g = b ? function (h) {
        try {
          var m = b.call(d, h);
          f(m);
        } catch (p) {
          g(p);
        }
      } : f;
      e.b = c ? function (h) {
        try {
          var m = c.call(d, h);
          void 0 === m && h instanceof Bc ? g(h) : f(m);
        } catch (p) {
          g(p);
        }
      } : g;
    });
    e.a.c = a;
    Lc(a, e);
    return e.a;
  }
  k.$c = function (a) {
    this.a = yc;
    zc(this, Ac, a);
  };
  k.ad = function (a) {
    this.a = yc;
    zc(this, Cc, a);
  };
  function zc(a, b, c) {
    a.a == yc && (a === c && (b = Cc, c = new TypeError("Promise cannot resolve to itself")), a.a = 1, Hc(c, a.$c, a.ad, a) || (a.i = c, a.a = b, a.c = null, Pc(a), b != Cc || c instanceof Bc || Qc(a, c)));
  }
  function Hc(a, b, c, d) {
    if (a instanceof D) return (Lc(a, Fc(b || la, c || null, d)), !0);
    if (Ea(a)) return (a.then(b, c, d), !0);
    if (n(a)) try {
      var e = a.then;
      if (oa(e)) return (Rc(a, e, b, c, d), !0);
    } catch (f) {
      return (c.call(d, f), !0);
    }
    return !1;
  }
  function Rc(a, b, c, d, e) {
    function f(m) {
      h || (h = !0, d.call(e, m));
    }
    function g(m) {
      h || (h = !0, c.call(e, m));
    }
    var h = !1;
    try {
      b.call(a, g, f);
    } catch (m) {
      f(m);
    }
  }
  function Pc(a) {
    a.h || (a.h = !0, tc(a.gc, a));
  }
  function Nc(a) {
    var b = null;
    a.b && (b = a.b, a.b = b.next, b.next = null);
    a.b || (a.f = null);
    return b;
  }
  k.gc = function () {
    for (var a; a = Nc(this); ) Oc(this, a, this.a, this.i);
    this.h = !1;
  };
  function Oc(a, b, c, d) {
    if (c == Cc && b.b && !b.c) for (; a && a.g; a = a.c) a.g = !1;
    if (b.a) (b.a.c = null, Sc(b, c, d)); else try {
      b.c ? b.g.call(b.f) : Sc(b, c, d);
    } catch (e) {
      Tc.call(null, e);
    }
    Ia(Ec, b);
  }
  function Sc(a, b, c) {
    b == Ac ? a.g.call(a.f, c) : a.b && a.b.call(a.f, c);
  }
  function Qc(a, b) {
    a.g = !0;
    tc(function () {
      a.g && Tc.call(null, b);
    });
  }
  var Tc = qc;
  function Bc(a) {
    u.call(this, a);
  }
  r(Bc, u);
  Bc.prototype.name = "cancel";
  function Uc() {
    0 != Vc && (Wc[pa(this)] = this);
    this.xa = this.xa;
    this.pa = this.pa;
  }
  var Vc = 0, Wc = {};
  Uc.prototype.xa = !1;
  function Xc(a) {
    if (!a.xa && (a.xa = !0, a.Da(), 0 != Vc)) {
      var b = pa(a);
      if (0 != Vc && a.pa && 0 < a.pa.length) throw Error(a + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
      delete Wc[b];
    }
  }
  Uc.prototype.Da = function () {
    if (this.pa) for (; this.pa.length; ) this.pa.shift()();
  };
  var Yc = Object.freeze || (function (a) {
    return a;
  });
  var Zc = !Wb || 9 <= Number(ic), $c = Wb && !fc("9"), ad = (function () {
    if (!l.addEventListener || !Object.defineProperty) return !1;
    var a = !1, b = Object.defineProperty({}, "passive", {
      get: function () {
        a = !0;
      }
    });
    try {
      (l.addEventListener("test", la, b), l.removeEventListener("test", la, b));
    } catch (c) {}
    return a;
  })();
  function G(a, b) {
    this.type = a;
    this.b = this.target = b;
    this.defaultPrevented = !1;
  }
  G.prototype.preventDefault = function () {
    this.defaultPrevented = !0;
  };
  function bd(a, b) {
    G.call(this, a ? a.type : "");
    this.relatedTarget = this.b = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.pointerId = 0;
    this.pointerType = "";
    this.a = null;
    if (a) {
      var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
      this.target = a.target || a.srcElement;
      this.b = b;
      if (b = a.relatedTarget) {
        if (Zb) {
          a: {
            try {
              Sb(b.nodeName);
              var e = !0;
              break a;
            } catch (f) {}
            e = !1;
          }
          e || (b = null);
        }
      } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
      this.relatedTarget = b;
      d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
      this.button = a.button;
      this.key = a.key || "";
      this.ctrlKey = a.ctrlKey;
      this.altKey = a.altKey;
      this.shiftKey = a.shiftKey;
      this.metaKey = a.metaKey;
      this.pointerId = a.pointerId || 0;
      this.pointerType = "string" === typeof a.pointerType ? a.pointerType : cd[a.pointerType] || "";
      this.a = a;
      a.defaultPrevented && this.preventDefault();
    }
  }
  r(bd, G);
  var cd = Yc({
    2: "touch",
    3: "pen",
    4: "mouse"
  });
  bd.prototype.preventDefault = function () {
    bd.ab.preventDefault.call(this);
    var a = this.a;
    if (a.preventDefault) a.preventDefault(); else if ((a.returnValue = !1, $c)) try {
      if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
    } catch (b) {}
  };
  bd.prototype.g = function () {
    return this.a;
  };
  var dd = "closure_listenable_" + (1E6 * Math.random() | 0), ed = 0;
  function fd(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.Va = e;
    this.key = ++ed;
    this.va = this.Pa = !1;
  }
  function gd(a) {
    a.va = !0;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.Va = null;
  }
  ;
  function hd(a) {
    this.src = a;
    this.a = {};
    this.b = 0;
  }
  hd.prototype.add = function (a, b, c, d, e) {
    var f = a.toString();
    a = this.a[f];
    a || (a = this.a[f] = [], this.b++);
    var g = id(a, b, d, e);
    -1 < g ? (b = a[g], c || (b.Pa = !1)) : (b = new fd(b, this.src, f, !!d, e), b.Pa = c, a.push(b));
    return b;
  };
  function jd(a, b) {
    var c = b.type;
    (c in a.a) && Wa(a.a[c], b) && (gd(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
  }
  function id(a, b, c, d) {
    for (var e = 0; e < a.length; ++e) {
      var f = a[e];
      if (!f.va && f.listener == b && f.capture == !!c && f.Va == d) return e;
    }
    return -1;
  }
  ;
  var kd = "closure_lm_" + (1E6 * Math.random() | 0), ld = {}, md = 0;
  function nd(a, b, c, d, e) {
    if (d && d.once) od(a, b, c, d, e); else if (Array.isArray(b)) for (var f = 0; f < b.length; f++) nd(a, b[f], c, d, e); else (c = pd(c), a && a[dd] ? qd(a, b, c, n(d) ? !!d.capture : !!d, e) : rd(a, b, c, !1, d, e));
  }
  function rd(a, b, c, d, e, f) {
    if (!b) throw Error("Invalid event type");
    var g = n(e) ? !!e.capture : !!e, h = sd(a);
    h || (a[kd] = h = new hd(a));
    c = h.add(b, c, d, g, f);
    if (!c.proxy) {
      d = td();
      c.proxy = d;
      d.src = a;
      d.listener = c;
      if (a.addEventListener) (ad || (e = g), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e)); else if (a.attachEvent) a.attachEvent(ud(b.toString()), d); else if (a.addListener && a.removeListener) a.addListener(d); else throw Error("addEventListener and attachEvent are unavailable.");
      md++;
    }
  }
  function td() {
    var a = vd, b = Zc ? function (c) {
      return a.call(b.src, b.listener, c);
    } : function (c) {
      c = a.call(b.src, b.listener, c);
      if (!c) return c;
    };
    return b;
  }
  function od(a, b, c, d, e) {
    if (Array.isArray(b)) for (var f = 0; f < b.length; f++) od(a, b[f], c, d, e); else (c = pd(c), a && a[dd] ? wd(a, b, c, n(d) ? !!d.capture : !!d, e) : rd(a, b, c, !0, d, e));
  }
  function xd(a, b, c, d, e) {
    if (Array.isArray(b)) for (var f = 0; f < b.length; f++) xd(a, b[f], c, d, e); else (d = n(d) ? !!d.capture : !!d, c = pd(c), a && a[dd]) ? (a = a.v, b = String(b).toString(), (b in a.a) && (f = a.a[b], c = id(f, c, d, e), -1 < c && (gd(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = sd(a)) && (b = a.a[b.toString()], a = -1, b && (a = id(b, c, d, e)), (c = -1 < a ? b[a] : null) && yd(c));
  }
  function yd(a) {
    if ("number" !== typeof a && a && !a.va) {
      var b = a.src;
      if (b && b[dd]) jd(b.v, a); else {
        var c = a.type, d = a.proxy;
        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(ud(c), d) : b.addListener && b.removeListener && b.removeListener(d);
        md--;
        (c = sd(b)) ? (jd(c, a), 0 == c.b && (c.src = null, b[kd] = null)) : gd(a);
      }
    }
  }
  function ud(a) {
    return (a in ld) ? ld[a] : ld[a] = "on" + a;
  }
  function zd(a, b, c, d) {
    var e = !0;
    if (a = sd(a)) if (b = a.a[b.toString()]) for ((b = b.concat(), a = 0); a < b.length; a++) {
      var f = b[a];
      f && f.capture == c && !f.va && (f = Bd(f, d), e = e && !1 !== f);
    }
    return e;
  }
  function Bd(a, b) {
    var c = a.listener, d = a.Va || a.src;
    a.Pa && yd(a);
    return c.call(d, b);
  }
  function vd(a, b) {
    if (a.va) return !0;
    if (!Zc) {
      if (!b) a: {
        b = ["window", "event"];
        for (var c = l, d = 0; d < b.length; d++) if ((c = c[b[d]], null == c)) {
          b = null;
          break a;
        }
        b = c;
      }
      d = b;
      b = new bd(d, this);
      c = !0;
      if (!(0 > d.keyCode || void 0 != d.returnValue)) {
        a: {
          var e = !1;
          if (0 == d.keyCode) try {
            d.keyCode = -1;
            break a;
          } catch (g) {
            e = !0;
          }
          if (e || void 0 == d.returnValue) d.returnValue = !0;
        }
        d = [];
        for (e = b.b; e; e = e.parentNode) d.push(e);
        a = a.type;
        for (e = d.length - 1; 0 <= e; e--) {
          b.b = d[e];
          var f = zd(d[e], a, !0, b);
          c = c && f;
        }
        for (e = 0; e < d.length; e++) (b.b = d[e], f = zd(d[e], a, !1, b), c = c && f);
      }
      return c;
    }
    return Bd(a, new bd(b, this));
  }
  function sd(a) {
    a = a[kd];
    return a instanceof hd ? a : null;
  }
  var Cd = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
  function pd(a) {
    if (oa(a)) return a;
    a[Cd] || (a[Cd] = function (b) {
      return a.handleEvent(b);
    });
    return a[Cd];
  }
  ;
  function H() {
    Uc.call(this);
    this.v = new hd(this);
    this.ac = this;
    this.gb = null;
  }
  r(H, Uc);
  H.prototype[dd] = !0;
  H.prototype.addEventListener = function (a, b, c, d) {
    nd(this, a, b, c, d);
  };
  H.prototype.removeEventListener = function (a, b, c, d) {
    xd(this, a, b, c, d);
  };
  H.prototype.dispatchEvent = function (a) {
    var b, c = this.gb;
    if (c) for (b = []; c; c = c.gb) b.push(c);
    c = this.ac;
    var d = a.type || a;
    if ("string" === typeof a) a = new G(a, c); else if (a instanceof G) a.target = a.target || c; else {
      var e = a;
      a = new G(d, c);
      z(a, e);
    }
    e = !0;
    if (b) for (var f = b.length - 1; 0 <= f; f--) {
      var g = a.b = b[f];
      e = Dd(g, d, !0, a) && e;
    }
    g = a.b = c;
    e = Dd(g, d, !0, a) && e;
    e = Dd(g, d, !1, a) && e;
    if (b) for (f = 0; f < b.length; f++) (g = a.b = b[f], e = Dd(g, d, !1, a) && e);
    return e;
  };
  H.prototype.Da = function () {
    H.ab.Da.call(this);
    if (this.v) {
      var a = this.v, b = 0, c;
      for (c in a.a) {
        for (var d = a.a[c], e = 0; e < d.length; e++) (++b, gd(d[e]));
        delete a.a[c];
        a.b--;
      }
    }
    this.gb = null;
  };
  function qd(a, b, c, d, e) {
    a.v.add(String(b), c, !1, d, e);
  }
  function wd(a, b, c, d, e) {
    a.v.add(String(b), c, !0, d, e);
  }
  function Dd(a, b, c, d) {
    b = a.v.a[String(b)];
    if (!b) return !0;
    b = b.concat();
    for (var e = !0, f = 0; f < b.length; ++f) {
      var g = b[f];
      if (g && !g.va && g.capture == c) {
        var h = g.listener, m = g.Va || g.src;
        g.Pa && jd(a.v, g);
        e = !1 !== h.call(m, d) && e;
      }
    }
    return e && !d.defaultPrevented;
  }
  ;
  function Ed(a, b, c) {
    if (oa(a)) c && (a = q(a, c)); else if (a && "function" == typeof a.handleEvent) a = q(a.handleEvent, a); else throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
  }
  function Fd(a) {
    var b = null;
    return new D(function (c, d) {
      b = Ed(function () {
        c(void 0);
      }, a);
      -1 == b && d(Error("Failed to schedule timer."));
    }).o(function (c) {
      l.clearTimeout(b);
      throw c;
    });
  }
  ;
  function Gd(a) {
    if (a.W && "function" == typeof a.W) return a.W();
    if ("string" === typeof a) return a.split("");
    if (na(a)) {
      for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);
      return b;
    }
    b = [];
    c = 0;
    for (d in a) b[c++] = a[d];
    return b;
  }
  function Hd(a) {
    if (a.Y && "function" == typeof a.Y) return a.Y();
    if (!a.W || "function" != typeof a.W) {
      if (na(a) || "string" === typeof a) {
        var b = [];
        a = a.length;
        for (var c = 0; c < a; c++) b.push(c);
        return b;
      }
      b = [];
      c = 0;
      for (var d in a) b[c++] = d;
      return b;
    }
  }
  function Id(a, b) {
    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0); else if (na(a) || "string" === typeof a) w(a, b, void 0); else for (var c = Hd(a), d = Gd(a), e = d.length, f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);
  }
  ;
  function Jd(a, b) {
    this.b = {};
    this.a = [];
    this.c = 0;
    var c = arguments.length;
    if (1 < c) {
      if (c % 2) throw Error("Uneven number of arguments");
      for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
    } else if (a) if (a instanceof Jd) for ((c = a.Y(), d = 0); d < c.length; d++) this.set(c[d], a.get(c[d])); else for (d in a) this.set(d, a[d]);
  }
  k = Jd.prototype;
  k.W = function () {
    Kd(this);
    for (var a = [], b = 0; b < this.a.length; b++) a.push(this.b[this.a[b]]);
    return a;
  };
  k.Y = function () {
    Kd(this);
    return this.a.concat();
  };
  k.clear = function () {
    this.b = {};
    this.c = this.a.length = 0;
  };
  function Kd(a) {
    if (a.c != a.a.length) {
      for (var b = 0, c = 0; b < a.a.length; ) {
        var d = a.a[b];
        Ld(a.b, d) && (a.a[c++] = d);
        b++;
      }
      a.a.length = c;
    }
    if (a.c != a.a.length) {
      var e = {};
      for (c = b = 0; b < a.a.length; ) (d = a.a[b], Ld(e, d) || (a.a[c++] = d, e[d] = 1), b++);
      a.a.length = c;
    }
  }
  k.get = function (a, b) {
    return Ld(this.b, a) ? this.b[a] : b;
  };
  k.set = function (a, b) {
    Ld(this.b, a) || (this.c++, this.a.push(a));
    this.b[a] = b;
  };
  k.forEach = function (a, b) {
    for (var c = this.Y(), d = 0; d < c.length; d++) {
      var e = c[d], f = this.get(e);
      a.call(b, f, e, this);
    }
  };
  function Ld(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  ;
  var Md = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
  function Nd(a, b) {
    if (a) {
      a = a.split("&");
      for (var c = 0; c < a.length; c++) {
        var d = a[c].indexOf("="), e = null;
        if (0 <= d) {
          var f = a[c].substring(0, d);
          e = a[c].substring(d + 1);
        } else f = a[c];
        b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
      }
    }
  }
  ;
  function Od(a, b) {
    this.a = this.l = this.c = "";
    this.g = null;
    this.h = this.f = "";
    this.i = !1;
    var c;
    a instanceof Od ? (this.i = void 0 !== b ? b : a.i, Pd(this, a.c), this.l = a.l, this.a = a.a, Qd(this, a.g), this.f = a.f, Rd(this, Sd(a.b)), this.h = a.h) : a && (c = String(a).match(Md)) ? (this.i = !!b, Pd(this, c[1] || "", !0), this.l = Td(c[2] || ""), this.a = Td(c[3] || "", !0), Qd(this, c[4]), this.f = Td(c[5] || "", !0), Rd(this, c[6] || "", !0), this.h = Td(c[7] || "")) : (this.i = !!b, this.b = new Ud(null, this.i));
  }
  Od.prototype.toString = function () {
    var a = [], b = this.c;
    b && a.push(Vd(b, Wd, !0), ":");
    var c = this.a;
    if (c || "file" == b) (a.push("//"), (b = this.l) && a.push(Vd(b, Wd, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.g, null != c && a.push(":", String(c)));
    if (c = this.f) (this.a && "/" != c.charAt(0) && a.push("/"), a.push(Vd(c, "/" == c.charAt(0) ? Xd : Yd, !0)));
    (c = this.b.toString()) && a.push("?", c);
    (c = this.h) && a.push("#", Vd(c, Zd));
    return a.join("");
  };
  Od.prototype.resolve = function (a) {
    var b = new Od(this), c = !!a.c;
    c ? Pd(b, a.c) : c = !!a.l;
    c ? b.l = a.l : c = !!a.a;
    c ? b.a = a.a : c = null != a.g;
    var d = a.f;
    if (c) Qd(b, a.g); else if (c = !!a.f) {
      if ("/" != d.charAt(0)) if (this.a && !this.f) d = "/" + d; else {
        var e = b.f.lastIndexOf("/");
        -1 != e && (d = b.f.substr(0, e + 1) + d);
      }
      e = d;
      if (".." == e || "." == e) d = ""; else if (x(e, "./") || x(e, "/.")) {
        d = 0 == e.lastIndexOf("/", 0);
        e = e.split("/");
        for (var f = [], g = 0; g < e.length; ) {
          var h = e[g++];
          "." == h ? d && g == e.length && f.push("") : ".." == h ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(h), d = !0);
        }
        d = f.join("/");
      } else d = e;
    }
    c ? b.f = d : c = "" !== a.b.toString();
    c ? Rd(b, Sd(a.b)) : c = !!a.h;
    c && (b.h = a.h);
    return b;
  };
  function Pd(a, b, c) {
    a.c = c ? Td(b, !0) : b;
    a.c && (a.c = a.c.replace(/:$/, ""));
  }
  function Qd(a, b) {
    if (b) {
      b = Number(b);
      if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
      a.g = b;
    } else a.g = null;
  }
  function Rd(a, b, c) {
    b instanceof Ud ? (a.b = b, $d(a.b, a.i)) : (c || (b = Vd(b, ae)), a.b = new Ud(b, a.i));
  }
  function I(a, b, c) {
    a.b.set(b, c);
  }
  function be(a, b) {
    return a.b.get(b);
  }
  function J(a) {
    return a instanceof Od ? new Od(a) : new Od(a, void 0);
  }
  function ce(a, b, c, d) {
    var e = new Od(null, void 0);
    a && Pd(e, a);
    b && (e.a = b);
    c && Qd(e, c);
    d && (e.f = d);
    return e;
  }
  function Td(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
  }
  function Vd(a, b, c) {
    return "string" === typeof a ? (a = encodeURI(a).replace(b, de), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
  }
  function de(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
  }
  var Wd = /[#\/\?@]/g, Yd = /[#\?:]/g, Xd = /[#\?]/g, ae = /[#\?@]/g, Zd = /#/g;
  function Ud(a, b) {
    this.b = this.a = null;
    this.c = a || null;
    this.f = !!b;
  }
  function ee(a) {
    a.a || (a.a = new Jd(), a.b = 0, a.c && Nd(a.c, function (b, c) {
      a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
  }
  function fe(a) {
    var b = Hd(a);
    if ("undefined" == typeof b) throw Error("Keys are undefined");
    var c = new Ud(null, void 0);
    a = Gd(a);
    for (var d = 0; d < b.length; d++) {
      var e = b[d], f = a[d];
      Array.isArray(f) ? ge(c, e, f) : c.add(e, f);
    }
    return c;
  }
  k = Ud.prototype;
  k.add = function (a, b) {
    ee(this);
    this.c = null;
    a = he(this, a);
    var c = this.a.get(a);
    c || this.a.set(a, c = []);
    c.push(b);
    this.b += 1;
    return this;
  };
  function ie(a, b) {
    ee(a);
    b = he(a, b);
    Ld(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, Ld(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Kd(a)));
  }
  k.clear = function () {
    this.a = this.c = null;
    this.b = 0;
  };
  function je(a, b) {
    ee(a);
    b = he(a, b);
    return Ld(a.a.b, b);
  }
  k.forEach = function (a, b) {
    ee(this);
    this.a.forEach(function (c, d) {
      w(c, function (e) {
        a.call(b, e, d, this);
      }, this);
    }, this);
  };
  k.Y = function () {
    ee(this);
    for (var a = this.a.W(), b = this.a.Y(), c = [], d = 0; d < b.length; d++) for (var e = a[d], f = 0; f < e.length; f++) c.push(b[d]);
    return c;
  };
  k.W = function (a) {
    ee(this);
    var b = [];
    if ("string" === typeof a) je(this, a) && (b = Ya(b, this.a.get(he(this, a)))); else {
      a = this.a.W();
      for (var c = 0; c < a.length; c++) b = Ya(b, a[c]);
    }
    return b;
  };
  k.set = function (a, b) {
    ee(this);
    this.c = null;
    a = he(this, a);
    je(this, a) && (this.b -= this.a.get(a).length);
    this.a.set(a, [b]);
    this.b += 1;
    return this;
  };
  k.get = function (a, b) {
    if (!a) return b;
    a = this.W(a);
    return 0 < a.length ? String(a[0]) : b;
  };
  function ge(a, b, c) {
    ie(a, b);
    0 < c.length && (a.c = null, a.a.set(he(a, b), Za(c)), a.b += c.length);
  }
  k.toString = function () {
    if (this.c) return this.c;
    if (!this.a) return "";
    for (var a = [], b = this.a.Y(), c = 0; c < b.length; c++) {
      var d = b[c], e = encodeURIComponent(String(d));
      d = this.W(d);
      for (var f = 0; f < d.length; f++) {
        var g = e;
        "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
        a.push(g);
      }
    }
    return this.c = a.join("&");
  };
  function Sd(a) {
    var b = new Ud();
    b.c = a.c;
    a.a && (b.a = new Jd(a.a), b.b = a.b);
    return b;
  }
  function he(a, b) {
    b = String(b);
    a.f && (b = b.toLowerCase());
    return b;
  }
  function $d(a, b) {
    b && !a.f && (ee(a), a.c = null, a.a.forEach(function (c, d) {
      var e = d.toLowerCase();
      d != e && (ie(this, d), ge(this, e, c));
    }, a));
    a.f = b;
  }
  ;
  function ke(a) {
    var b = [];
    le(new me(), a, b);
    return b.join("");
  }
  function me() {}
  function le(a, b, c) {
    if (null == b) c.push("null"); else {
      if ("object" == typeof b) {
        if (Array.isArray(b)) {
          var d = b;
          b = d.length;
          c.push("[");
          for (var e = "", f = 0; f < b; f++) (c.push(e), le(a, d[f], c), e = ",");
          c.push("]");
          return;
        }
        if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf(); else {
          c.push("{");
          e = "";
          for (d in b) Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), ne(d, c), c.push(":"), le(a, f, c), e = ","));
          c.push("}");
          return;
        }
      }
      switch (typeof b) {
        case "string":
          ne(b, c);
          break;
        case "number":
          c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
          break;
        case "boolean":
          c.push(String(b));
          break;
        case "function":
          c.push("null");
          break;
        default:
          throw Error("Unknown type: " + typeof b);
      }
    }
  }
  var oe = {
    '"': '\\"',
    "\\": "\\\\",
    "/": "\\/",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t",
    "\x0B": "\\u000b"
  }, pe = (/\uffff/).test("\uffff") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;
  function ne(a, b) {
    b.push('"', a.replace(pe, function (c) {
      var d = oe[c];
      d || (d = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1), oe[c] = d);
      return d;
    }), '"');
  }
  ;
  function qe() {
    var a = K();
    return Wb && !!ic && 11 == ic || (/Edge\/\d+/).test(a);
  }
  function re() {
    return l.window && l.window.location.href || self && self.location && self.location.href || "";
  }
  function se(a, b) {
    b = b || l.window;
    var c = "about:blank";
    a && (c = Eb(Ib(a) || Kb));
    b.location.href = c;
  }
  function te(a, b) {
    var c = [], d;
    for (d in a) (d in b) ? typeof a[d] != typeof b[d] ? c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < te(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);
    for (d in b) (d in a) || c.push(d);
    return c;
  }
  function ue() {
    var a = K();
    a = ve(a) != we ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;
    return a && 30 > a ? !1 : !Wb || !ic || 9 < ic;
  }
  function xe(a) {
    a = (a || K()).toLowerCase();
    return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? !0 : !1;
  }
  function ye(a) {
    a = a || l.window;
    try {
      a.close();
    } catch (b) {}
  }
  function ze(a, b, c) {
    var d = Math.floor(1E9 * Math.random()).toString();
    b = b || 500;
    c = c || 600;
    var e = (window.screen.availHeight - c) / 2, f = (window.screen.availWidth - b) / 2;
    b = {
      width: b,
      height: c,
      top: 0 < e ? e : 0,
      left: 0 < f ? f : 0,
      location: !0,
      resizable: !0,
      statusbar: !0,
      toolbar: !1
    };
    c = K().toLowerCase();
    d && (b.target = d, x(c, "crios/") && (b.target = "_blank"));
    ve(K()) == Ae && (a = a || "http://localhost", b.scrollbars = !0);
    c = a || "";
    (a = b) || (a = {});
    d = window;
    b = c instanceof C ? c : Ib("undefined" != typeof c.href ? c.href : String(c)) || Kb;
    c = a.target || c.target;
    e = [];
    for (g in a) switch (g) {
      case "width":
      case "height":
      case "top":
      case "left":
        e.push(g + "=" + a[g]);
        break;
      case "target":
      case "noopener":
      case "noreferrer":
        break;
      default:
        e.push(g + "=" + (a[g] ? 1 : 0));
    }
    var g = e.join(",");
    if ((y("iPhone") && !y("iPod") && !y("iPad") || y("iPad") || y("iPod")) && d.navigator && d.navigator.standalone && c && "_self" != c) (g = oc(document, "A"), pb(g, "HTMLAnchorElement"), b = b instanceof C ? b : Jb(b), g.href = Eb(b), g.setAttribute("target", c), a.noreferrer && g.setAttribute("rel", "noreferrer"), a = document.createEvent("MouseEvent"), a.initMouseEvent("click", !0, !0, d, 1), g.dispatchEvent(a), g = {}); else if (a.noreferrer) {
      if ((g = Pb("", d, c, g), a = Eb(b), g && (Yb && x(a, ";") && (a = "'" + a.replace(/'/g, "%27") + "'"), g.opener = null, a = '<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + Rb(a) + '">', a = (d = vb()) ? d.createHTML(a) : a, a = new Lb(a, null, Mb), d = g.document))) (d.write(Nb(a)), d.close());
    } else (g = Pb(b, d, c, g)) && a.noopener && (g.opener = null);
    if (g) try {
      g.focus();
    } catch (h) {}
    return g;
  }
  function Be(a) {
    return new D(function (b) {
      function c() {
        Fd(2E3).then(function () {
          if (!a || a.closed) b(); else return c();
        });
      }
      return c();
    });
  }
  var Ce = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/, De = /^[^@]+@[^@]+$/;
  function Ee() {
    var a = null;
    return new D(function (b) {
      "complete" == l.document.readyState ? b() : (a = function () {
        b();
      }, od(window, "load", a));
    }).o(function (b) {
      xd(window, "load", a);
      throw b;
    });
  }
  function Fe() {
    return Ge(void 0) ? Ee().then(function () {
      return new D(function (a, b) {
        var c = l.document, d = setTimeout(function () {
          b(Error("Cordova framework is not ready."));
        }, 1E3);
        c.addEventListener("deviceready", function () {
          clearTimeout(d);
          a();
        }, !1);
      });
    }) : F(Error("Cordova must run in an Android or iOS file scheme."));
  }
  function Ge(a) {
    a = a || K();
    return !("file:" !== He() && "ionic:" !== He() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
  }
  function Ie() {
    var a = l.window;
    try {
      return !(!a || a == a.top);
    } catch (b) {
      return !1;
    }
  }
  function Je() {
    return "undefined" !== typeof l.WorkerGlobalScope && "function" === typeof l.importScripts;
  }
  function Ke() {
    return _firebaseAppDefault.default.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : _firebaseAppDefault.default.INTERNAL.hasOwnProperty("node") ? "Node" : Je() ? "Worker" : "Browser";
  }
  function Le() {
    var a = Ke();
    return "ReactNative" === a || "Node" === a;
  }
  function Me() {
    for (var a = 50, b = []; 0 < a; ) (b.push(("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ").charAt(Math.floor(62 * Math.random()))), a--);
    return b.join("");
  }
  var Ae = "Firefox", we = "Chrome";
  function ve(a) {
    var b = a.toLowerCase();
    if (x(b, "opera/") || x(b, "opr/") || x(b, "opios/")) return "Opera";
    if (x(b, "iemobile")) return "IEMobile";
    if (x(b, "msie") || x(b, "trident/")) return "IE";
    if (x(b, "edge/")) return "Edge";
    if (x(b, "firefox/")) return Ae;
    if (x(b, "silk/")) return "Silk";
    if (x(b, "blackberry")) return "Blackberry";
    if (x(b, "webos")) return "Webos";
    if (!x(b, "safari/") || x(b, "chrome/") || x(b, "crios/") || x(b, "android")) if (!x(b, "chrome/") && !x(b, "crios/") || x(b, "edge/")) {
      if (x(b, "android")) return "Android";
      if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
    } else return we; else return "Safari";
    return "Other";
  }
  var Ne = {
    md: "FirebaseCore-web",
    od: "FirebaseUI-web"
  };
  function Oe(a, b) {
    b = b || [];
    var c = [], d = {}, e;
    for (e in Ne) d[Ne[e]] = !0;
    for (e = 0; e < b.length; e++) "undefined" !== typeof d[b[e]] && (delete d[b[e]], c.push(b[e]));
    c.sort();
    b = c;
    b.length || (b = ["FirebaseCore-web"]);
    c = Ke();
    "Browser" === c ? (d = K(), c = ve(d)) : "Worker" === c && (d = K(), c = ve(d) + "-" + c);
    return c + "/JsCore/" + a + "/" + b.join(",");
  }
  function K() {
    return l.navigator && l.navigator.userAgent || "";
  }
  function L(a, b) {
    a = a.split(".");
    b = b || l;
    for (var c = 0; c < a.length && "object" == typeof b && null != b; c++) b = b[a[c]];
    c != a.length && (b = void 0);
    return b;
  }
  function Pe() {
    try {
      var a = l.localStorage, b = Qe();
      if (a) return (a.setItem(b, "1"), a.removeItem(b), qe() ? !!l.indexedDB : !0);
    } catch (c) {
      return Je() && !!l.indexedDB;
    }
    return !1;
  }
  function Re() {
    return (Se() || "chrome-extension:" === He() || Ge()) && !Le() && Pe() && !Je();
  }
  function Se() {
    return "http:" === He() || "https:" === He();
  }
  function He() {
    return l.location && l.location.protocol || null;
  }
  function Te(a) {
    a = a || K();
    return xe(a) || ve(a) == Ae ? !1 : !0;
  }
  function Ue(a) {
    return "undefined" === typeof a ? null : ke(a);
  }
  function Ve(a) {
    var b = {}, c;
    for (c in a) a.hasOwnProperty(c) && null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);
    return b;
  }
  function We(a) {
    if (null !== a) return JSON.parse(a);
  }
  function Qe(a) {
    return a ? a : Math.floor(1E9 * Math.random()).toString();
  }
  function Xe(a) {
    a = a || K();
    return "Safari" == ve(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0;
  }
  function Ye() {
    var a = l.___jsl;
    if (a && a.H) for (var b in a.H) if ((a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP)) for (var c = 0; c < a.CP.length; c++) a.CP[c] = null;
  }
  function Ze(a, b) {
    if (a > b) throw Error("Short delay should be less than long delay!");
    this.a = a;
    this.c = b;
    a = K();
    b = Ke();
    this.b = xe(a) || "ReactNative" === b;
  }
  Ze.prototype.get = function () {
    var a = l.navigator;
    return (a && "boolean" === typeof a.onLine && (Se() || "chrome-extension:" === He() || "undefined" !== typeof a.connection) ? a.onLine : 1) ? this.b ? this.c : this.a : Math.min(5E3, this.a);
  };
  function $e() {
    var a = l.document;
    return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : !0;
  }
  function af() {
    var a = l.document, b = null;
    return $e() || !a ? E() : new D(function (c) {
      b = function () {
        $e() && (a.removeEventListener("visibilitychange", b, !1), c());
      };
      a.addEventListener("visibilitychange", b, !1);
    }).o(function (c) {
      a.removeEventListener("visibilitychange", b, !1);
      throw c;
    });
  }
  function bf(a) {
    try {
      var b = new Date(parseInt(a, 10));
      if (!isNaN(b.getTime()) && !(/[^0-9]/).test(a)) return b.toUTCString();
    } catch (c) {}
    return null;
  }
  function cf() {
    return !(!L("fireauth.oauthhelper", l) && !L("fireauth.iframe", l));
  }
  function df() {
    var a = l.navigator;
    return a && a.serviceWorker && a.serviceWorker.controller || null;
  }
  function ef() {
    var a = l.navigator;
    return a && a.serviceWorker ? E().then(function () {
      return a.serviceWorker.ready;
    }).then(function (b) {
      return b.active || null;
    }).o(function () {
      return null;
    }) : E(null);
  }
  ;
  var ff = {};
  function gf(a) {
    ff[a] || (ff[a] = !0, "undefined" !== typeof console && "function" === typeof console.warn && console.warn(a));
  }
  ;
  var hf;
  try {
    var jf = {};
    Object.defineProperty(jf, "abcd", {
      configurable: !0,
      enumerable: !0,
      value: 1
    });
    Object.defineProperty(jf, "abcd", {
      configurable: !0,
      enumerable: !0,
      value: 2
    });
    hf = 2 == jf.abcd;
  } catch (a) {
    hf = !1;
  }
  function M(a, b, c) {
    hf ? Object.defineProperty(a, b, {
      configurable: !0,
      enumerable: !0,
      value: c
    }) : a[b] = c;
  }
  function N(a, b) {
    if (b) for (var c in b) b.hasOwnProperty(c) && M(a, c, b[c]);
  }
  function kf(a) {
    var b = {};
    N(b, a);
    return b;
  }
  function lf(a) {
    var b = {}, c;
    for (c in a) a.hasOwnProperty(c) && (b[c] = a[c]);
    return b;
  }
  function mf(a, b) {
    if (!b || !b.length) return !0;
    if (!a) return !1;
    for (var c = 0; c < b.length; c++) {
      var d = a[b[c]];
      if (void 0 === d || null === d || "" === d) return !1;
    }
    return !0;
  }
  function nf(a) {
    var b = a;
    if ("object" == typeof a && null != a) {
      b = ("length" in a) ? [] : {};
      for (var c in a) M(b, c, nf(a[c]));
    }
    return b;
  }
  ;
  /*
  
  Copyright 2019 Google Inc.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  function of(a) {
    var b = a && (a[pf] ? "phone" : null);
    if (b && a && a[qf]) {
      M(this, "uid", a[qf]);
      M(this, "displayName", a[rf] || null);
      var c = null;
      a[sf] && (c = new Date(a[sf]).toUTCString());
      M(this, "enrollmentTime", c);
      M(this, "factorId", b);
    } else throw new t("internal-error", "Internal assert: invalid MultiFactorInfo object");
  }
  of.prototype.w = function () {
    return {
      uid: this.uid,
      displayName: this.displayName,
      factorId: this.factorId,
      enrollmentTime: this.enrollmentTime
    };
  };
  function tf(a) {
    try {
      var b = new uf(a);
    } catch (c) {
      b = null;
    }
    return b;
  }
  var rf = "displayName", sf = "enrolledAt", qf = "mfaEnrollmentId", pf = "phoneInfo";
  function uf(a) {
    of.call(this, a);
    M(this, "phoneNumber", a[pf]);
  }
  r(uf, of);
  uf.prototype.w = function () {
    var a = uf.ab.w.call(this);
    a.phoneNumber = this.phoneNumber;
    return a;
  };
  function vf(a) {
    var b = {}, c = a[wf], d = a[xf], e = a[yf];
    a = tf(a[zf]);
    if (!e || e != Af && e != Bf && !c || e == Bf && !d || e == Cf && !a) throw Error("Invalid checkActionCode response!");
    e == Bf ? (b[Df] = c || null, b[Ef] = c || null, b[Ff] = d) : (b[Df] = d || null, b[Ef] = d || null, b[Ff] = c || null);
    b[Gf] = a || null;
    M(this, Hf, e);
    M(this, If, nf(b));
  }
  var Cf = "REVERT_SECOND_FACTOR_ADDITION", Af = "EMAIL_SIGNIN", Bf = "VERIFY_AND_CHANGE_EMAIL", wf = "email", zf = "mfaInfo", xf = "newEmail", yf = "requestType", Ff = "email", Df = "fromEmail", Gf = "multiFactorInfo", Ef = "previousEmail", If = "data", Hf = "operation";
  function Jf(a) {
    a = J(a);
    var b = be(a, Kf) || null, c = be(a, Lf) || null, d = be(a, Mf) || null;
    d = d ? Nf[d] || null : null;
    if (!b || !c || !d) throw new t("argument-error", Kf + ", " + Lf + "and " + Mf + " are required in a valid action code URL.");
    N(this, {
      apiKey: b,
      operation: d,
      code: c,
      continueUrl: be(a, Of) || null,
      languageCode: be(a, Pf) || null,
      tenantId: be(a, Qf) || null
    });
  }
  var Kf = "apiKey", Lf = "oobCode", Of = "continueUrl", Pf = "languageCode", Mf = "mode", Qf = "tenantId", Nf = {
    recoverEmail: "RECOVER_EMAIL",
    resetPassword: "PASSWORD_RESET",
    revertSecondFactorAddition: Cf,
    signIn: Af,
    verifyAndChangeEmail: Bf,
    verifyEmail: "VERIFY_EMAIL"
  };
  function Rf(a) {
    try {
      return new Jf(a);
    } catch (b) {
      return null;
    }
  }
  ;
  function Sf(a) {
    var b = a[Tf];
    if ("undefined" === typeof b) throw new t("missing-continue-uri");
    if ("string" !== typeof b || "string" === typeof b && !b.length) throw new t("invalid-continue-uri");
    this.h = b;
    this.b = this.a = null;
    this.g = !1;
    var c = a[Uf];
    if (c && "object" === typeof c) {
      b = c[Vf];
      var d = c[Wf];
      c = c[Xf];
      if ("string" === typeof b && b.length) {
        this.a = b;
        if ("undefined" !== typeof d && "boolean" !== typeof d) throw new t("argument-error", Wf + " property must be a boolean when specified.");
        this.g = !!d;
        if ("undefined" !== typeof c && ("string" !== typeof c || "string" === typeof c && !c.length)) throw new t("argument-error", Xf + " property must be a non empty string when specified.");
        this.b = c || null;
      } else {
        if ("undefined" !== typeof b) throw new t("argument-error", Vf + " property must be a non empty string when specified.");
        if ("undefined" !== typeof d || "undefined" !== typeof c) throw new t("missing-android-pkg-name");
      }
    } else if ("undefined" !== typeof c) throw new t("argument-error", Uf + " property must be a non null object when specified.");
    this.f = null;
    if ((b = a[Yf]) && "object" === typeof b) if ((b = b[Zf], "string" === typeof b && b.length)) this.f = b; else {
      if ("undefined" !== typeof b) throw new t("argument-error", Zf + " property must be a non empty string when specified.");
    } else if ("undefined" !== typeof b) throw new t("argument-error", Yf + " property must be a non null object when specified.");
    b = a[$f];
    if ("undefined" !== typeof b && "boolean" !== typeof b) throw new t("argument-error", $f + " property must be a boolean when specified.");
    this.c = !!b;
    a = a[ag];
    if ("undefined" !== typeof a && ("string" !== typeof a || "string" === typeof a && !a.length)) throw new t("argument-error", ag + " property must be a non empty string when specified.");
    this.i = a || null;
  }
  var Uf = "android", ag = "dynamicLinkDomain", $f = "handleCodeInApp", Yf = "iOS", Tf = "url", Wf = "installApp", Xf = "minimumVersion", Vf = "packageName", Zf = "bundleId";
  function bg(a) {
    var b = {};
    b.continueUrl = a.h;
    b.canHandleCodeInApp = a.c;
    if (b.androidPackageName = a.a) (b.androidMinimumVersion = a.b, b.androidInstallApp = a.g);
    b.iOSBundleId = a.f;
    b.dynamicLinkDomain = a.i;
    for (var c in b) null === b[c] && delete b[c];
    return b;
  }
  ;
  function cg(a) {
    return Ra(a, function (b) {
      b = b.toString(16);
      return 1 < b.length ? b : "0" + b;
    }).join("");
  }
  ;
  var dg = null;
  function eg(a) {
    var b = [];
    fg(a, function (c) {
      b.push(c);
    });
    return b;
  }
  function fg(a, b) {
    function c(m) {
      for (; d < a.length; ) {
        var p = a.charAt(d++), v = dg[p];
        if (null != v) return v;
        if (!(/^[\s\xa0]*$/).test(p)) throw Error("Unknown base64 encoding at char: " + p);
      }
      return m;
    }
    gg();
    for (var d = 0; ; ) {
      var e = c(-1), f = c(0), g = c(64), h = c(64);
      if (64 === h && -1 === e) break;
      b(e << 2 | f >> 4);
      64 != g && (b(f << 4 & 240 | g >> 2), 64 != h && b(g << 6 & 192 | h));
    }
  }
  function gg() {
    if (!dg) {
      dg = {};
      for (var a = ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789").split(""), b = ["+/=", "+/", "-_=", "-_.", "-_"], c = 0; 5 > c; c++) for (var d = a.concat(b[c].split("")), e = 0; e < d.length; e++) {
        var f = d[e];
        void 0 === dg[f] && (dg[f] = e);
      }
    }
  }
  ;
  function hg(a) {
    var b = ig(a);
    if (!(b && b.sub && b.iss && b.aud && b.exp)) throw Error("Invalid JWT");
    this.h = a;
    this.a = b.exp;
    this.i = b.sub;
    a = Date.now() / 1E3;
    this.g = b.iat || (a > this.a ? this.a : a);
    this.b = b.provider_id || b.firebase && b.firebase.sign_in_provider || null;
    this.f = b.firebase && b.firebase.tenant || null;
    this.c = !!b.is_anonymous || "anonymous" == this.b;
  }
  hg.prototype.T = function () {
    return this.f;
  };
  hg.prototype.l = function () {
    return this.c;
  };
  hg.prototype.toString = function () {
    return this.h;
  };
  function jg(a) {
    try {
      return new hg(a);
    } catch (b) {
      return null;
    }
  }
  function ig(a) {
    if (!a) return null;
    a = a.split(".");
    if (3 != a.length) return null;
    a = a[1];
    for (var b = (4 - a.length % 4) % 4, c = 0; c < b; c++) a += ".";
    try {
      var d = eg(a);
      a = [];
      for (c = b = 0; b < d.length; ) {
        var e = d[b++];
        if (128 > e) a[c++] = String.fromCharCode(e); else if (191 < e && 224 > e) {
          var f = d[b++];
          a[c++] = String.fromCharCode((e & 31) << 6 | f & 63);
        } else if (239 < e && 365 > e) {
          f = d[b++];
          var g = d[b++], h = d[b++], m = ((e & 7) << 18 | (f & 63) << 12 | (g & 63) << 6 | h & 63) - 65536;
          a[c++] = String.fromCharCode(55296 + (m >> 10));
          a[c++] = String.fromCharCode(56320 + (m & 1023));
        } else (f = d[b++], g = d[b++], a[c++] = String.fromCharCode((e & 15) << 12 | (f & 63) << 6 | g & 63));
      }
      return JSON.parse(a.join(""));
    } catch (p) {}
    return null;
  }
  ;
  var kg = ("oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version").split(" "), lg = ["client_id", "response_type", "scope", "redirect_uri", "state"], mg = {
    nd: {
      Ja: "locale",
      ua: 700,
      ta: 600,
      fa: "facebook.com",
      Xa: lg
    },
    pd: {
      Ja: null,
      ua: 500,
      ta: 750,
      fa: "github.com",
      Xa: lg
    },
    qd: {
      Ja: "hl",
      ua: 515,
      ta: 680,
      fa: "google.com",
      Xa: lg
    },
    wd: {
      Ja: "lang",
      ua: 485,
      ta: 705,
      fa: "twitter.com",
      Xa: kg
    },
    kd: {
      Ja: "locale",
      ua: 640,
      ta: 600,
      fa: "apple.com",
      Xa: []
    }
  };
  function ng(a) {
    for (var b in mg) if (mg[b].fa == a) return mg[b];
    return null;
  }
  ;
  function og(a) {
    var b = {};
    b["facebook.com"] = pg;
    b["google.com"] = qg;
    b["github.com"] = rg;
    b["twitter.com"] = sg;
    var c = a && a[tg];
    try {
      if (c) return b[c] ? new b[c](a) : new ug(a);
      if ("undefined" !== typeof a[vg]) return new wg(a);
    } catch (d) {}
    return null;
  }
  var vg = "idToken", tg = "providerId";
  function wg(a) {
    var b = a[tg];
    if (!b && a[vg]) {
      var c = jg(a[vg]);
      c && c.b && (b = c.b);
    }
    if (!b) throw Error("Invalid additional user info!");
    if ("anonymous" == b || "custom" == b) b = null;
    c = !1;
    "undefined" !== typeof a.isNewUser ? c = !!a.isNewUser : "identitytoolkit#SignupNewUserResponse" === a.kind && (c = !0);
    M(this, "providerId", b);
    M(this, "isNewUser", c);
  }
  function ug(a) {
    wg.call(this, a);
    a = We(a.rawUserInfo || "{}");
    M(this, "profile", nf(a || ({})));
  }
  r(ug, wg);
  function pg(a) {
    ug.call(this, a);
    if ("facebook.com" != this.providerId) throw Error("Invalid provider ID!");
  }
  r(pg, ug);
  function rg(a) {
    ug.call(this, a);
    if ("github.com" != this.providerId) throw Error("Invalid provider ID!");
    M(this, "username", this.profile && this.profile.login || null);
  }
  r(rg, ug);
  function qg(a) {
    ug.call(this, a);
    if ("google.com" != this.providerId) throw Error("Invalid provider ID!");
  }
  r(qg, ug);
  function sg(a) {
    ug.call(this, a);
    if ("twitter.com" != this.providerId) throw Error("Invalid provider ID!");
    M(this, "username", a.screenName || null);
  }
  r(sg, ug);
  function xg(a) {
    var b = J(a), c = be(b, "link"), d = be(J(c), "link");
    b = be(b, "deep_link_id");
    return be(J(b), "link") || b || d || c || a;
  }
  ;
  function yg(a, b) {
    if (!a && !b) throw new t("internal-error", "Internal assert: no raw session string available");
    if (a && b) throw new t("internal-error", "Internal assert: unable to determine the session type");
    this.a = a || null;
    this.b = b || null;
    this.type = this.a ? zg : Ag;
  }
  var zg = "enroll", Ag = "signin";
  yg.prototype.Ha = function () {
    return this.a ? E(this.a) : E(this.b);
  };
  yg.prototype.w = function () {
    return this.type == zg ? {
      multiFactorSession: {
        idToken: this.a
      }
    } : {
      multiFactorSession: {
        pendingCredential: this.b
      }
    };
  };
  function Bg() {}
  Bg.prototype.ka = function () {};
  Bg.prototype.b = function () {};
  Bg.prototype.c = function () {};
  Bg.prototype.w = function () {};
  function Cg(a, b) {
    return a.then(function (c) {
      if (c[Dg]) {
        var d = jg(c[Dg]);
        if (!d || b != d.i) throw new t("user-mismatch");
        return c;
      }
      throw new t("user-mismatch");
    }).o(function (c) {
      throw c && c.code && c.code == xa + "user-not-found" ? new t("user-mismatch") : c;
    });
  }
  function Eg(a, b) {
    if (b) this.a = b; else throw new t("internal-error", "failed to construct a credential");
    M(this, "providerId", a);
    M(this, "signInMethod", a);
  }
  Eg.prototype.ka = function (a) {
    return Fg(a, Gg(this));
  };
  Eg.prototype.b = function (a, b) {
    var c = Gg(this);
    c.idToken = b;
    return Hg(a, c);
  };
  Eg.prototype.c = function (a, b) {
    return Cg(Ig(a, Gg(this)), b);
  };
  function Gg(a) {
    return {
      pendingToken: a.a,
      requestUri: "http://localhost"
    };
  }
  Eg.prototype.w = function () {
    return {
      providerId: this.providerId,
      signInMethod: this.signInMethod,
      pendingToken: this.a
    };
  };
  function Jg(a) {
    if (a && a.providerId && a.signInMethod && 0 == a.providerId.indexOf("saml.") && a.pendingToken) try {
      return new Eg(a.providerId, a.pendingToken);
    } catch (b) {}
    return null;
  }
  function Kg(a, b, c) {
    this.a = null;
    if (b.idToken || b.accessToken) (b.idToken && M(this, "idToken", b.idToken), b.accessToken && M(this, "accessToken", b.accessToken), b.nonce && !b.pendingToken && M(this, "nonce", b.nonce), b.pendingToken && (this.a = b.pendingToken)); else if (b.oauthToken && b.oauthTokenSecret) (M(this, "accessToken", b.oauthToken), M(this, "secret", b.oauthTokenSecret)); else throw new t("internal-error", "failed to construct a credential");
    M(this, "providerId", a);
    M(this, "signInMethod", c);
  }
  Kg.prototype.ka = function (a) {
    return Fg(a, Lg(this));
  };
  Kg.prototype.b = function (a, b) {
    var c = Lg(this);
    c.idToken = b;
    return Hg(a, c);
  };
  Kg.prototype.c = function (a, b) {
    var c = Lg(this);
    return Cg(Ig(a, c), b);
  };
  function Lg(a) {
    var b = {};
    a.idToken && (b.id_token = a.idToken);
    a.accessToken && (b.access_token = a.accessToken);
    a.secret && (b.oauth_token_secret = a.secret);
    b.providerId = a.providerId;
    a.nonce && !a.a && (b.nonce = a.nonce);
    b = {
      postBody: fe(b).toString(),
      requestUri: "http://localhost"
    };
    a.a && (delete b.postBody, b.pendingToken = a.a);
    return b;
  }
  Kg.prototype.w = function () {
    var a = {
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
    this.idToken && (a.oauthIdToken = this.idToken);
    this.accessToken && (a.oauthAccessToken = this.accessToken);
    this.secret && (a.oauthTokenSecret = this.secret);
    this.nonce && (a.nonce = this.nonce);
    this.a && (a.pendingToken = this.a);
    return a;
  };
  function Mg(a) {
    if (a && a.providerId && a.signInMethod) {
      var b = {
        idToken: a.oauthIdToken,
        accessToken: a.oauthTokenSecret ? null : a.oauthAccessToken,
        oauthTokenSecret: a.oauthTokenSecret,
        oauthToken: a.oauthTokenSecret && a.oauthAccessToken,
        nonce: a.nonce,
        pendingToken: a.pendingToken
      };
      try {
        return new Kg(a.providerId, b, a.signInMethod);
      } catch (c) {}
    }
    return null;
  }
  function Ng(a, b) {
    this.Qc = b || [];
    N(this, {
      providerId: a,
      isOAuthProvider: !0
    });
    this.Ib = {};
    this.pb = (ng(a) || ({})).Ja || null;
    this.ob = null;
  }
  Ng.prototype.Ka = function (a) {
    this.Ib = nb(a);
    return this;
  };
  function Og(a) {
    if ("string" !== typeof a || 0 != a.indexOf("saml.")) throw new t("argument-error", 'SAML provider IDs must be prefixed with "saml."');
    Ng.call(this, a, []);
  }
  r(Og, Ng);
  function Pg(a) {
    Ng.call(this, a, lg);
    this.a = [];
  }
  r(Pg, Ng);
  Pg.prototype.Ca = function (a) {
    Va(this.a, a) || this.a.push(a);
    return this;
  };
  Pg.prototype.Qb = function () {
    return Za(this.a);
  };
  Pg.prototype.credential = function (a, b) {
    var c;
    n(a) ? c = {
      idToken: a.idToken || null,
      accessToken: a.accessToken || null,
      nonce: a.rawNonce || null
    } : c = {
      idToken: a || null,
      accessToken: b || null
    };
    if (!c.idToken && !c.accessToken) throw new t("argument-error", "credential failed: must provide the ID token and/or the access token.");
    return new Kg(this.providerId, c, this.providerId);
  };
  function Qg() {
    Pg.call(this, "facebook.com");
  }
  r(Qg, Pg);
  M(Qg, "PROVIDER_ID", "facebook.com");
  M(Qg, "FACEBOOK_SIGN_IN_METHOD", "facebook.com");
  function Rg(a) {
    if (!a) throw new t("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
    var b = a;
    n(a) && (b = a.accessToken);
    return new Qg().credential({
      accessToken: b
    });
  }
  function Sg() {
    Pg.call(this, "github.com");
  }
  r(Sg, Pg);
  M(Sg, "PROVIDER_ID", "github.com");
  M(Sg, "GITHUB_SIGN_IN_METHOD", "github.com");
  function Tg(a) {
    if (!a) throw new t("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
    var b = a;
    n(a) && (b = a.accessToken);
    return new Sg().credential({
      accessToken: b
    });
  }
  function Ug() {
    Pg.call(this, "google.com");
    this.Ca("profile");
  }
  r(Ug, Pg);
  M(Ug, "PROVIDER_ID", "google.com");
  M(Ug, "GOOGLE_SIGN_IN_METHOD", "google.com");
  function Vg(a, b) {
    var c = a;
    n(a) && (c = a.idToken, b = a.accessToken);
    return new Ug().credential({
      idToken: c,
      accessToken: b
    });
  }
  function Wg() {
    Ng.call(this, "twitter.com", kg);
  }
  r(Wg, Ng);
  M(Wg, "PROVIDER_ID", "twitter.com");
  M(Wg, "TWITTER_SIGN_IN_METHOD", "twitter.com");
  function Xg(a, b) {
    var c = a;
    n(c) || (c = {
      oauthToken: a,
      oauthTokenSecret: b
    });
    if (!c.oauthToken || !c.oauthTokenSecret) throw new t("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");
    return new Kg("twitter.com", c, "twitter.com");
  }
  function Yg(a, b, c) {
    this.a = a;
    this.f = b;
    M(this, "providerId", "password");
    M(this, "signInMethod", c === Zg.EMAIL_LINK_SIGN_IN_METHOD ? Zg.EMAIL_LINK_SIGN_IN_METHOD : Zg.EMAIL_PASSWORD_SIGN_IN_METHOD);
  }
  Yg.prototype.ka = function (a) {
    return this.signInMethod == Zg.EMAIL_LINK_SIGN_IN_METHOD ? O(a, $g, {
      email: this.a,
      oobCode: this.f
    }) : O(a, ah, {
      email: this.a,
      password: this.f
    });
  };
  Yg.prototype.b = function (a, b) {
    return this.signInMethod == Zg.EMAIL_LINK_SIGN_IN_METHOD ? O(a, bh, {
      idToken: b,
      email: this.a,
      oobCode: this.f
    }) : O(a, ch, {
      idToken: b,
      email: this.a,
      password: this.f
    });
  };
  Yg.prototype.c = function (a, b) {
    return Cg(this.ka(a), b);
  };
  Yg.prototype.w = function () {
    return {
      email: this.a,
      password: this.f,
      signInMethod: this.signInMethod
    };
  };
  function dh(a) {
    return a && a.email && a.password ? new Yg(a.email, a.password, a.signInMethod) : null;
  }
  function Zg() {
    N(this, {
      providerId: "password",
      isOAuthProvider: !1
    });
  }
  function eh(a, b) {
    b = fh(b);
    if (!b) throw new t("argument-error", "Invalid email link!");
    return new Yg(a, b.code, Zg.EMAIL_LINK_SIGN_IN_METHOD);
  }
  function fh(a) {
    a = xg(a);
    return (a = Rf(a)) && a.operation === Af ? a : null;
  }
  N(Zg, {
    PROVIDER_ID: "password"
  });
  N(Zg, {
    EMAIL_LINK_SIGN_IN_METHOD: "emailLink"
  });
  N(Zg, {
    EMAIL_PASSWORD_SIGN_IN_METHOD: "password"
  });
  function gh(a) {
    if (!(a.eb && a.cb || a.La && a.ea)) throw new t("internal-error");
    this.a = a;
    M(this, "providerId", "phone");
    this.fa = "phone";
    M(this, "signInMethod", "phone");
  }
  gh.prototype.ka = function (a) {
    return a.fb(hh(this));
  };
  gh.prototype.b = function (a, b) {
    var c = hh(this);
    c.idToken = b;
    return O(a, ih, c);
  };
  gh.prototype.c = function (a, b) {
    var c = hh(this);
    c.operation = "REAUTH";
    a = O(a, jh, c);
    return Cg(a, b);
  };
  gh.prototype.w = function () {
    var a = {
      providerId: "phone"
    };
    this.a.eb && (a.verificationId = this.a.eb);
    this.a.cb && (a.verificationCode = this.a.cb);
    this.a.La && (a.temporaryProof = this.a.La);
    this.a.ea && (a.phoneNumber = this.a.ea);
    return a;
  };
  function kh(a) {
    if (a && "phone" === a.providerId && (a.verificationId && a.verificationCode || a.temporaryProof && a.phoneNumber)) {
      var b = {};
      w(["verificationId", "verificationCode", "temporaryProof", "phoneNumber"], function (c) {
        a[c] && (b[c] = a[c]);
      });
      return new gh(b);
    }
    return null;
  }
  function hh(a) {
    return a.a.La && a.a.ea ? {
      temporaryProof: a.a.La,
      phoneNumber: a.a.ea
    } : {
      sessionInfo: a.a.eb,
      code: a.a.cb
    };
  }
  function lh(a) {
    try {
      this.a = a || _firebaseAppDefault.default.auth();
    } catch (b) {
      throw new t("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");
    }
    N(this, {
      providerId: "phone",
      isOAuthProvider: !1
    });
  }
  lh.prototype.fb = function (a, b) {
    var c = this.a.a;
    return E(b.verify()).then(function (d) {
      if ("string" !== typeof d) throw new t("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");
      switch (b.type) {
        case "recaptcha":
          var e = n(a) ? a.session : null, f = n(a) ? a.phoneNumber : a, g;
          e && e.type == zg ? g = e.Ha().then(function (h) {
            return mh(c, {
              idToken: h,
              phoneEnrollmentInfo: {
                phoneNumber: f,
                recaptchaToken: d
              }
            });
          }) : e && e.type == Ag ? g = e.Ha().then(function (h) {
            return nh(c, {
              mfaPendingCredential: h,
              mfaEnrollmentId: a.multiFactorHint && a.multiFactorHint.uid || a.multiFactorUid,
              phoneSignInInfo: {
                recaptchaToken: d
              }
            });
          }) : g = oh(c, {
            phoneNumber: f,
            recaptchaToken: d
          });
          return g.then(function (h) {
            "function" === typeof b.reset && b.reset();
            return h;
          }, function (h) {
            "function" === typeof b.reset && b.reset();
            throw h;
          });
        default:
          throw new t("argument-error", 'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');
      }
    });
  };
  function ph(a, b) {
    if (!a) throw new t("missing-verification-id");
    if (!b) throw new t("missing-verification-code");
    return new gh({
      eb: a,
      cb: b
    });
  }
  N(lh, {
    PROVIDER_ID: "phone"
  });
  N(lh, {
    PHONE_SIGN_IN_METHOD: "phone"
  });
  function qh(a) {
    if (a.temporaryProof && a.phoneNumber) return new gh({
      La: a.temporaryProof,
      ea: a.phoneNumber
    });
    var b = a && a.providerId;
    if (!b || "password" === b) return null;
    var c = a && a.oauthAccessToken, d = a && a.oauthTokenSecret, e = a && a.nonce, f = a && a.oauthIdToken, g = a && a.pendingToken;
    try {
      switch (b) {
        case "google.com":
          return Vg(f, c);
        case "facebook.com":
          return Rg(c);
        case "github.com":
          return Tg(c);
        case "twitter.com":
          return Xg(c, d);
        default:
          return c || d || f || g ? g ? 0 == b.indexOf("saml.") ? new Eg(b, g) : new Kg(b, {
            pendingToken: g,
            idToken: a.oauthIdToken,
            accessToken: a.oauthAccessToken
          }, b) : new Pg(b).credential({
            idToken: f,
            accessToken: c,
            rawNonce: e
          }) : null;
      }
    } catch (h) {
      return null;
    }
  }
  function rh(a) {
    if (!a.isOAuthProvider) throw new t("invalid-oauth-provider");
  }
  ;
  function sh(a, b, c, d, e, f, g) {
    this.c = a;
    this.b = b || null;
    this.g = c || null;
    this.f = d || null;
    this.i = f || null;
    this.h = g || null;
    this.a = e || null;
    if (this.g || this.a) {
      if (this.g && this.a) throw new t("invalid-auth-event");
      if (this.g && !this.f) throw new t("invalid-auth-event");
    } else throw new t("invalid-auth-event");
  }
  sh.prototype.getUid = function () {
    var a = [];
    a.push(this.c);
    this.b && a.push(this.b);
    this.f && a.push(this.f);
    this.h && a.push(this.h);
    return a.join("-");
  };
  sh.prototype.T = function () {
    return this.h;
  };
  sh.prototype.w = function () {
    return {
      type: this.c,
      eventId: this.b,
      urlResponse: this.g,
      sessionId: this.f,
      postBody: this.i,
      tenantId: this.h,
      error: this.a && this.a.w()
    };
  };
  function th(a) {
    a = a || ({});
    return a.type ? new sh(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && Aa(a.error), a.postBody, a.tenantId) : null;
  }
  ;
  /*
  
  Copyright 2018 Google Inc.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  function uh() {
    this.b = null;
    this.a = [];
  }
  var vh = null;
  function wh(a) {
    var b = vh;
    b.a.push(a);
    b.b || (b.b = function (c) {
      for (var d = 0; d < b.a.length; d++) b.a[d](c);
    }, a = L("universalLinks.subscribe", l), "function" === typeof a && a(null, b.b));
  }
  ;
  function xh(a) {
    var b = "unauthorized-domain", c = void 0, d = J(a);
    a = d.a;
    d = d.c;
    "chrome-extension" == d ? c = Qb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = Qb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";
    t.call(this, b, c);
  }
  r(xh, t);
  function yh(a, b, c) {
    t.call(this, a, c);
    a = b || ({});
    a.Jb && M(this, "email", a.Jb);
    a.ea && M(this, "phoneNumber", a.ea);
    a.credential && M(this, "credential", a.credential);
    a.Zb && M(this, "tenantId", a.Zb);
  }
  r(yh, t);
  yh.prototype.w = function () {
    var a = {
      code: this.code,
      message: this.message
    };
    this.email && (a.email = this.email);
    this.phoneNumber && (a.phoneNumber = this.phoneNumber);
    this.tenantId && (a.tenantId = this.tenantId);
    var b = this.credential && this.credential.w();
    b && z(a, b);
    return a;
  };
  yh.prototype.toJSON = function () {
    return this.w();
  };
  function zh(a) {
    if (a.code) {
      var b = a.code || "";
      0 == b.indexOf(xa) && (b = b.substring(xa.length));
      var c = {
        credential: qh(a),
        Zb: a.tenantId
      };
      if (a.email) c.Jb = a.email; else if (a.phoneNumber) c.ea = a.phoneNumber; else if (!c.credential) return new t(b, a.message || void 0);
      return new yh(b, c, a.message);
    }
    return null;
  }
  ;
  function Ah() {}
  Ah.prototype.c = null;
  function Bh(a) {
    return a.c || (a.c = a.b());
  }
  ;
  var Ch;
  function Dh() {}
  r(Dh, Ah);
  Dh.prototype.a = function () {
    var a = Eh(this);
    return a ? new ActiveXObject(a) : new XMLHttpRequest();
  };
  Dh.prototype.b = function () {
    var a = {};
    Eh(this) && (a[0] = !0, a[1] = !0);
    return a;
  };
  function Eh(a) {
    if (!a.f && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
      for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
        var d = b[c];
        try {
          return (new ActiveXObject(d), a.f = d);
        } catch (e) {}
      }
      throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
    }
    return a.f;
  }
  Ch = new Dh();
  function Fh() {}
  r(Fh, Ah);
  Fh.prototype.a = function () {
    var a = new XMLHttpRequest();
    if (("withCredentials" in a)) return a;
    if ("undefined" != typeof XDomainRequest) return new Gh();
    throw Error("Unsupported browser");
  };
  Fh.prototype.b = function () {
    return {};
  };
  function Gh() {
    this.a = new XDomainRequest();
    this.readyState = 0;
    this.onreadystatechange = null;
    this.responseType = this.responseText = this.response = "";
    this.status = -1;
    this.statusText = "";
    this.a.onload = q(this.qc, this);
    this.a.onerror = q(this.Sb, this);
    this.a.onprogress = q(this.rc, this);
    this.a.ontimeout = q(this.vc, this);
  }
  k = Gh.prototype;
  k.open = function (a, b, c) {
    if (null != c && !c) throw Error("Only async requests are supported.");
    this.a.open(a, b);
  };
  k.send = function (a) {
    if (a) if ("string" == typeof a) this.a.send(a); else throw Error("Only string data is supported"); else this.a.send();
  };
  k.abort = function () {
    this.a.abort();
  };
  k.setRequestHeader = function () {};
  k.getResponseHeader = function (a) {
    return "content-type" == a.toLowerCase() ? this.a.contentType : "";
  };
  k.qc = function () {
    this.status = 200;
    this.response = this.responseText = this.a.responseText;
    Hh(this, 4);
  };
  k.Sb = function () {
    this.status = 500;
    this.response = this.responseText = "";
    Hh(this, 4);
  };
  k.vc = function () {
    this.Sb();
  };
  k.rc = function () {
    this.status = 200;
    Hh(this, 1);
  };
  function Hh(a, b) {
    a.readyState = b;
    if (a.onreadystatechange) a.onreadystatechange();
  }
  k.getAllResponseHeaders = function () {
    return "content-type: " + this.a.contentType;
  };
  function Ih(a, b, c) {
    this.reset(a, b, c, void 0, void 0);
  }
  Ih.prototype.a = null;
  var Jh = 0;
  Ih.prototype.reset = function (a, b, c, d, e) {
    "number" == typeof e || Jh++;
    d || va();
    delete this.a;
  };
  function Kh(a) {
    this.f = a;
    this.b = this.c = this.a = null;
  }
  function Lh(a, b) {
    this.name = a;
    this.value = b;
  }
  Lh.prototype.toString = function () {
    return this.name;
  };
  var Mh = new Lh("SEVERE", 1E3), Nh = new Lh("WARNING", 900), Oh = new Lh("CONFIG", 700), Ph = new Lh("FINE", 500);
  function Qh(a) {
    if (a.c) return a.c;
    if (a.a) return Qh(a.a);
    Ga("Root logger has no level set.");
    return null;
  }
  Kh.prototype.log = function (a, b, c) {
    if (a.value >= Qh(this).value) for ((oa(b) && (b = b()), a = new Ih(a, String(b), this.f), c && (a.a = c), c = this); c; ) c = c.a;
  };
  var Rh = {}, Sh = null;
  function Th(a) {
    Sh || (Sh = new Kh(""), Rh[""] = Sh, Sh.c = Oh);
    var b;
    if (!(b = Rh[a])) {
      b = new Kh(a);
      var c = a.lastIndexOf("."), d = a.substr(c + 1);
      c = Th(a.substr(0, c));
      c.b || (c.b = {});
      c.b[d] = b;
      b.a = c;
      Rh[a] = b;
    }
    return b;
  }
  ;
  function Uh(a, b) {
    a && a.log(Ph, b, void 0);
  }
  ;
  function Vh(a) {
    this.f = a;
  }
  r(Vh, Ah);
  Vh.prototype.a = function () {
    return new Wh(this.f);
  };
  Vh.prototype.b = (function (a) {
    return function () {
      return a;
    };
  })({});
  function Wh(a) {
    H.call(this);
    this.u = a;
    this.h = void 0;
    this.readyState = Xh;
    this.status = 0;
    this.responseType = this.responseText = this.response = this.statusText = "";
    this.onreadystatechange = null;
    this.l = new Headers();
    this.b = null;
    this.s = "GET";
    this.f = "";
    this.a = !1;
    this.i = Th("goog.net.FetchXmlHttp");
    this.m = this.c = this.g = null;
  }
  r(Wh, H);
  var Xh = 0;
  k = Wh.prototype;
  k.open = function (a, b) {
    if (this.readyState != Xh) throw (this.abort(), Error("Error reopening a connection"));
    this.s = a;
    this.f = b;
    this.readyState = 1;
    Yh(this);
  };
  k.send = function (a) {
    if (1 != this.readyState) throw (this.abort(), Error("need to call open() first. "));
    this.a = !0;
    var b = {
      headers: this.l,
      method: this.s,
      credentials: this.h,
      cache: void 0
    };
    a && (b.body = a);
    this.u.fetch(new Request(this.f, b)).then(this.uc.bind(this), this.Ua.bind(this));
  };
  k.abort = function () {
    this.response = this.responseText = "";
    this.l = new Headers();
    this.status = 0;
    this.c && this.c.cancel("Request was aborted.");
    1 <= this.readyState && this.a && 4 != this.readyState && (this.a = !1, Zh(this));
    this.readyState = Xh;
  };
  k.uc = function (a) {
    this.a && (this.g = a, this.b || (this.status = this.g.status, this.statusText = this.g.statusText, this.b = a.headers, this.readyState = 2, Yh(this)), this.a && (this.readyState = 3, Yh(this), this.a && ("arraybuffer" === this.responseType ? a.arrayBuffer().then(this.sc.bind(this), this.Ua.bind(this)) : "undefined" !== typeof l.ReadableStream && ("body" in a) ? (this.response = this.responseText = "", this.c = a.body.getReader(), this.m = new TextDecoder(), $h(this)) : a.text().then(this.tc.bind(this), this.Ua.bind(this)))));
  };
  function $h(a) {
    a.c.read().then(a.pc.bind(a)).catch(a.Ua.bind(a));
  }
  k.pc = function (a) {
    if (this.a) {
      var b = this.m.decode(a.value ? a.value : new Uint8Array(0), {
        stream: !a.done
      });
      b && (this.response = this.responseText += b);
      a.done ? Zh(this) : Yh(this);
      3 == this.readyState && $h(this);
    }
  };
  k.tc = function (a) {
    this.a && (this.response = this.responseText = a, Zh(this));
  };
  k.sc = function (a) {
    this.a && (this.response = a, Zh(this));
  };
  k.Ua = function (a) {
    var b = this.i;
    b && b.log(Nh, "Failed to fetch url " + this.f, a instanceof Error ? a : Error(a));
    this.a && Zh(this);
  };
  function Zh(a) {
    a.readyState = 4;
    a.g = null;
    a.c = null;
    a.m = null;
    Yh(a);
  }
  k.setRequestHeader = function (a, b) {
    this.l.append(a, b);
  };
  k.getResponseHeader = function (a) {
    return this.b ? this.b.get(a.toLowerCase()) || "" : ((a = this.i) && a.log(Nh, "Attempting to get response header but no headers have been received for url: " + this.f, void 0), "");
  };
  k.getAllResponseHeaders = function () {
    if (!this.b) {
      var a = this.i;
      a && a.log(Nh, "Attempting to get all response headers but no headers have been received for url: " + this.f, void 0);
      return "";
    }
    a = [];
    for (var b = this.b.entries(), c = b.next(); !c.done; ) (c = c.value, a.push(c[0] + ": " + c[1]), c = b.next());
    return a.join("\r\n");
  };
  function Yh(a) {
    a.onreadystatechange && a.onreadystatechange.call(a);
  }
  Object.defineProperty(Wh.prototype, "withCredentials", {
    get: function () {
      return "include" === this.h;
    },
    set: function (a) {
      this.h = a ? "include" : "same-origin";
    }
  });
  function ai(a) {
    H.call(this);
    this.headers = new Jd();
    this.D = a || null;
    this.c = !1;
    this.C = this.a = null;
    this.h = this.R = this.l = "";
    this.f = this.O = this.i = this.J = !1;
    this.g = 0;
    this.s = null;
    this.m = bi;
    this.u = this.S = !1;
  }
  r(ai, H);
  var bi = "";
  ai.prototype.b = Th("goog.net.XhrIo");
  var ci = /^https?$/i, di = ["POST", "PUT"];
  function ei(a, b, c, d, e) {
    if (a.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + a.l + "; newUri=" + b);
    c = c ? c.toUpperCase() : "GET";
    a.l = b;
    a.h = "";
    a.R = c;
    a.J = !1;
    a.c = !0;
    a.a = a.D ? a.D.a() : Ch.a();
    a.C = a.D ? Bh(a.D) : Bh(Ch);
    a.a.onreadystatechange = q(a.Vb, a);
    try {
      (Uh(a.b, fi(a, "Opening Xhr")), a.O = !0, a.a.open(c, String(b), !0), a.O = !1);
    } catch (g) {
      Uh(a.b, fi(a, "Error opening Xhr: " + g.message));
      gi(a, g);
      return;
    }
    b = d || "";
    var f = new Jd(a.headers);
    e && Id(e, function (g, h) {
      f.set(h, g);
    });
    e = Ta(f.Y());
    d = l.FormData && b instanceof l.FormData;
    !Va(di, c) || e || d || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    f.forEach(function (g, h) {
      this.a.setRequestHeader(h, g);
    }, a);
    a.m && (a.a.responseType = a.m);
    ("withCredentials" in a.a) && a.a.withCredentials !== a.S && (a.a.withCredentials = a.S);
    try {
      (hi(a), 0 < a.g && (a.u = ii(a.a), Uh(a.b, fi(a, "Will abort after " + a.g + "ms if incomplete, xhr2 " + a.u)), a.u ? (a.a.timeout = a.g, a.a.ontimeout = q(a.Ma, a)) : a.s = Ed(a.Ma, a.g, a)), Uh(a.b, fi(a, "Sending request")), a.i = !0, a.a.send(b), a.i = !1);
    } catch (g) {
      (Uh(a.b, fi(a, "Send error: " + g.message)), gi(a, g));
    }
  }
  function ii(a) {
    return Wb && fc(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout;
  }
  function Ua(a) {
    return "content-type" == a.toLowerCase();
  }
  k = ai.prototype;
  k.Ma = function () {
    "undefined" != typeof ha && this.a && (this.h = "Timed out after " + this.g + "ms, aborting", Uh(this.b, fi(this, this.h)), this.dispatchEvent("timeout"), this.abort(8));
  };
  function gi(a, b) {
    a.c = !1;
    a.a && (a.f = !0, a.a.abort(), a.f = !1);
    a.h = b;
    ji(a);
    ki(a);
  }
  function ji(a) {
    a.J || (a.J = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
  }
  k.abort = function () {
    this.a && this.c && (Uh(this.b, fi(this, "Aborting")), this.c = !1, this.f = !0, this.a.abort(), this.f = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), ki(this));
  };
  k.Da = function () {
    this.a && (this.c && (this.c = !1, this.f = !0, this.a.abort(), this.f = !1), ki(this, !0));
    ai.ab.Da.call(this);
  };
  k.Vb = function () {
    this.xa || (this.O || this.i || this.f ? li(this) : this.Jc());
  };
  k.Jc = function () {
    li(this);
  };
  function li(a) {
    if (a.c && "undefined" != typeof ha) if (a.C[1] && 4 == mi(a) && 2 == ni(a)) Uh(a.b, fi(a, "Local request error detected and ignored")); else if (a.i && 4 == mi(a)) Ed(a.Vb, 0, a); else if ((a.dispatchEvent("readystatechange"), 4 == mi(a))) {
      Uh(a.b, fi(a, "Request complete"));
      a.c = !1;
      try {
        var b = ni(a);
        a: switch (b) {
          case 200:
          case 201:
          case 202:
          case 204:
          case 206:
          case 304:
          case 1223:
            var c = !0;
            break a;
          default:
            c = !1;
        }
        var d;
        if (!(d = c)) {
          var e;
          if (e = 0 === b) {
            var f = String(a.l).match(Md)[1] || null;
            if (!f && l.self && l.self.location) {
              var g = l.self.location.protocol;
              f = g.substr(0, g.length - 1);
            }
            e = !ci.test(f ? f.toLowerCase() : "");
          }
          d = e;
        }
        if (d) (a.dispatchEvent("complete"), a.dispatchEvent("success")); else {
          try {
            var h = 2 < mi(a) ? a.a.statusText : "";
          } catch (m) {
            (Uh(a.b, "Can not get status: " + m.message), h = "");
          }
          a.h = h + " [" + ni(a) + "]";
          ji(a);
        }
      } finally {
        ki(a);
      }
    }
  }
  function ki(a, b) {
    if (a.a) {
      hi(a);
      var c = a.a, d = a.C[0] ? la : null;
      a.a = null;
      a.C = null;
      b || a.dispatchEvent("ready");
      try {
        c.onreadystatechange = d;
      } catch (e) {
        (a = a.b) && a.log(Mh, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
      }
    }
  }
  function hi(a) {
    a.a && a.u && (a.a.ontimeout = null);
    a.s && (l.clearTimeout(a.s), a.s = null);
  }
  function mi(a) {
    return a.a ? a.a.readyState : 0;
  }
  function ni(a) {
    try {
      return 2 < mi(a) ? a.a.status : -1;
    } catch (b) {
      return -1;
    }
  }
  function oi(a) {
    try {
      return a.a ? a.a.responseText : "";
    } catch (b) {
      return (Uh(a.b, "Can not get responseText: " + b.message), "");
    }
  }
  k.getResponse = function () {
    try {
      if (!this.a) return null;
      if (("response" in this.a)) return this.a.response;
      switch (this.m) {
        case bi:
        case "text":
          return this.a.responseText;
        case "arraybuffer":
          if (("mozResponseArrayBuffer" in this.a)) return this.a.mozResponseArrayBuffer;
      }
      var a = this.b;
      a && a.log(Mh, "Response type " + this.m + " is not supported on this browser", void 0);
      return null;
    } catch (b) {
      return (Uh(this.b, "Can not get response: " + b.message), null);
    }
  };
  function fi(a, b) {
    return b + " [" + a.R + " " + a.l + " " + ni(a) + "]";
  }
  ;
  /*
  Portions of this code are from MochiKit, received by
  The Closure Authors under the MIT license. All other code is Copyright
  2005-2009 The Closure Authors. All Rights Reserved.
  */
  function pi(a) {
    var b = qi;
    this.g = [];
    this.u = b;
    this.s = a || null;
    this.f = this.a = !1;
    this.c = void 0;
    this.v = this.C = this.i = !1;
    this.h = 0;
    this.b = null;
    this.l = 0;
  }
  pi.prototype.cancel = function (a) {
    if (this.a) this.c instanceof pi && this.c.cancel(); else {
      if (this.b) {
        var b = this.b;
        delete this.b;
        a ? b.cancel(a) : (b.l--, 0 >= b.l && b.cancel());
      }
      this.u ? this.u.call(this.s, this) : this.v = !0;
      this.a || (a = new ri(this), si(this), ti(this, !1, a));
    }
  };
  pi.prototype.m = function (a, b) {
    this.i = !1;
    ti(this, a, b);
  };
  function ti(a, b, c) {
    a.a = !0;
    a.c = c;
    a.f = !b;
    ui(a);
  }
  function si(a) {
    if (a.a) {
      if (!a.v) throw new vi(a);
      a.v = !1;
    }
  }
  function wi(a, b) {
    xi(a, null, b, void 0);
  }
  function xi(a, b, c, d) {
    a.g.push([b, c, d]);
    a.a && ui(a);
  }
  pi.prototype.then = function (a, b, c) {
    var d, e, f = new D(function (g, h) {
      d = g;
      e = h;
    });
    xi(this, d, function (g) {
      g instanceof ri ? f.cancel() : e(g);
    });
    return f.then(a, b, c);
  };
  pi.prototype.$goog_Thenable = !0;
  function yi(a) {
    return Sa(a.g, function (b) {
      return oa(b[1]);
    });
  }
  function ui(a) {
    if (a.h && a.a && yi(a)) {
      var b = a.h, c = zi[b];
      c && (l.clearTimeout(c.a), delete zi[b]);
      a.h = 0;
    }
    a.b && (a.b.l--, delete a.b);
    b = a.c;
    for (var d = c = !1; a.g.length && !a.i; ) {
      var e = a.g.shift(), f = e[0], g = e[1];
      e = e[2];
      if (f = a.f ? g : f) try {
        var h = f.call(e || a.s, b);
        void 0 !== h && (a.f = a.f && (h == b || h instanceof Error), a.c = b = h);
        if (Ea(b) || "function" === typeof l.Promise && b instanceof l.Promise) (d = !0, a.i = !0);
      } catch (m) {
        (b = m, a.f = !0, yi(a) || (c = !0));
      }
    }
    a.c = b;
    d && (h = q(a.m, a, !0), d = q(a.m, a, !1), b instanceof pi ? (xi(b, h, d), b.C = !0) : b.then(h, d));
    c && (b = new Ai(b), zi[b.a] = b, a.h = b.a);
  }
  function vi() {
    u.call(this);
  }
  r(vi, u);
  vi.prototype.message = "Deferred has already fired";
  vi.prototype.name = "AlreadyCalledError";
  function ri() {
    u.call(this);
  }
  r(ri, u);
  ri.prototype.message = "Deferred was canceled";
  ri.prototype.name = "CanceledError";
  function Ai(a) {
    this.a = l.setTimeout(q(this.c, this), 0);
    this.b = a;
  }
  Ai.prototype.c = function () {
    delete zi[this.a];
    throw this.b;
  };
  var zi = {};
  function Bi(a) {
    var b = {}, c = b.document || document, d = yb(a).toString(), e = oc(document, "SCRIPT"), f = {
      Wb: e,
      Ma: void 0
    }, g = new pi(f), h = null, m = null != b.timeout ? b.timeout : 5E3;
    0 < m && (h = window.setTimeout(function () {
      Ci(e, !0);
      var p = new Di(Ei, "Timeout reached for loading script " + d);
      si(g);
      ti(g, !1, p);
    }, m), f.Ma = h);
    e.onload = e.onreadystatechange = function () {
      e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Ci(e, b.xd || !1, h), si(g), ti(g, !0, null));
    };
    e.onerror = function () {
      Ci(e, !0, h);
      var p = new Di(Fi, "Error while loading script " + d);
      si(g);
      ti(g, !1, p);
    };
    f = b.attributes || ({});
    z(f, {
      type: "text/javascript",
      charset: "UTF-8"
    });
    lc(e, f);
    Ob(e, a);
    Gi(c).appendChild(e);
    return g;
  }
  function Gi(a) {
    var b;
    return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
  }
  function qi() {
    if (this && this.Wb) {
      var a = this.Wb;
      a && "SCRIPT" == a.tagName && Ci(a, !0, this.Ma);
    }
  }
  function Ci(a, b, c) {
    null != c && l.clearTimeout(c);
    a.onload = la;
    a.onerror = la;
    a.onreadystatechange = la;
    b && window.setTimeout(function () {
      a && a.parentNode && a.parentNode.removeChild(a);
    }, 0);
  }
  var Fi = 0, Ei = 1;
  function Di(a, b) {
    var c = "Jsloader error (code #" + a + ")";
    b && (c += ": " + b);
    u.call(this, c);
    this.code = a;
  }
  r(Di, u);
  function Hi(a) {
    this.f = a;
  }
  r(Hi, Ah);
  Hi.prototype.a = function () {
    return new this.f();
  };
  Hi.prototype.b = function () {
    return {};
  };
  function Ii(a, b, c) {
    this.c = a;
    a = b || ({});
    this.l = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";
    this.m = a.secureTokenTimeout || Ji;
    this.g = nb(a.secureTokenHeaders || Ki);
    this.h = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";
    this.i = a.identityPlatformEndpoint || "https://identitytoolkit.googleapis.com/v2/";
    this.v = a.firebaseTimeout || Li;
    this.a = nb(a.firebaseHeaders || Mi);
    c && (this.a["X-Client-Version"] = c, this.g["X-Client-Version"] = c);
    c = "Node" == Ke();
    c = l.XMLHttpRequest || c && _firebaseAppDefault.default.INTERNAL.node && _firebaseAppDefault.default.INTERNAL.node.XMLHttpRequest;
    if (!c && !Je()) throw new t("internal-error", "The XMLHttpRequest compatibility library was not found.");
    this.f = void 0;
    Je() ? this.f = new Vh(self) : Le() ? this.f = new Hi(c) : this.f = new Fh();
    this.b = null;
  }
  var Ni, Dg = "idToken", Ji = new Ze(3E4, 6E4), Ki = {
    "Content-Type": "application/x-www-form-urlencoded"
  }, Li = new Ze(3E4, 6E4), Mi = {
    "Content-Type": "application/json"
  };
  function Oi(a, b) {
    b ? a.a["X-Firebase-Locale"] = b : delete a.a["X-Firebase-Locale"];
  }
  function Pi(a, b) {
    b && (a.l = Qi("https://securetoken.googleapis.com/v1/token", b), a.h = Qi("https://www.googleapis.com/identitytoolkit/v3/relyingparty/", b), a.i = Qi("https://identitytoolkit.googleapis.com/v2/", b));
  }
  function Qi(a, b) {
    a = J(a);
    b = J(b.url);
    a.f = a.a + a.f;
    Pd(a, b.c);
    a.a = b.a;
    Qd(a, b.g);
    return a.toString();
  }
  function Ri(a, b) {
    b ? (a.a["X-Client-Version"] = b, a.g["X-Client-Version"] = b) : (delete a.a["X-Client-Version"], delete a.g["X-Client-Version"]);
  }
  Ii.prototype.T = function () {
    return this.b;
  };
  function Si(a, b, c, d, e, f, g) {
    ue() || Je() ? a = q(a.u, a) : (Ni || (Ni = new D(function (h, m) {
      Ti(h, m);
    })), a = q(a.s, a));
    a(b, c, d, e, f, g);
  }
  Ii.prototype.u = function (a, b, c, d, e, f) {
    if (Je() && ("undefined" === typeof l.fetch || "undefined" === typeof l.Headers || "undefined" === typeof l.Request)) throw new t("operation-not-supported-in-this-environment", "fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");
    var g = new ai(this.f);
    if (f) {
      g.g = Math.max(0, f);
      var h = setTimeout(function () {
        g.dispatchEvent("timeout");
      }, f);
    }
    qd(g, "complete", function () {
      h && clearTimeout(h);
      var m = null;
      try {
        m = JSON.parse(oi(this)) || null;
      } catch (p) {
        m = null;
      }
      b && b(m);
    });
    wd(g, "ready", function () {
      h && clearTimeout(h);
      Xc(this);
    });
    wd(g, "timeout", function () {
      h && clearTimeout(h);
      Xc(this);
      b && b(null);
    });
    ei(g, a, c, d, e);
  };
  var Ui = new qb(rb, "https://apis.google.com/js/client.js?onload=%{onload}"), Vi = "__fcb" + Math.floor(1E6 * Math.random()).toString();
  function Ti(a, b) {
    if (((window.gapi || ({})).client || ({})).request) a(); else {
      l[Vi] = function () {
        ((window.gapi || ({})).client || ({})).request ? a() : b(Error("CORS_UNSUPPORTED"));
      };
      var c = zb(Ui, {
        onload: Vi
      });
      wi(Bi(c), function () {
        b(Error("CORS_UNSUPPORTED"));
      });
    }
  }
  Ii.prototype.s = function (a, b, c, d, e) {
    var f = this;
    Ni.then(function () {
      window.gapi.client.setApiKey(f.c);
      var g = window.gapi.auth.getToken();
      window.gapi.auth.setToken(null);
      window.gapi.client.request({
        path: a,
        method: c,
        body: d,
        headers: e,
        authType: "none",
        callback: function (h) {
          window.gapi.auth.setToken(g);
          b && b(h);
        }
      });
    }).o(function (g) {
      b && b({
        error: {
          message: g && g.message || "CORS_UNSUPPORTED"
        }
      });
    });
  };
  function Wi(a, b) {
    return new D(function (c, d) {
      "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? Si(a, a.l + "?key=" + encodeURIComponent(a.c), function (e) {
        e ? e.error ? d(Xi(e)) : e.access_token && e.refresh_token ? c(e) : d(new t("internal-error")) : d(new t("network-request-failed"));
      }, "POST", fe(b).toString(), a.g, a.m.get()) : d(new t("internal-error"));
    });
  }
  function Yi(a, b, c, d, e, f, g) {
    var h = J(b + c);
    I(h, "key", a.c);
    g && I(h, "cb", va().toString());
    var m = "GET" == d;
    if (m) for (var p in e) e.hasOwnProperty(p) && I(h, p, e[p]);
    return new D(function (v, B) {
      Si(a, h.toString(), function (A) {
        A ? A.error ? B(Xi(A, f || ({}))) : v(A) : B(new t("network-request-failed"));
      }, d, m ? void 0 : ke(Ve(e)), a.a, a.v.get());
    });
  }
  function Zi(a) {
    a = a.email;
    if ("string" !== typeof a || !De.test(a)) throw new t("invalid-email");
  }
  function $i(a) {
    ("email" in a) && Zi(a);
  }
  function aj(a, b) {
    return O(a, bj, {
      identifier: b,
      continueUri: Se() ? re() : "http://localhost"
    }).then(function (c) {
      return c.signinMethods || [];
    });
  }
  function cj(a) {
    return O(a, dj, {}).then(function (b) {
      return b.authorizedDomains || [];
    });
  }
  function P(a) {
    if (!a[Dg]) {
      if (a.mfaPendingCredential) throw new t("multi-factor-auth-required", null, nb(a));
      throw new t("internal-error");
    }
  }
  function ej(a) {
    if (a.phoneNumber || a.temporaryProof) {
      if (!a.phoneNumber || !a.temporaryProof) throw new t("internal-error");
    } else {
      if (!a.sessionInfo) throw new t("missing-verification-id");
      if (!a.code) throw new t("missing-verification-code");
    }
  }
  Ii.prototype.zb = function () {
    return O(this, fj, {});
  };
  Ii.prototype.Bb = function (a, b) {
    return O(this, gj, {
      idToken: a,
      email: b
    });
  };
  Ii.prototype.Cb = function (a, b) {
    return O(this, ch, {
      idToken: a,
      password: b
    });
  };
  var hj = {
    displayName: "DISPLAY_NAME",
    photoUrl: "PHOTO_URL"
  };
  k = Ii.prototype;
  k.Db = function (a, b) {
    var c = {
      idToken: a
    }, d = [];
    lb(hj, function (e, f) {
      var g = b[f];
      null === g ? d.push(e) : (f in b) && (c[f] = g);
    });
    d.length && (c.deleteAttribute = d);
    return O(this, gj, c);
  };
  k.vb = function (a, b) {
    a = {
      requestType: "PASSWORD_RESET",
      email: a
    };
    z(a, b);
    return O(this, ij, a);
  };
  k.wb = function (a, b) {
    a = {
      requestType: "EMAIL_SIGNIN",
      email: a
    };
    z(a, b);
    return O(this, jj, a);
  };
  k.ub = function (a, b) {
    a = {
      requestType: "VERIFY_EMAIL",
      idToken: a
    };
    z(a, b);
    return O(this, kj, a);
  };
  k.Eb = function (a, b, c) {
    a = {
      requestType: "VERIFY_AND_CHANGE_EMAIL",
      idToken: a,
      newEmail: b
    };
    z(a, c);
    return O(this, lj, a);
  };
  function oh(a, b) {
    return O(a, mj, b);
  }
  k.fb = function (a) {
    return O(this, nj, a);
  };
  function mh(a, b) {
    return O(a, oj, b).then(function (c) {
      return c.phoneSessionInfo.sessionInfo;
    });
  }
  function pj(a) {
    if (!a.phoneVerificationInfo) throw new t("internal-error");
    if (!a.phoneVerificationInfo.sessionInfo) throw new t("missing-verification-id");
    if (!a.phoneVerificationInfo.code) throw new t("missing-verification-code");
  }
  function nh(a, b) {
    return O(a, qj, b).then(function (c) {
      return c.phoneResponseInfo.sessionInfo;
    });
  }
  function rj(a, b, c) {
    return O(a, sj, {
      idToken: b,
      deleteProvider: c
    });
  }
  function tj(a) {
    if (!a.requestUri || !a.sessionId && !a.postBody && !a.pendingToken) throw new t("internal-error");
  }
  function uj(a, b) {
    b.oauthIdToken && b.providerId && 0 == b.providerId.indexOf("oidc.") && !b.pendingToken && (a.sessionId ? b.nonce = a.sessionId : a.postBody && (a = new Ud(a.postBody), je(a, "nonce") && (b.nonce = a.get("nonce"))));
    return b;
  }
  function vj(a) {
    var b = null;
    a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = zh(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = zh(a)) : "EMAIL_EXISTS" == a.errorMessage ? (a.code = "email-already-in-use", b = zh(a)) : a.errorMessage && (b = wj(a.errorMessage));
    if (b) throw b;
    P(a);
  }
  function Fg(a, b) {
    b.returnIdpCredential = !0;
    return O(a, xj, b);
  }
  function Hg(a, b) {
    b.returnIdpCredential = !0;
    return O(a, yj, b);
  }
  function Ig(a, b) {
    b.returnIdpCredential = !0;
    b.autoCreate = !1;
    return O(a, zj, b);
  }
  function Aj(a) {
    if (!a.oobCode) throw new t("invalid-action-code");
  }
  k.nb = function (a, b) {
    return O(this, Bj, {
      oobCode: a,
      newPassword: b
    });
  };
  k.Ra = function (a) {
    return O(this, Cj, {
      oobCode: a
    });
  };
  k.jb = function (a) {
    return O(this, Dj, {
      oobCode: a
    });
  };
  var Dj = {
    endpoint: "setAccountInfo",
    A: Aj,
    Z: "email",
    B: !0
  }, Cj = {
    endpoint: "resetPassword",
    A: Aj,
    G: function (a) {
      var b = a.requestType;
      if (!b || !a.email && "EMAIL_SIGNIN" != b && "VERIFY_AND_CHANGE_EMAIL" != b) throw new t("internal-error");
    },
    B: !0
  }, Ej = {
    endpoint: "signupNewUser",
    A: function (a) {
      Zi(a);
      if (!a.password) throw new t("weak-password");
    },
    G: P,
    V: !0,
    B: !0
  }, bj = {
    endpoint: "createAuthUri",
    B: !0
  }, Fj = {
    endpoint: "deleteAccount",
    N: ["idToken"]
  }, sj = {
    endpoint: "setAccountInfo",
    N: ["idToken", "deleteProvider"],
    A: function (a) {
      if (!Array.isArray(a.deleteProvider)) throw new t("internal-error");
    }
  }, $g = {
    endpoint: "emailLinkSignin",
    N: ["email", "oobCode"],
    A: Zi,
    G: P,
    V: !0,
    B: !0
  }, bh = {
    endpoint: "emailLinkSignin",
    N: ["idToken", "email", "oobCode"],
    A: Zi,
    G: P,
    V: !0
  }, Gj = {
    endpoint: "accounts/mfaEnrollment:finalize",
    N: ["idToken", "phoneVerificationInfo"],
    A: pj,
    G: P,
    B: !0,
    Na: !0
  }, Hj = {
    endpoint: "accounts/mfaSignIn:finalize",
    N: ["mfaPendingCredential", "phoneVerificationInfo"],
    A: pj,
    G: P,
    B: !0,
    Na: !0
  }, Ij = {
    endpoint: "getAccountInfo"
  }, jj = {
    endpoint: "getOobConfirmationCode",
    N: ["requestType"],
    A: function (a) {
      if ("EMAIL_SIGNIN" != a.requestType) throw new t("internal-error");
      Zi(a);
    },
    Z: "email",
    B: !0
  }, kj = {
    endpoint: "getOobConfirmationCode",
    N: ["idToken", "requestType"],
    A: function (a) {
      if ("VERIFY_EMAIL" != a.requestType) throw new t("internal-error");
    },
    Z: "email",
    B: !0
  }, lj = {
    endpoint: "getOobConfirmationCode",
    N: ["idToken", "newEmail", "requestType"],
    A: function (a) {
      if ("VERIFY_AND_CHANGE_EMAIL" != a.requestType) throw new t("internal-error");
    },
    Z: "email",
    B: !0
  }, ij = {
    endpoint: "getOobConfirmationCode",
    N: ["requestType"],
    A: function (a) {
      if ("PASSWORD_RESET" != a.requestType) throw new t("internal-error");
      Zi(a);
    },
    Z: "email",
    B: !0
  }, dj = {
    lb: !0,
    endpoint: "getProjectConfig",
    Ub: "GET"
  }, Jj = {
    lb: !0,
    endpoint: "getRecaptchaParam",
    Ub: "GET",
    G: function (a) {
      if (!a.recaptchaSiteKey) throw new t("internal-error");
    }
  }, Bj = {
    endpoint: "resetPassword",
    A: Aj,
    Z: "email",
    B: !0
  }, mj = {
    endpoint: "sendVerificationCode",
    N: ["phoneNumber", "recaptchaToken"],
    Z: "sessionInfo",
    B: !0
  }, gj = {
    endpoint: "setAccountInfo",
    N: ["idToken"],
    A: $i,
    V: !0
  }, ch = {
    endpoint: "setAccountInfo",
    N: ["idToken"],
    A: function (a) {
      $i(a);
      if (!a.password) throw new t("weak-password");
    },
    G: P,
    V: !0
  }, fj = {
    endpoint: "signupNewUser",
    G: P,
    V: !0,
    B: !0
  }, oj = {
    endpoint: "accounts/mfaEnrollment:start",
    N: ["idToken", "phoneEnrollmentInfo"],
    A: function (a) {
      if (!a.phoneEnrollmentInfo) throw new t("internal-error");
      if (!a.phoneEnrollmentInfo.phoneNumber) throw new t("missing-phone-number");
      if (!a.phoneEnrollmentInfo.recaptchaToken) throw new t("missing-app-credential");
    },
    G: function (a) {
      if (!a.phoneSessionInfo || !a.phoneSessionInfo.sessionInfo) throw new t("internal-error");
    },
    B: !0,
    Na: !0
  }, qj = {
    endpoint: "accounts/mfaSignIn:start",
    N: ["mfaPendingCredential", "mfaEnrollmentId", "phoneSignInInfo"],
    A: function (a) {
      if (!a.phoneSignInInfo || !a.phoneSignInInfo.recaptchaToken) throw new t("missing-app-credential");
    },
    G: function (a) {
      if (!a.phoneResponseInfo || !a.phoneResponseInfo.sessionInfo) throw new t("internal-error");
    },
    B: !0,
    Na: !0
  }, xj = {
    endpoint: "verifyAssertion",
    A: tj,
    Ya: uj,
    G: vj,
    V: !0,
    B: !0
  }, zj = {
    endpoint: "verifyAssertion",
    A: tj,
    Ya: uj,
    G: function (a) {
      if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage) throw new t("user-not-found");
      if (a.errorMessage) throw wj(a.errorMessage);
      P(a);
    },
    V: !0,
    B: !0
  }, yj = {
    endpoint: "verifyAssertion",
    A: function (a) {
      tj(a);
      if (!a.idToken) throw new t("internal-error");
    },
    Ya: uj,
    G: vj,
    V: !0
  }, Kj = {
    endpoint: "verifyCustomToken",
    A: function (a) {
      if (!a.token) throw new t("invalid-custom-token");
    },
    G: P,
    V: !0,
    B: !0
  }, ah = {
    endpoint: "verifyPassword",
    A: function (a) {
      Zi(a);
      if (!a.password) throw new t("wrong-password");
    },
    G: P,
    V: !0,
    B: !0
  }, nj = {
    endpoint: "verifyPhoneNumber",
    A: ej,
    G: P,
    B: !0
  }, ih = {
    endpoint: "verifyPhoneNumber",
    A: function (a) {
      if (!a.idToken) throw new t("internal-error");
      ej(a);
    },
    G: function (a) {
      if (a.temporaryProof) throw (a.code = "credential-already-in-use", zh(a));
      P(a);
    }
  }, jh = {
    Hb: {
      USER_NOT_FOUND: "user-not-found"
    },
    endpoint: "verifyPhoneNumber",
    A: ej,
    G: P,
    B: !0
  }, Lj = {
    endpoint: "accounts/mfaEnrollment:withdraw",
    N: ["idToken", "mfaEnrollmentId"],
    G: function (a) {
      if (!!a[Dg] ^ !!a.refreshToken) throw new t("internal-error");
    },
    B: !0,
    Na: !0
  };
  function O(a, b, c) {
    if (!mf(c, b.N)) return F(new t("internal-error"));
    var d = !!b.Na, e = b.Ub || "POST", f;
    return E(c).then(b.A).then(function () {
      b.V && (c.returnSecureToken = !0);
      b.B && a.b && "undefined" === typeof c.tenantId && (c.tenantId = a.b);
      return d ? Yi(a, a.i, b.endpoint, e, c, b.Hb, b.lb || !1) : Yi(a, a.h, b.endpoint, e, c, b.Hb, b.lb || !1);
    }).then(function (g) {
      f = g;
      return b.Ya ? b.Ya(c, f) : f;
    }).then(b.G).then(function () {
      if (!b.Z) return f;
      if (!((b.Z in f))) throw new t("internal-error");
      return f[b.Z];
    });
  }
  function wj(a) {
    return Xi({
      error: {
        errors: [{
          message: a
        }],
        code: 400,
        message: a
      }
    });
  }
  function Xi(a, b) {
    var c = (a.error && a.error.errors && a.error.errors[0] || ({})).reason || "";
    var d = {
      keyInvalid: "invalid-api-key",
      ipRefererBlocked: "app-not-authorized"
    };
    if (c = d[c] ? new t(d[c]) : null) return c;
    c = a.error && a.error.message || "";
    d = {
      INVALID_CUSTOM_TOKEN: "invalid-custom-token",
      CREDENTIAL_MISMATCH: "custom-token-mismatch",
      MISSING_CUSTOM_TOKEN: "internal-error",
      INVALID_IDENTIFIER: "invalid-email",
      MISSING_CONTINUE_URI: "internal-error",
      INVALID_EMAIL: "invalid-email",
      INVALID_PASSWORD: "wrong-password",
      USER_DISABLED: "user-disabled",
      MISSING_PASSWORD: "internal-error",
      EMAIL_EXISTS: "email-already-in-use",
      PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
      INVALID_IDP_RESPONSE: "invalid-credential",
      INVALID_PENDING_TOKEN: "invalid-credential",
      FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
      MISSING_OR_INVALID_NONCE: "missing-or-invalid-nonce",
      INVALID_MESSAGE_PAYLOAD: "invalid-message-payload",
      INVALID_RECIPIENT_EMAIL: "invalid-recipient-email",
      INVALID_SENDER: "invalid-sender",
      EMAIL_NOT_FOUND: "user-not-found",
      RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
      EXPIRED_OOB_CODE: "expired-action-code",
      INVALID_OOB_CODE: "invalid-action-code",
      MISSING_OOB_CODE: "internal-error",
      INVALID_PROVIDER_ID: "invalid-provider-id",
      CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
      INVALID_ID_TOKEN: "invalid-user-token",
      TOKEN_EXPIRED: "user-token-expired",
      USER_NOT_FOUND: "user-token-expired",
      CORS_UNSUPPORTED: "cors-unsupported",
      DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated",
      INVALID_APP_ID: "invalid-app-id",
      TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
      WEAK_PASSWORD: "weak-password",
      OPERATION_NOT_ALLOWED: "operation-not-allowed",
      USER_CANCELLED: "user-cancelled",
      CAPTCHA_CHECK_FAILED: "captcha-check-failed",
      INVALID_APP_CREDENTIAL: "invalid-app-credential",
      INVALID_CODE: "invalid-verification-code",
      INVALID_PHONE_NUMBER: "invalid-phone-number",
      INVALID_SESSION_INFO: "invalid-verification-id",
      INVALID_TEMPORARY_PROOF: "invalid-credential",
      MISSING_APP_CREDENTIAL: "missing-app-credential",
      MISSING_CODE: "missing-verification-code",
      MISSING_PHONE_NUMBER: "missing-phone-number",
      MISSING_SESSION_INFO: "missing-verification-id",
      QUOTA_EXCEEDED: "quota-exceeded",
      SESSION_EXPIRED: "code-expired",
      REJECTED_CREDENTIAL: "rejected-credential",
      INVALID_CONTINUE_URI: "invalid-continue-uri",
      MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
      MISSING_IOS_BUNDLE_ID: "missing-ios-bundle-id",
      UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
      INVALID_DYNAMIC_LINK_DOMAIN: "invalid-dynamic-link-domain",
      INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
      INVALID_CERT_HASH: "invalid-cert-hash",
      UNSUPPORTED_TENANT_OPERATION: "unsupported-tenant-operation",
      INVALID_TENANT_ID: "invalid-tenant-id",
      TENANT_ID_MISMATCH: "tenant-id-mismatch",
      ADMIN_ONLY_OPERATION: "admin-restricted-operation",
      INVALID_MFA_PENDING_CREDENTIAL: "invalid-multi-factor-session",
      MFA_ENROLLMENT_NOT_FOUND: "multi-factor-info-not-found",
      MISSING_MFA_PENDING_CREDENTIAL: "missing-multi-factor-session",
      MISSING_MFA_ENROLLMENT_ID: "missing-multi-factor-info",
      EMAIL_CHANGE_NEEDS_VERIFICATION: "email-change-needs-verification",
      SECOND_FACTOR_EXISTS: "second-factor-already-in-use",
      SECOND_FACTOR_LIMIT_EXCEEDED: "maximum-second-factor-count-exceeded",
      UNSUPPORTED_FIRST_FACTOR: "unsupported-first-factor",
      UNVERIFIED_EMAIL: "unverified-email"
    };
    z(d, b || ({}));
    b = (b = c.match(/^[^\s]+\s*:\s*([\s\S]*)$/)) && 1 < b.length ? b[1] : void 0;
    for (var e in d) if (0 === c.indexOf(e)) return new t(d[e], b);
    !b && a && (b = Ue(a));
    return new t("internal-error", b);
  }
  ;
  function Mj(a) {
    this.b = a;
    this.a = null;
    this.rb = Nj(this);
  }
  function Nj(a) {
    return Oj().then(function () {
      return new D(function (b, c) {
        L("gapi.iframes.getContext")().open({
          where: document.body,
          url: a.b,
          messageHandlersFilter: L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),
          attributes: {
            style: {
              position: "absolute",
              top: "-100px",
              width: "1px",
              height: "1px"
            }
          },
          dontclear: !0
        }, function (d) {
          function e() {
            clearTimeout(f);
            b();
          }
          a.a = d;
          a.a.restyle({
            setHideOnLeave: !1
          });
          var f = setTimeout(function () {
            c(Error("Network Error"));
          }, Pj.get());
          d.ping(e).then(e, function () {
            c(Error("Network Error"));
          });
        });
      });
    });
  }
  function Qj(a, b) {
    return a.rb.then(function () {
      return new D(function (c) {
        a.a.send(b.type, b, c, L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
      });
    });
  }
  function Rj(a, b) {
    a.rb.then(function () {
      a.a.register("authEvent", b, L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
    });
  }
  var Sj = new qb(rb, "https://apis.google.com/js/api.js?onload=%{onload}"), Tj = new Ze(3E4, 6E4), Pj = new Ze(5E3, 15E3), Uj = null;
  function Oj() {
    return Uj ? Uj : Uj = new D(function (a, b) {
      function c() {
        Ye();
        L("gapi.load")("gapi.iframes", {
          callback: a,
          ontimeout: function () {
            Ye();
            b(Error("Network Error"));
          },
          timeout: Tj.get()
        });
      }
      if (L("gapi.iframes.Iframe")) a(); else if (L("gapi.load")) c(); else {
        var d = "__iframefcb" + Math.floor(1E6 * Math.random()).toString();
        l[d] = function () {
          L("gapi.load") ? c() : b(Error("Network Error"));
        };
        d = zb(Sj, {
          onload: d
        });
        E(Bi(d)).o(function () {
          b(Error("Network Error"));
        });
      }
    }).o(function (a) {
      Uj = null;
      throw a;
    });
  }
  ;
  function Vj(a, b, c, d) {
    this.l = a;
    this.h = b;
    this.i = c;
    this.g = d;
    this.f = null;
    this.g ? (a = J(this.g.url), a = ce(a.c, a.a, a.g, "/emulator/auth/iframe")) : a = ce("https", this.l, null, "/__/auth/iframe");
    this.a = a;
    I(this.a, "apiKey", this.h);
    I(this.a, "appName", this.i);
    this.b = null;
    this.c = [];
  }
  Vj.prototype.toString = function () {
    this.f ? I(this.a, "v", this.f) : ie(this.a.b, "v");
    this.b ? I(this.a, "eid", this.b) : ie(this.a.b, "eid");
    this.c.length ? I(this.a, "fw", this.c.join(",")) : ie(this.a.b, "fw");
    return this.a.toString();
  };
  function Wj(a, b, c, d, e, f) {
    this.u = a;
    this.s = b;
    this.c = c;
    this.m = d;
    this.v = f;
    this.i = this.g = this.l = null;
    this.a = e;
    this.h = this.f = null;
  }
  Wj.prototype.yb = function (a) {
    this.h = a;
    return this;
  };
  Wj.prototype.toString = function () {
    if (this.v) {
      var a = J(this.v.url);
      a = ce(a.c, a.a, a.g, "/emulator/auth/handler");
    } else a = ce("https", this.u, null, "/__/auth/handler");
    I(a, "apiKey", this.s);
    I(a, "appName", this.c);
    I(a, "authType", this.m);
    if (this.a.isOAuthProvider) {
      var b = this.a;
      try {
        var c = _firebaseAppDefault.default.app(this.c).auth().la();
      } catch (h) {
        c = null;
      }
      b.ob = c;
      I(a, "providerId", this.a.providerId);
      c = this.a;
      b = Ve(c.Ib);
      for (var d in b) b[d] = b[d].toString();
      d = c.Qc;
      b = nb(b);
      for (var e = 0; e < d.length; e++) {
        var f = d[e];
        (f in b) && delete b[f];
      }
      c.pb && c.ob && !b[c.pb] && (b[c.pb] = c.ob);
      mb(b) || I(a, "customParameters", Ue(b));
    }
    "function" === typeof this.a.Qb && (c = this.a.Qb(), c.length && I(a, "scopes", c.join(",")));
    this.l ? I(a, "redirectUrl", this.l) : ie(a.b, "redirectUrl");
    this.g ? I(a, "eventId", this.g) : ie(a.b, "eventId");
    this.i ? I(a, "v", this.i) : ie(a.b, "v");
    if (this.b) for (var g in this.b) this.b.hasOwnProperty(g) && !be(a, g) && I(a, g, this.b[g]);
    this.h ? I(a, "tid", this.h) : ie(a.b, "tid");
    this.f ? I(a, "eid", this.f) : ie(a.b, "eid");
    g = Xj(this.c);
    g.length && I(a, "fw", g.join(","));
    return a.toString();
  };
  function Xj(a) {
    try {
      return _firebaseAppDefault.default.app(a).auth().Ga();
    } catch (b) {
      return [];
    }
  }
  function Yj(a, b, c, d, e, f) {
    this.s = a;
    this.g = b;
    this.b = c;
    this.f = f;
    this.c = d || null;
    this.i = e || null;
    this.l = this.u = this.C = null;
    this.h = [];
    this.m = this.a = null;
  }
  function Zj(a) {
    var b = re();
    return cj(a).then(function (c) {
      a: {
        var d = J(b), e = d.c;
        d = d.a;
        for (var f = 0; f < c.length; f++) {
          var g = c[f];
          var h = d;
          var m = e;
          0 == g.indexOf("chrome-extension://") ? h = J(g).a == h && "chrome-extension" == m : "http" != m && "https" != m ? h = !1 : Ce.test(g) ? h = h == g : (g = g.split(".").join("\\."), h = new RegExp("^(.+\\." + g + "|" + g + ")$", "i").test(h));
          if (h) {
            c = !0;
            break a;
          }
        }
        c = !1;
      }
      if (!c) throw new xh(re());
    });
  }
  function ak(a) {
    if (a.m) return a.m;
    a.m = Ee().then(function () {
      if (!a.u) {
        var b = a.c, c = a.i, d = Xj(a.b), e = new Vj(a.s, a.g, a.b, a.f);
        e.f = b;
        e.b = c;
        e.c = Za(d || []);
        a.u = e.toString();
      }
      a.v = new Mj(a.u);
      bk(a);
    });
    return a.m;
  }
  k = Yj.prototype;
  k.Ob = function (a, b, c) {
    var d = new t("popup-closed-by-user"), e = new t("web-storage-unsupported"), f = this, g = !1;
    return this.ma().then(function () {
      ck(f).then(function (h) {
        h || (a && ye(a), b(e), g = !0);
      });
    }).o(function () {}).then(function () {
      if (!g) return Be(a);
    }).then(function () {
      if (!g) return Fd(c).then(function () {
        b(d);
      });
    });
  };
  k.Xb = function () {
    var a = K();
    return !Te(a) && !Xe(a);
  };
  k.Tb = function () {
    return !1;
  };
  k.Mb = function (a, b, c, d, e, f, g, h) {
    if (!a) return F(new t("popup-blocked"));
    if (g && !Te()) return (this.ma().o(function (p) {
      ye(a);
      e(p);
    }), d(), E());
    this.a || (this.a = Zj(dk(this)));
    var m = this;
    return this.a.then(function () {
      var p = m.ma().o(function (v) {
        ye(a);
        e(v);
        throw v;
      });
      d();
      return p;
    }).then(function () {
      rh(c);
      if (!g) {
        var p = ek(m.s, m.g, m.b, b, c, null, f, m.c, void 0, m.i, h, m.f);
        se(p, a);
      }
    }).o(function (p) {
      "auth/network-request-failed" == p.code && (m.a = null);
      throw p;
    });
  };
  function dk(a) {
    a.l || (a.C = a.c ? Oe(a.c, Xj(a.b)) : null, a.l = new Ii(a.g, Ca(a.i), a.C), a.f && Pi(a.l, a.f));
    return a.l;
  }
  k.Nb = function (a, b, c, d) {
    this.a || (this.a = Zj(dk(this)));
    var e = this;
    return this.a.then(function () {
      rh(b);
      var f = ek(e.s, e.g, e.b, a, b, re(), c, e.c, void 0, e.i, d, e.f);
      se(f);
    }).o(function (f) {
      "auth/network-request-failed" == f.code && (e.a = null);
      throw f;
    });
  };
  k.ma = function () {
    var a = this;
    return ak(this).then(function () {
      return a.v.rb;
    }).o(function () {
      a.a = null;
      throw new t("network-request-failed");
    });
  };
  k.$b = function () {
    return !0;
  };
  function ek(a, b, c, d, e, f, g, h, m, p, v, B) {
    a = new Wj(a, b, c, d, e, B);
    a.l = f;
    a.g = g;
    a.i = h;
    a.b = nb(m || null);
    a.f = p;
    return a.yb(v).toString();
  }
  function bk(a) {
    if (!a.v) throw Error("IfcHandler must be initialized!");
    Rj(a.v, function (b) {
      var c = {};
      if (b && b.authEvent) {
        var d = !1;
        b = th(b.authEvent);
        for (c = 0; c < a.h.length; c++) d = a.h[c](b) || d;
        c = {};
        c.status = d ? "ACK" : "ERROR";
        return E(c);
      }
      c.status = "ERROR";
      return E(c);
    });
  }
  function ck(a) {
    var b = {
      type: "webStorageSupport"
    };
    return ak(a).then(function () {
      return Qj(a.v, b);
    }).then(function (c) {
      if (c && c.length && "undefined" !== typeof c[0].webStorageSupport) return c[0].webStorageSupport;
      throw Error();
    });
  }
  k.Ea = function (a) {
    this.h.push(a);
  };
  k.Sa = function (a) {
    Xa(this.h, function (b) {
      return b == a;
    });
  };
  function fk(a) {
    this.a = a || _firebaseAppDefault.default.INTERNAL.reactNative && _firebaseAppDefault.default.INTERNAL.reactNative.AsyncStorage;
    if (!this.a) throw new t("internal-error", "The React Native compatibility library was not found.");
    this.type = "asyncStorage";
  }
  k = fk.prototype;
  k.get = function (a) {
    return E(this.a.getItem(a)).then(function (b) {
      return b && We(b);
    });
  };
  k.set = function (a, b) {
    return E(this.a.setItem(a, Ue(b)));
  };
  k.U = function (a) {
    return E(this.a.removeItem(a));
  };
  k.ca = function () {};
  k.ia = function () {};
  function gk(a) {
    this.b = a;
    this.a = {};
    this.f = q(this.c, this);
  }
  var hk = [];
  function ik() {
    var a = Je() ? self : null;
    w(hk, function (c) {
      c.b == a && (b = c);
    });
    if (!b) {
      var b = new gk(a);
      hk.push(b);
    }
    return b;
  }
  gk.prototype.c = function (a) {
    var b = a.data.eventType, c = a.data.eventId, d = this.a[b];
    if (d && 0 < d.length) {
      a.ports[0].postMessage({
        status: "ack",
        eventId: c,
        eventType: b,
        response: null
      });
      var e = [];
      w(d, function (f) {
        e.push(E().then(function () {
          return f(a.origin, a.data.data);
        }));
      });
      Jc(e).then(function (f) {
        var g = [];
        w(f, function (h) {
          g.push({
            fulfilled: h.Pb,
            value: h.value,
            reason: h.reason ? h.reason.message : void 0
          });
        });
        w(g, function (h) {
          for (var m in h) "undefined" === typeof h[m] && delete h[m];
        });
        a.ports[0].postMessage({
          status: "done",
          eventId: c,
          eventType: b,
          response: g
        });
      });
    }
  };
  function jk(a, b, c) {
    mb(a.a) && a.b.addEventListener("message", a.f);
    "undefined" === typeof a.a[b] && (a.a[b] = []);
    a.a[b].push(c);
  }
  ;
  function kk(a) {
    this.a = a;
  }
  kk.prototype.postMessage = function (a, b) {
    this.a.postMessage(a, b);
  };
  function lk(a) {
    this.c = a;
    this.b = !1;
    this.a = [];
  }
  function mk(a, b, c, d) {
    var e, f = c || ({}), g, h, m, p = null;
    if (a.b) return F(Error("connection_unavailable"));
    var v = d ? 800 : 50, B = "undefined" !== typeof MessageChannel ? new MessageChannel() : null;
    return new D(function (A, Q) {
      B ? (e = Math.floor(Math.random() * Math.pow(10, 20)).toString(), B.port1.start(), h = setTimeout(function () {
        Q(Error("unsupported_event"));
      }, v), g = function (ya) {
        ya.data.eventId === e && ("ack" === ya.data.status ? (clearTimeout(h), m = setTimeout(function () {
          Q(Error("timeout"));
        }, 3E3)) : "done" === ya.data.status ? (clearTimeout(m), "undefined" !== typeof ya.data.response ? A(ya.data.response) : Q(Error("unknown_error"))) : (clearTimeout(h), clearTimeout(m), Q(Error("invalid_response"))));
      }, p = {
        messageChannel: B,
        onMessage: g
      }, a.a.push(p), B.port1.addEventListener("message", g), a.c.postMessage({
        eventType: b,
        eventId: e,
        data: f
      }, [B.port2])) : Q(Error("connection_unavailable"));
    }).then(function (A) {
      nk(a, p);
      return A;
    }).o(function (A) {
      nk(a, p);
      throw A;
    });
  }
  function nk(a, b) {
    if (b) {
      var c = b.messageChannel, d = b.onMessage;
      c && (c.port1.removeEventListener("message", d), c.port1.close());
      Xa(a.a, function (e) {
        return e == b;
      });
    }
  }
  lk.prototype.close = function () {
    for (; 0 < this.a.length; ) nk(this, this.a[0]);
    this.b = !0;
  };
  function ok() {
    if (!pk()) throw new t("web-storage-unsupported");
    this.c = {};
    this.a = [];
    this.b = 0;
    this.m = l.indexedDB;
    this.type = "indexedDB";
    this.g = this.v = this.f = this.l = null;
    this.s = !1;
    this.h = null;
    var a = this;
    Je() && self ? (this.v = ik(), jk(this.v, "keyChanged", function (b, c) {
      return qk(a).then(function (d) {
        0 < d.length && w(a.a, function (e) {
          e(d);
        });
        return {
          keyProcessed: Va(d, c.key)
        };
      });
    }), jk(this.v, "ping", function () {
      return E(["keyChanged"]);
    })) : ef().then(function (b) {
      if (a.h = b) (a.g = new lk(new kk(b)), mk(a.g, "ping", null, !0).then(function (c) {
        c[0].fulfilled && Va(c[0].value, "keyChanged") && (a.s = !0);
      }).o(function () {}));
    });
  }
  var rk;
  function sk(a) {
    return new D(function (b, c) {
      var d = a.m.deleteDatabase("firebaseLocalStorageDb");
      d.onsuccess = function () {
        b();
      };
      d.onerror = function (e) {
        c(Error(e.target.error));
      };
    });
  }
  function tk(a) {
    return new D(function (b, c) {
      var d = a.m.open("firebaseLocalStorageDb", 1);
      d.onerror = function (e) {
        try {
          e.preventDefault();
        } catch (f) {}
        c(Error(e.target.error));
      };
      d.onupgradeneeded = function (e) {
        e = e.target.result;
        try {
          e.createObjectStore("firebaseLocalStorage", {
            keyPath: "fbase_key"
          });
        } catch (f) {
          c(f);
        }
      };
      d.onsuccess = function (e) {
        e = e.target.result;
        e.objectStoreNames.contains("firebaseLocalStorage") ? b(e) : sk(a).then(function () {
          return tk(a);
        }).then(function (f) {
          b(f);
        }).o(function (f) {
          c(f);
        });
      };
    });
  }
  function uk(a) {
    a.i || (a.i = tk(a));
    return a.i;
  }
  function vk(a, b) {
    function c(e, f) {
      uk(a).then(b).then(e).o(function (g) {
        if (3 < ++d) f(g); else return uk(a).then(function (h) {
          h.close();
          a.i = void 0;
          return c(e, f);
        }).o(function (h) {
          f(h);
        });
      });
    }
    var d = 0;
    return new D(c);
  }
  function pk() {
    try {
      return !!l.indexedDB;
    } catch (a) {
      return !1;
    }
  }
  function wk(a) {
    return a.objectStore("firebaseLocalStorage");
  }
  function xk(a, b) {
    return a.transaction(["firebaseLocalStorage"], b ? "readwrite" : "readonly");
  }
  function yk(a) {
    return new D(function (b, c) {
      a.onsuccess = function (d) {
        d && d.target ? b(d.target.result) : b();
      };
      a.onerror = function (d) {
        c(d.target.error);
      };
    });
  }
  k = ok.prototype;
  k.set = function (a, b) {
    var c = this, d = !1;
    return vk(this, function (e) {
      e = wk(xk(e, !0));
      return yk(e.get(a));
    }).then(function (e) {
      return vk(c, function (f) {
        f = wk(xk(f, !0));
        if (e) return (e.value = b, yk(f.put(e)));
        c.b++;
        d = !0;
        var g = {};
        g.fbase_key = a;
        g.value = b;
        return yk(f.add(g));
      });
    }).then(function () {
      c.c[a] = b;
      return zk(c, a);
    }).oa(function () {
      d && c.b--;
    });
  };
  function zk(a, b) {
    return a.g && a.h && df() === a.h ? mk(a.g, "keyChanged", {
      key: b
    }, a.s).then(function () {}).o(function () {}) : E();
  }
  k.get = function (a) {
    return vk(this, function (b) {
      return yk(wk(xk(b, !1)).get(a));
    }).then(function (b) {
      return b && b.value;
    });
  };
  k.U = function (a) {
    var b = this, c = !1;
    return vk(this, function (d) {
      c = !0;
      b.b++;
      return yk(wk(xk(d, !0))["delete"](a));
    }).then(function () {
      delete b.c[a];
      return zk(b, a);
    }).oa(function () {
      c && b.b--;
    });
  };
  function qk(a) {
    return uk(a).then(function (b) {
      var c = wk(xk(b, !1));
      return c.getAll ? yk(c.getAll()) : new D(function (d, e) {
        var f = [], g = c.openCursor();
        g.onsuccess = function (h) {
          (h = h.target.result) ? (f.push(h.value), h["continue"]()) : d(f);
        };
        g.onerror = function (h) {
          e(h.target.error);
        };
      });
    }).then(function (b) {
      var c = {}, d = [];
      if (0 == a.b) {
        for (d = 0; d < b.length; d++) c[b[d].fbase_key] = b[d].value;
        d = te(a.c, c);
        a.c = c;
      }
      return d;
    });
  }
  k.ca = function (a) {
    0 == this.a.length && Ak(this);
    this.a.push(a);
  };
  k.ia = function (a) {
    Xa(this.a, function (b) {
      return b == a;
    });
    0 == this.a.length && Bk(this);
  };
  function Ak(a) {
    function b() {
      a.f = setTimeout(function () {
        a.l = qk(a).then(function (c) {
          0 < c.length && w(a.a, function (d) {
            d(c);
          });
        }).then(function () {
          b();
        }).o(function (c) {
          "STOP_EVENT" != c.message && b();
        });
      }, 800);
    }
    Bk(a);
    b();
  }
  function Bk(a) {
    a.l && a.l.cancel("STOP_EVENT");
    a.f && (clearTimeout(a.f), a.f = null);
  }
  ;
  function Ck(a) {
    var b = this, c = null;
    this.a = [];
    this.type = "indexedDB";
    this.c = a;
    this.b = E().then(function () {
      if (pk()) {
        var d = Qe(), e = "__sak" + d;
        rk || (rk = new ok());
        c = rk;
        return c.set(e, d).then(function () {
          return c.get(e);
        }).then(function (f) {
          if (f !== d) throw Error("indexedDB not supported!");
          return c.U(e);
        }).then(function () {
          return c;
        }).o(function () {
          return b.c;
        });
      }
      return b.c;
    }).then(function (d) {
      b.type = d.type;
      d.ca(function (e) {
        w(b.a, function (f) {
          f(e);
        });
      });
      return d;
    });
  }
  k = Ck.prototype;
  k.get = function (a) {
    return this.b.then(function (b) {
      return b.get(a);
    });
  };
  k.set = function (a, b) {
    return this.b.then(function (c) {
      return c.set(a, b);
    });
  };
  k.U = function (a) {
    return this.b.then(function (b) {
      return b.U(a);
    });
  };
  k.ca = function (a) {
    this.a.push(a);
  };
  k.ia = function (a) {
    Xa(this.a, function (b) {
      return b == a;
    });
  };
  function Dk() {
    this.a = {};
    this.type = "inMemory";
  }
  k = Dk.prototype;
  k.get = function (a) {
    return E(this.a[a]);
  };
  k.set = function (a, b) {
    this.a[a] = b;
    return E();
  };
  k.U = function (a) {
    delete this.a[a];
    return E();
  };
  k.ca = function () {};
  k.ia = function () {};
  function Ek() {
    if (!Fk()) {
      if ("Node" == Ke()) throw new t("internal-error", "The LocalStorage compatibility library was not found.");
      throw new t("web-storage-unsupported");
    }
    this.a = Gk() || _firebaseAppDefault.default.INTERNAL.node.localStorage;
    this.type = "localStorage";
  }
  function Gk() {
    try {
      var a = l.localStorage, b = Qe();
      a && (a.setItem(b, "1"), a.removeItem(b));
      return a;
    } catch (c) {
      return null;
    }
  }
  function Fk() {
    var a = "Node" == Ke();
    a = Gk() || a && _firebaseAppDefault.default.INTERNAL.node && _firebaseAppDefault.default.INTERNAL.node.localStorage;
    if (!a) return !1;
    try {
      return (a.setItem("__sak", "1"), a.removeItem("__sak"), !0);
    } catch (b) {
      return !1;
    }
  }
  k = Ek.prototype;
  k.get = function (a) {
    var b = this;
    return E().then(function () {
      var c = b.a.getItem(a);
      return We(c);
    });
  };
  k.set = function (a, b) {
    var c = this;
    return E().then(function () {
      var d = Ue(b);
      null === d ? c.U(a) : c.a.setItem(a, d);
    });
  };
  k.U = function (a) {
    var b = this;
    return E().then(function () {
      b.a.removeItem(a);
    });
  };
  k.ca = function (a) {
    l.window && nd(l.window, "storage", a);
  };
  k.ia = function (a) {
    l.window && xd(l.window, "storage", a);
  };
  function Hk() {
    this.type = "nullStorage";
  }
  k = Hk.prototype;
  k.get = function () {
    return E(null);
  };
  k.set = function () {
    return E();
  };
  k.U = function () {
    return E();
  };
  k.ca = function () {};
  k.ia = function () {};
  function Ik() {
    if (!Jk()) {
      if ("Node" == Ke()) throw new t("internal-error", "The SessionStorage compatibility library was not found.");
      throw new t("web-storage-unsupported");
    }
    this.a = Kk() || _firebaseAppDefault.default.INTERNAL.node.sessionStorage;
    this.type = "sessionStorage";
  }
  function Kk() {
    try {
      var a = l.sessionStorage, b = Qe();
      a && (a.setItem(b, "1"), a.removeItem(b));
      return a;
    } catch (c) {
      return null;
    }
  }
  function Jk() {
    var a = "Node" == Ke();
    a = Kk() || a && _firebaseAppDefault.default.INTERNAL.node && _firebaseAppDefault.default.INTERNAL.node.sessionStorage;
    if (!a) return !1;
    try {
      return (a.setItem("__sak", "1"), a.removeItem("__sak"), !0);
    } catch (b) {
      return !1;
    }
  }
  k = Ik.prototype;
  k.get = function (a) {
    var b = this;
    return E().then(function () {
      var c = b.a.getItem(a);
      return We(c);
    });
  };
  k.set = function (a, b) {
    var c = this;
    return E().then(function () {
      var d = Ue(b);
      null === d ? c.U(a) : c.a.setItem(a, d);
    });
  };
  k.U = function (a) {
    var b = this;
    return E().then(function () {
      b.a.removeItem(a);
    });
  };
  k.ca = function () {};
  k.ia = function () {};
  function Lk() {
    var a = {};
    a.Browser = Mk;
    a.Node = Nk;
    a.ReactNative = Ok;
    a.Worker = Pk;
    this.a = a[Ke()];
  }
  var Qk, Mk = {
    F: Ek,
    bb: Ik
  }, Nk = {
    F: Ek,
    bb: Ik
  }, Ok = {
    F: fk,
    bb: Hk
  }, Pk = {
    F: Ek,
    bb: Hk
  };
  var Rk = {
    rd: "local",
    NONE: "none",
    td: "session"
  };
  function Sk(a) {
    var b = new t("invalid-persistence-type"), c = new t("unsupported-persistence-type");
    a: {
      for (d in Rk) if (Rk[d] == a) {
        var d = !0;
        break a;
      }
      d = !1;
    }
    if (!d || "string" !== typeof a) throw b;
    switch (Ke()) {
      case "ReactNative":
        if ("session" === a) throw c;
        break;
      case "Node":
        if ("none" !== a) throw c;
        break;
      case "Worker":
        if ("session" === a || !pk() && "none" !== a) throw c;
        break;
      default:
        if (!Pe() && "none" !== a) throw c;
    }
  }
  function Tk() {
    var a = !Xe(K()) && Ie() ? !0 : !1, b = Te(), c = Pe();
    this.m = a;
    this.h = b;
    this.l = c;
    this.a = {};
    Qk || (Qk = new Lk());
    a = Qk;
    try {
      this.g = !qe() && cf() || !l.indexedDB ? new a.a.F() : new Ck(Je() ? new Dk() : new a.a.F());
    } catch (d) {
      (this.g = new Dk(), this.h = !0);
    }
    try {
      this.i = new a.a.bb();
    } catch (d) {
      this.i = new Dk();
    }
    this.v = new Dk();
    this.f = q(this.Yb, this);
    this.b = {};
  }
  var Uk;
  function Vk() {
    Uk || (Uk = new Tk());
    return Uk;
  }
  function Wk(a, b) {
    switch (b) {
      case "session":
        return a.i;
      case "none":
        return a.v;
      default:
        return a.g;
    }
  }
  function Xk(a, b) {
    return "firebase:" + a.name + (b ? ":" + b : "");
  }
  function Yk(a, b, c) {
    var d = Xk(b, c), e = Wk(a, b.F);
    return a.get(b, c).then(function (f) {
      var g = null;
      try {
        g = We(l.localStorage.getItem(d));
      } catch (h) {}
      if (g && !f) return (l.localStorage.removeItem(d), a.set(b, g, c));
      g && f && "localStorage" != e.type && l.localStorage.removeItem(d);
    });
  }
  k = Tk.prototype;
  k.get = function (a, b) {
    return Wk(this, a.F).get(Xk(a, b));
  };
  function Zk(a, b, c) {
    c = Xk(b, c);
    "local" == b.F && (a.b[c] = null);
    return Wk(a, b.F).U(c);
  }
  k.set = function (a, b, c) {
    var d = Xk(a, c), e = this, f = Wk(this, a.F);
    return f.set(d, b).then(function () {
      return f.get(d);
    }).then(function (g) {
      "local" == a.F && (e.b[d] = g);
    });
  };
  k.addListener = function (a, b, c) {
    a = Xk(a, b);
    this.l && (this.b[a] = l.localStorage.getItem(a));
    mb(this.a) && (Wk(this, "local").ca(this.f), this.h || (qe() || !cf()) && l.indexedDB || !this.l || $k(this));
    this.a[a] || (this.a[a] = []);
    this.a[a].push(c);
  };
  k.removeListener = function (a, b, c) {
    a = Xk(a, b);
    this.a[a] && (Xa(this.a[a], function (d) {
      return d == c;
    }), 0 == this.a[a].length && delete this.a[a]);
    mb(this.a) && (Wk(this, "local").ia(this.f), al(this));
  };
  function $k(a) {
    al(a);
    a.c = setInterval(function () {
      for (var b in a.a) {
        var c = l.localStorage.getItem(b), d = a.b[b];
        c != d && (a.b[b] = c, c = new bd({
          type: "storage",
          key: b,
          target: window,
          oldValue: d,
          newValue: c,
          a: !0
        }), a.Yb(c));
      }
    }, 1E3);
  }
  function al(a) {
    a.c && (clearInterval(a.c), a.c = null);
  }
  k.Yb = function (a) {
    if (a && a.g) {
      var b = a.a.key;
      if (null == b) for (var c in this.a) {
        var d = this.b[c];
        "undefined" === typeof d && (d = null);
        var e = l.localStorage.getItem(c);
        e !== d && (this.b[c] = e, this.mb(c));
      } else if (0 == b.indexOf("firebase:") && this.a[b]) {
        "undefined" !== typeof a.a.a ? Wk(this, "local").ia(this.f) : al(this);
        if (this.m) if ((c = l.localStorage.getItem(b), d = a.a.newValue, d !== c)) null !== d ? l.localStorage.setItem(b, d) : l.localStorage.removeItem(b); else if (this.b[b] === d && "undefined" === typeof a.a.a) return;
        var f = this;
        c = function () {
          if ("undefined" !== typeof a.a.a || f.b[b] !== l.localStorage.getItem(b)) (f.b[b] = l.localStorage.getItem(b), f.mb(b));
        };
        Wb && ic && 10 == ic && l.localStorage.getItem(b) !== a.a.newValue && a.a.newValue !== a.a.oldValue ? setTimeout(c, 10) : c();
      }
    } else w(a, q(this.mb, this));
  };
  k.mb = function (a) {
    this.a[a] && w(this.a[a], function (b) {
      b();
    });
  };
  function bl(a) {
    this.a = a;
    this.b = Vk();
  }
  var cl = {
    name: "authEvent",
    F: "local"
  };
  function dl(a) {
    return a.b.get(cl, a.a).then(function (b) {
      return th(b);
    });
  }
  ;
  function el() {
    this.a = Vk();
  }
  ;
  function fl() {
    this.b = -1;
  }
  ;
  function gl(a, b) {
    this.b = hl;
    this.f = l.Uint8Array ? new Uint8Array(this.b) : Array(this.b);
    this.g = this.c = 0;
    this.a = [];
    this.i = a;
    this.h = b;
    this.l = l.Int32Array ? new Int32Array(64) : Array(64);
    void 0 === il && (l.Int32Array ? il = new Int32Array(jl) : il = jl);
    this.reset();
  }
  var il;
  r(gl, fl);
  for (var hl = 64, kl = hl - 1, ll = [], ml = 0; ml < kl; ml++) ll[ml] = 0;
  var nl = Ya(128, ll);
  gl.prototype.reset = function () {
    this.g = this.c = 0;
    this.a = l.Int32Array ? new Int32Array(this.h) : Za(this.h);
  };
  function ol(a) {
    for (var b = a.f, c = a.l, d = 0, e = 0; e < b.length; ) (c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d);
    for (b = 16; 64 > b; b++) {
      e = c[b - 15] | 0;
      d = c[b - 2] | 0;
      var f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0, g = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;
      c[b] = f + g | 0;
    }
    d = a.a[0] | 0;
    e = a.a[1] | 0;
    var h = a.a[2] | 0, m = a.a[3] | 0, p = a.a[4] | 0, v = a.a[5] | 0, B = a.a[6] | 0;
    f = a.a[7] | 0;
    for (b = 0; 64 > b; b++) {
      var A = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & h ^ e & h) | 0;
      g = p & v ^ ~p & B;
      f = f + ((p >>> 6 | p << 26) ^ (p >>> 11 | p << 21) ^ (p >>> 25 | p << 7)) | 0;
      g = g + (il[b] | 0) | 0;
      g = f + (g + (c[b] | 0) | 0) | 0;
      f = B;
      B = v;
      v = p;
      p = m + g | 0;
      m = h;
      h = e;
      e = d;
      d = g + A | 0;
    }
    a.a[0] = a.a[0] + d | 0;
    a.a[1] = a.a[1] + e | 0;
    a.a[2] = a.a[2] + h | 0;
    a.a[3] = a.a[3] + m | 0;
    a.a[4] = a.a[4] + p | 0;
    a.a[5] = a.a[5] + v | 0;
    a.a[6] = a.a[6] + B | 0;
    a.a[7] = a.a[7] + f | 0;
  }
  function pl(a, b, c) {
    void 0 === c && (c = b.length);
    var d = 0, e = a.c;
    if ("string" === typeof b) for (; d < c; ) (a.f[e++] = b.charCodeAt(d++), e == a.b && (ol(a), e = 0)); else if (na(b)) for (; d < c; ) {
      var f = b[d++];
      if (!("number" == typeof f && 0 <= f && 255 >= f && f == (f | 0))) throw Error("message must be a byte array");
      a.f[e++] = f;
      e == a.b && (ol(a), e = 0);
    } else throw Error("message must be string or array");
    a.c = e;
    a.g += c;
  }
  var jl = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
  function ql() {
    gl.call(this, 8, rl);
  }
  r(ql, gl);
  var rl = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
  function sl(a, b, c, d, e, f) {
    this.v = a;
    this.i = b;
    this.l = c;
    this.m = d || null;
    this.u = e || null;
    this.s = f;
    this.h = b + ":" + c;
    this.C = new el();
    this.g = new bl(this.h);
    this.f = null;
    this.b = [];
    this.a = this.c = null;
  }
  function tl(a) {
    return new t("invalid-cordova-configuration", a);
  }
  k = sl.prototype;
  k.ma = function () {
    return this.Ia ? this.Ia : this.Ia = Fe().then(function () {
      if ("function" !== typeof L("universalLinks.subscribe", l)) throw tl("cordova-universal-links-plugin-fix is not installed");
      if ("undefined" === typeof L("BuildInfo.packageName", l)) throw tl("cordova-plugin-buildinfo is not installed");
      if ("function" !== typeof L("cordova.plugins.browsertab.openUrl", l)) throw tl("cordova-plugin-browsertab is not installed");
      if ("function" !== typeof L("cordova.InAppBrowser.open", l)) throw tl("cordova-plugin-inappbrowser is not installed");
    }, function () {
      throw new t("cordova-not-ready");
    });
  };
  function ul() {
    for (var a = 20, b = []; 0 < a; ) (b.push(("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ").charAt(Math.floor(62 * Math.random()))), a--);
    return b.join("");
  }
  function vl(a) {
    var b = new ql();
    pl(b, a);
    a = [];
    var c = 8 * b.g;
    56 > b.c ? pl(b, nl, 56 - b.c) : pl(b, nl, b.b - (b.c - 56));
    for (var d = 63; 56 <= d; d--) (b.f[d] = c & 255, c /= 256);
    ol(b);
    for (d = c = 0; d < b.i; d++) for (var e = 24; 0 <= e; e -= 8) a[c++] = b.a[d] >> e & 255;
    return cg(a);
  }
  k.Ob = function (a, b) {
    b(new t("operation-not-supported-in-this-environment"));
    return E();
  };
  k.Mb = function () {
    return F(new t("operation-not-supported-in-this-environment"));
  };
  k.$b = function () {
    return !1;
  };
  k.Xb = function () {
    return !0;
  };
  k.Tb = function () {
    return !0;
  };
  k.Nb = function (a, b, c, d) {
    if (this.c) return F(new t("redirect-operation-pending"));
    var e = this, f = l.document, g = null, h = null, m = null, p = null;
    return this.c = E().then(function () {
      rh(b);
      return wl(e);
    }).then(function () {
      return xl(e, a, b, c, d);
    }).then(function () {
      return new D(function (v, B) {
        h = function () {
          var A = L("cordova.plugins.browsertab.close", l);
          v();
          "function" === typeof A && A();
          e.a && "function" === typeof e.a.close && (e.a.close(), e.a = null);
          return !1;
        };
        e.Ea(h);
        m = function () {
          g || (g = Fd(2E3).then(function () {
            B(new t("redirect-cancelled-by-user"));
          }));
        };
        p = function () {
          $e() && m();
        };
        f.addEventListener("resume", m, !1);
        K().toLowerCase().match(/android/) || f.addEventListener("visibilitychange", p, !1);
      }).o(function (v) {
        return yl(e).then(function () {
          throw v;
        });
      });
    }).oa(function () {
      m && f.removeEventListener("resume", m, !1);
      p && f.removeEventListener("visibilitychange", p, !1);
      g && g.cancel();
      h && e.Sa(h);
      e.c = null;
    });
  };
  function xl(a, b, c, d, e) {
    var f = ul(), g = new sh(b, d, null, f, new t("no-auth-event"), null, e), h = L("BuildInfo.packageName", l);
    if ("string" !== typeof h) throw new t("invalid-cordova-configuration");
    var m = L("BuildInfo.displayName", l), p = {};
    if (K().toLowerCase().match(/iphone|ipad|ipod/)) p.ibi = h; else if (K().toLowerCase().match(/android/)) p.apn = h; else return F(new t("operation-not-supported-in-this-environment"));
    m && (p.appDisplayName = m);
    f = vl(f);
    p.sessionId = f;
    var v = ek(a.v, a.i, a.l, b, c, null, d, a.m, p, a.u, e, a.s);
    return a.ma().then(function () {
      var B = a.h;
      return a.C.a.set(cl, g.w(), B);
    }).then(function () {
      var B = L("cordova.plugins.browsertab.isAvailable", l);
      if ("function" !== typeof B) throw new t("invalid-cordova-configuration");
      var A = null;
      B(function (Q) {
        if (Q) {
          A = L("cordova.plugins.browsertab.openUrl", l);
          if ("function" !== typeof A) throw new t("invalid-cordova-configuration");
          A(v);
        } else {
          A = L("cordova.InAppBrowser.open", l);
          if ("function" !== typeof A) throw new t("invalid-cordova-configuration");
          Q = K();
          a.a = A(v, Q.match(/(iPad|iPhone|iPod).*OS 7_\d/i) || Q.match(/(iPad|iPhone|iPod).*OS 8_\d/i) ? "_blank" : "_system", "location=yes");
        }
      });
    });
  }
  function zl(a, b) {
    for (var c = 0; c < a.b.length; c++) try {
      a.b[c](b);
    } catch (d) {}
  }
  function wl(a) {
    a.f || (a.f = a.ma().then(function () {
      return new D(function (b) {
        function c(d) {
          b(d);
          a.Sa(c);
          return !1;
        }
        a.Ea(c);
        Al(a);
      });
    }));
    return a.f;
  }
  function yl(a) {
    var b = null;
    return dl(a.g).then(function (c) {
      b = c;
      c = a.g;
      return Zk(c.b, cl, c.a);
    }).then(function () {
      return b;
    });
  }
  function Al(a) {
    function b(g) {
      d = !0;
      e && e.cancel();
      yl(a).then(function (h) {
        var m = c;
        if (h && g && g.url) {
          var p = null;
          m = xg(g.url);
          -1 != m.indexOf("/__/auth/callback") && (p = J(m), p = We(be(p, "firebaseError") || null), p = (p = "object" === typeof p ? Aa(p) : null) ? new sh(h.c, h.b, null, null, p, null, h.T()) : new sh(h.c, h.b, m, h.f, null, null, h.T()));
          m = p || c;
        }
        zl(a, m);
      });
    }
    var c = new sh("unknown", null, null, null, new t("no-auth-event")), d = !1, e = Fd(500).then(function () {
      return yl(a).then(function () {
        d || zl(a, c);
      });
    }), f = l.handleOpenURL;
    l.handleOpenURL = function (g) {
      0 == g.toLowerCase().indexOf(L("BuildInfo.packageName", l).toLowerCase() + "://") && b({
        url: g
      });
      if ("function" === typeof f) try {
        f(g);
      } catch (h) {
        console.error(h);
      }
    };
    vh || (vh = new uh());
    wh(b);
  }
  k.Ea = function (a) {
    this.b.push(a);
    wl(this).o(function (b) {
      "auth/invalid-cordova-configuration" === b.code && (b = new sh("unknown", null, null, null, new t("no-auth-event")), a(b));
    });
  };
  k.Sa = function (a) {
    Xa(this.b, function (b) {
      return b == a;
    });
  };
  function Bl(a) {
    this.a = a;
    this.b = Vk();
  }
  var Cl = {
    name: "pendingRedirect",
    F: "session"
  };
  function Dl(a) {
    return a.b.set(Cl, "pending", a.a);
  }
  function El(a) {
    return Zk(a.b, Cl, a.a);
  }
  function Fl(a) {
    return a.b.get(Cl, a.a).then(function (b) {
      return "pending" == b;
    });
  }
  ;
  function Gl(a, b, c, d) {
    this.i = {};
    this.u = 0;
    this.D = a;
    this.v = b;
    this.m = c;
    this.J = d;
    this.h = [];
    this.f = !1;
    this.l = q(this.s, this);
    this.b = new Hl();
    this.C = new Il();
    this.g = new Bl(Jl(this.v, this.m));
    this.c = {};
    this.c.unknown = this.b;
    this.c.signInViaRedirect = this.b;
    this.c.linkViaRedirect = this.b;
    this.c.reauthViaRedirect = this.b;
    this.c.signInViaPopup = this.C;
    this.c.linkViaPopup = this.C;
    this.c.reauthViaPopup = this.C;
    this.a = Kl(this.D, this.v, this.m, Da, this.J);
  }
  function Kl(a, b, c, d, e) {
    var f = _firebaseAppDefault.default.SDK_VERSION || null;
    return Ge() ? new sl(a, b, c, f, d, e) : new Yj(a, b, c, f, d, e);
  }
  Gl.prototype.reset = function () {
    this.f = !1;
    this.a.Sa(this.l);
    this.a = Kl(this.D, this.v, this.m, null, this.J);
    this.i = {};
  };
  function Ll(a) {
    a.f || (a.f = !0, a.a.Ea(a.l));
    var b = a.a;
    return a.a.ma().o(function (c) {
      a.a == b && a.reset();
      throw c;
    });
  }
  function Ml(a) {
    a.a.Xb() && Ll(a).o(function (b) {
      var c = new sh("unknown", null, null, null, new t("operation-not-supported-in-this-environment"));
      Nl(b) && a.s(c);
    });
    a.a.Tb() || Ol(a.b);
  }
  function Pl(a, b) {
    Va(a.h, b) || a.h.push(b);
    a.f || Fl(a.g).then(function (c) {
      c ? El(a.g).then(function () {
        Ll(a).o(function (d) {
          var e = new sh("unknown", null, null, null, new t("operation-not-supported-in-this-environment"));
          Nl(d) && a.s(e);
        });
      }) : Ml(a);
    }).o(function () {
      Ml(a);
    });
  }
  function Ql(a, b) {
    Xa(a.h, function (c) {
      return c == b;
    });
  }
  Gl.prototype.s = function (a) {
    if (!a) throw new t("invalid-auth-event");
    6E5 <= va() - this.u && (this.i = {}, this.u = 0);
    if (a && a.getUid() && this.i.hasOwnProperty(a.getUid())) return !1;
    for (var b = !1, c = 0; c < this.h.length; c++) {
      var d = this.h[c];
      if (d.Fb(a.c, a.b)) {
        if (b = this.c[a.c]) (b.h(a, d), a && (a.f || a.b) && (this.i[a.getUid()] = !0, this.u = va()));
        b = !0;
        break;
      }
    }
    Ol(this.b);
    return b;
  };
  var Rl = new Ze(2E3, 1E4), Sl = new Ze(3E4, 6E4);
  Gl.prototype.qa = function () {
    return this.b.qa();
  };
  function Tl(a, b, c, d, e, f, g) {
    return a.a.Mb(b, c, d, function () {
      a.f || (a.f = !0, a.a.Ea(a.l));
    }, function () {
      a.reset();
    }, e, f, g);
  }
  function Nl(a) {
    return a && "auth/cordova-not-ready" == a.code ? !0 : !1;
  }
  function Ul(a, b, c, d, e) {
    var f;
    return Dl(a.g).then(function () {
      return a.a.Nb(b, c, d, e).o(function (g) {
        if (Nl(g)) throw new t("operation-not-supported-in-this-environment");
        f = g;
        return El(a.g).then(function () {
          throw f;
        });
      }).then(function () {
        return a.a.$b() ? new D(function () {}) : El(a.g).then(function () {
          return a.qa();
        }).then(function () {}).o(function () {});
      });
    });
  }
  function Vl(a, b, c, d, e) {
    return a.a.Ob(d, function (f) {
      b.na(c, null, f, e);
    }, Rl.get());
  }
  var Wl = {};
  function Jl(a, b, c) {
    a = a + ":" + b;
    c && (a = a + ":" + c.url);
    return a;
  }
  function Xl(a, b, c, d) {
    var e = Jl(b, c, d);
    Wl[e] || (Wl[e] = new Gl(a, b, c, d));
    return Wl[e];
  }
  function Hl() {
    this.b = null;
    this.f = [];
    this.c = [];
    this.a = null;
    this.i = this.g = !1;
  }
  Hl.prototype.reset = function () {
    this.b = null;
    this.a && (this.a.cancel(), this.a = null);
  };
  Hl.prototype.h = function (a, b) {
    if (a) {
      this.reset();
      this.g = !0;
      var c = a.c, d = a.b, e = a.a && "auth/web-storage-unsupported" == a.a.code, f = a.a && "auth/operation-not-supported-in-this-environment" == a.a.code;
      this.i = !(!e && !f);
      "unknown" != c || e || f ? a.a ? (Yl(this, !0, null, a.a), E()) : b.Fa(c, d) ? Zl(this, a, b) : F(new t("invalid-auth-event")) : (Yl(this, !1, null, null), E());
    } else F(new t("invalid-auth-event"));
  };
  function Ol(a) {
    a.g || (a.g = !0, Yl(a, !1, null, null));
  }
  function $l(a) {
    a.g && !a.i && Yl(a, !1, null, null);
  }
  function Zl(a, b, c) {
    c = c.Fa(b.c, b.b);
    var d = b.g, e = b.f, f = b.i, g = b.T(), h = !!b.c.match(/Redirect$/);
    c(d, e, g, f).then(function (m) {
      Yl(a, h, m, null);
    }).o(function (m) {
      Yl(a, h, null, m);
    });
  }
  function am(a, b) {
    a.b = function () {
      return F(b);
    };
    if (a.c.length) for (var c = 0; c < a.c.length; c++) a.c[c](b);
  }
  function bm(a, b) {
    a.b = function () {
      return E(b);
    };
    if (a.f.length) for (var c = 0; c < a.f.length; c++) a.f[c](b);
  }
  function Yl(a, b, c, d) {
    b ? d ? am(a, d) : bm(a, c) : bm(a, {
      user: null
    });
    a.f = [];
    a.c = [];
  }
  Hl.prototype.qa = function () {
    var a = this;
    return new D(function (b, c) {
      a.b ? a.b().then(b, c) : (a.f.push(b), a.c.push(c), cm(a));
    });
  };
  function cm(a) {
    var b = new t("timeout");
    a.a && a.a.cancel();
    a.a = Fd(Sl.get()).then(function () {
      a.b || (a.g = !0, Yl(a, !0, null, b));
    });
  }
  function Il() {}
  Il.prototype.h = function (a, b) {
    if (a) {
      var c = a.c, d = a.b;
      a.a ? (b.na(a.c, null, a.a, a.b), E()) : b.Fa(c, d) ? dm(a, b) : F(new t("invalid-auth-event"));
    } else F(new t("invalid-auth-event"));
  };
  function dm(a, b) {
    var c = a.b, d = a.c;
    b.Fa(d, c)(a.g, a.f, a.T(), a.i).then(function (e) {
      b.na(d, e, null, c);
    }).o(function (e) {
      b.na(d, null, e, c);
    });
  }
  ;
  function em() {
    this.ib = !1;
    Object.defineProperty(this, "appVerificationDisabled", {
      get: function () {
        return this.ib;
      },
      set: function (a) {
        this.ib = a;
      },
      enumerable: !1
    });
  }
  ;
  function fm(a, b) {
    this.a = b;
    M(this, "verificationId", a);
  }
  fm.prototype.confirm = function (a) {
    a = ph(this.verificationId, a);
    return this.a(a);
  };
  function gm(a, b, c, d) {
    return new lh(a).fb(b, c).then(function (e) {
      return new fm(e, d);
    });
  }
  ;
  function hm(a) {
    var b = ig(a);
    if (!(b && b.exp && b.auth_time && b.iat)) throw new t("internal-error", "An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");
    N(this, {
      token: a,
      expirationTime: bf(1E3 * b.exp),
      authTime: bf(1E3 * b.auth_time),
      issuedAtTime: bf(1E3 * b.iat),
      signInProvider: b.firebase && b.firebase.sign_in_provider ? b.firebase.sign_in_provider : null,
      signInSecondFactor: b.firebase && b.firebase.sign_in_second_factor ? b.firebase.sign_in_second_factor : null,
      claims: b
    });
  }
  ;
  function im(a, b, c) {
    var d = b && b[jm];
    if (!d) throw new t("argument-error", "Internal assert: Invalid MultiFactorResolver");
    this.a = a;
    this.f = nb(b);
    this.g = c;
    this.c = new yg(null, d);
    this.b = [];
    var e = this;
    w(b[km] || [], function (f) {
      (f = tf(f)) && e.b.push(f);
    });
    M(this, "auth", this.a);
    M(this, "session", this.c);
    M(this, "hints", this.b);
  }
  var km = "mfaInfo", jm = "mfaPendingCredential";
  im.prototype.Rc = function (a) {
    var b = this;
    return a.sb(this.a.a, this.c).then(function (c) {
      var d = nb(b.f);
      delete d[km];
      delete d[jm];
      z(d, c);
      return b.g(d);
    });
  };
  function lm(a, b, c, d) {
    t.call(this, "multi-factor-auth-required", d, b);
    this.b = new im(a, b, c);
    M(this, "resolver", this.b);
  }
  r(lm, t);
  function mm(a, b, c) {
    if (a && n(a.serverResponse) && "auth/multi-factor-auth-required" === a.code) try {
      return new lm(b, a.serverResponse, c, a.message);
    } catch (d) {}
    return null;
  }
  ;
  function nm() {}
  nm.prototype.sb = function (a, b, c) {
    return b.type == zg ? om(this, a, b, c) : pm(this, a, b);
  };
  function om(a, b, c, d) {
    return c.Ha().then(function (e) {
      e = {
        idToken: e
      };
      "undefined" !== typeof d && (e.displayName = d);
      z(e, {
        phoneVerificationInfo: hh(a.a)
      });
      return O(b, Gj, e);
    });
  }
  function pm(a, b, c) {
    return c.Ha().then(function (d) {
      d = {
        mfaPendingCredential: d
      };
      z(d, {
        phoneVerificationInfo: hh(a.a)
      });
      return O(b, Hj, d);
    });
  }
  function qm(a) {
    M(this, "factorId", a.fa);
    this.a = a;
  }
  r(qm, nm);
  function rm(a) {
    qm.call(this, a);
    if (this.a.fa != lh.PROVIDER_ID) throw new t("argument-error", "firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");
  }
  r(rm, qm);
  function sm(a, b) {
    G.call(this, a);
    for (var c in b) this[c] = b[c];
  }
  r(sm, G);
  function tm(a, b) {
    this.a = a;
    this.b = [];
    this.c = q(this.yc, this);
    nd(this.a, "userReloaded", this.c);
    var c = [];
    b && b.multiFactor && b.multiFactor.enrolledFactors && w(b.multiFactor.enrolledFactors, function (d) {
      var e = null, f = {};
      if (d) {
        d.uid && (f[qf] = d.uid);
        d.displayName && (f[rf] = d.displayName);
        d.enrollmentTime && (f[sf] = new Date(d.enrollmentTime).toISOString());
        d.phoneNumber && (f[pf] = d.phoneNumber);
        try {
          e = new uf(f);
        } catch (g) {}
        d = e;
      } else d = null;
      d && c.push(d);
    });
    um(this, c);
  }
  function vm(a) {
    var b = [];
    w(a.mfaInfo || [], function (c) {
      (c = tf(c)) && b.push(c);
    });
    return b;
  }
  k = tm.prototype;
  k.yc = function (a) {
    um(this, vm(a.hd));
  };
  function um(a, b) {
    a.b = b;
    M(a, "enrolledFactors", b);
  }
  k.Rb = function () {
    return this.a.I().then(function (a) {
      return new yg(a, null);
    });
  };
  k.fc = function (a, b) {
    var c = this, d = this.a.a;
    return this.Rb().then(function (e) {
      return a.sb(d, e, b);
    }).then(function (e) {
      wm(c.a, e);
      return c.a.reload();
    });
  };
  k.bd = function (a) {
    var b = this, c = "string" === typeof a ? a : a.uid, d = this.a.a;
    return this.a.I().then(function (e) {
      return O(d, Lj, {
        idToken: e,
        mfaEnrollmentId: c
      });
    }).then(function (e) {
      var f = Qa(b.b, function (g) {
        return g.uid != c;
      });
      um(b, f);
      wm(b.a, e);
      return b.a.reload().o(function (g) {
        if ("auth/user-token-expired" != g.code) throw g;
      });
    });
  };
  k.w = function () {
    return {
      multiFactor: {
        enrolledFactors: Ra(this.b, function (a) {
          return a.w();
        })
      }
    };
  };
  function xm(a, b, c) {
    this.h = a;
    this.i = b;
    this.g = c;
    this.c = 3E4;
    this.f = 96E4;
    this.b = null;
    this.a = this.c;
    if (this.f < this.c) throw Error("Proactive refresh lower bound greater than upper bound!");
  }
  xm.prototype.start = function () {
    this.a = this.c;
    ym(this, !0);
  };
  function zm(a, b) {
    if (b) return (a.a = a.c, a.g());
    b = a.a;
    a.a *= 2;
    a.a > a.f && (a.a = a.f);
    return b;
  }
  function ym(a, b) {
    a.stop();
    a.b = Fd(zm(a, b)).then(function () {
      return af();
    }).then(function () {
      return a.h();
    }).then(function () {
      ym(a, !0);
    }).o(function (c) {
      a.i(c) && ym(a, !1);
    });
  }
  xm.prototype.stop = function () {
    this.b && (this.b.cancel(), this.b = null);
  };
  function Am(a) {
    this.f = a;
    this.b = this.a = null;
    this.c = Date.now();
  }
  Am.prototype.w = function () {
    return {
      apiKey: this.f.c,
      refreshToken: this.a,
      accessToken: this.b && this.b.toString(),
      expirationTime: this.c
    };
  };
  function Bm(a, b) {
    "undefined" === typeof b && (a.b ? (b = a.b, b = b.a - b.g) : b = 0);
    a.c = Date.now() + 1E3 * b;
  }
  function Cm(a, b) {
    a.b = jg(b[Dg] || "");
    a.a = b.refreshToken;
    b = b.expiresIn;
    Bm(a, "undefined" !== typeof b ? Number(b) : void 0);
  }
  function Dm(a, b) {
    a.b = b.b;
    a.a = b.a;
    a.c = b.c;
  }
  function Em(a, b) {
    return Wi(a.f, b).then(function (c) {
      a.b = jg(c.access_token);
      a.a = c.refresh_token;
      Bm(a, c.expires_in);
      return {
        accessToken: a.b.toString(),
        refreshToken: a.a
      };
    }).o(function (c) {
      "auth/user-token-expired" == c.code && (a.a = null);
      throw c;
    });
  }
  Am.prototype.getToken = function (a) {
    a = !!a;
    return this.b && !this.a ? F(new t("user-token-expired")) : a || !this.b || Date.now() > this.c - 3E4 ? this.a ? Em(this, {
      grant_type: "refresh_token",
      refresh_token: this.a
    }) : E(null) : E({
      accessToken: this.b.toString(),
      refreshToken: this.a
    });
  };
  function Fm(a, b) {
    this.a = a || null;
    this.b = b || null;
    N(this, {
      lastSignInTime: bf(b || null),
      creationTime: bf(a || null)
    });
  }
  function Gm(a) {
    return new Fm(a.a, a.b);
  }
  Fm.prototype.w = function () {
    return {
      lastLoginAt: this.b,
      createdAt: this.a
    };
  };
  function Hm(a, b, c, d, e, f) {
    N(this, {
      uid: a,
      displayName: d || null,
      photoURL: e || null,
      email: c || null,
      phoneNumber: f || null,
      providerId: b
    });
  }
  function Im(a, b, c) {
    this.J = [];
    this.l = a.apiKey;
    this.m = a.appName;
    this.s = a.authDomain || null;
    var d = _firebaseAppDefault.default.SDK_VERSION ? Oe(_firebaseAppDefault.default.SDK_VERSION) : null;
    this.a = new Ii(this.l, Ca(Da), d);
    a.emulatorConfig && Pi(this.a, a.emulatorConfig);
    this.b = new Am(this.a);
    Jm(this, b[Dg]);
    Cm(this.b, b);
    M(this, "refreshToken", this.b.a);
    Km(this, c || ({}));
    H.call(this);
    this.R = !1;
    this.s && Re() && (this.i = Xl(this.s, this.l, this.m));
    this.S = [];
    this.h = null;
    this.u = Lm(this);
    this.aa = q(this.hb, this);
    var e = this;
    this.ya = null;
    this.Oa = function (f) {
      e.wa(f.h);
    };
    this.ja = null;
    this.Aa = function (f) {
      Pi(e.a, f.c);
    };
    this.X = null;
    this.$ = [];
    this.Ba = function (f) {
      Mm(e, f.f);
    };
    this.ba = null;
    this.O = new tm(this, c);
    M(this, "multiFactor", this.O);
  }
  r(Im, H);
  Im.prototype.wa = function (a) {
    this.ya = a;
    Oi(this.a, a);
  };
  Im.prototype.la = function () {
    return this.ya;
  };
  function Nm(a, b) {
    a.ja && xd(a.ja, "languageCodeChanged", a.Oa);
    (a.ja = b) && nd(b, "languageCodeChanged", a.Oa);
  }
  function Om(a, b) {
    a.X && xd(a.X, "emulatorConfigChanged", a.Aa);
    (a.X = b) && nd(b, "emulatorConfigChanged", a.Aa);
  }
  function Mm(a, b) {
    a.$ = b;
    Ri(a.a, _firebaseAppDefault.default.SDK_VERSION ? Oe(_firebaseAppDefault.default.SDK_VERSION, a.$) : null);
  }
  Im.prototype.Ga = function () {
    return Za(this.$);
  };
  function Pm(a, b) {
    a.ba && xd(a.ba, "frameworkChanged", a.Ba);
    (a.ba = b) && nd(b, "frameworkChanged", a.Ba);
  }
  Im.prototype.hb = function () {
    this.u.b && (this.u.stop(), this.u.start());
  };
  function Qm(a) {
    try {
      return _firebaseAppDefault.default.app(a.m).auth();
    } catch (b) {
      throw new t("internal-error", "No firebase.auth.Auth instance is available for the Firebase App '" + a.m + "'!");
    }
  }
  function Lm(a) {
    return new xm(function () {
      return a.I(!0);
    }, function (b) {
      return b && "auth/network-request-failed" == b.code ? !0 : !1;
    }, function () {
      var b = a.b.c - Date.now() - 3E5;
      return 0 < b ? b : 0;
    });
  }
  function Rm(a) {
    a.D || a.u.b || (a.u.start(), xd(a, "tokenChanged", a.aa), nd(a, "tokenChanged", a.aa));
  }
  function Sm(a) {
    xd(a, "tokenChanged", a.aa);
    a.u.stop();
  }
  function Jm(a, b) {
    a.za = b;
    M(a, "_lat", b);
  }
  function Tm(a, b) {
    Xa(a.S, function (c) {
      return c == b;
    });
  }
  function Um(a) {
    for (var b = [], c = 0; c < a.S.length; c++) b.push(a.S[c](a));
    return Jc(b).then(function () {
      return a;
    });
  }
  function Vm(a) {
    a.i && !a.R && (a.R = !0, Pl(a.i, a));
  }
  function Km(a, b) {
    N(a, {
      uid: b.uid,
      displayName: b.displayName || null,
      photoURL: b.photoURL || null,
      email: b.email || null,
      emailVerified: b.emailVerified || !1,
      phoneNumber: b.phoneNumber || null,
      isAnonymous: b.isAnonymous || !1,
      tenantId: b.tenantId || null,
      metadata: new Fm(b.createdAt, b.lastLoginAt),
      providerData: []
    });
    a.a.b = a.tenantId;
  }
  M(Im.prototype, "providerId", "firebase");
  function Wm() {}
  function Xm(a) {
    return E().then(function () {
      if (a.D) throw new t("app-deleted");
    });
  }
  function Ym(a) {
    return Ra(a.providerData, function (b) {
      return b.providerId;
    });
  }
  function Zm(a, b) {
    b && ($m(a, b.providerId), a.providerData.push(b));
  }
  function $m(a, b) {
    Xa(a.providerData, function (c) {
      return c.providerId == b;
    });
  }
  function an(a, b, c) {
    ("uid" != b || c) && a.hasOwnProperty(b) && M(a, b, c);
  }
  function bn(a, b) {
    a != b && (N(a, {
      uid: b.uid,
      displayName: b.displayName,
      photoURL: b.photoURL,
      email: b.email,
      emailVerified: b.emailVerified,
      phoneNumber: b.phoneNumber,
      isAnonymous: b.isAnonymous,
      tenantId: b.tenantId,
      providerData: []
    }), b.metadata ? M(a, "metadata", Gm(b.metadata)) : M(a, "metadata", new Fm()), w(b.providerData, function (c) {
      Zm(a, c);
    }), Dm(a.b, b.b), M(a, "refreshToken", a.b.a), um(a.O, b.O.b));
  }
  k = Im.prototype;
  k.reload = function () {
    var a = this;
    return R(this, Xm(this).then(function () {
      return cn(a).then(function () {
        return Um(a);
      }).then(Wm);
    }));
  };
  function cn(a) {
    return a.I().then(function (b) {
      var c = a.isAnonymous;
      return dn(a, b).then(function () {
        c || an(a, "isAnonymous", !1);
        return b;
      });
    });
  }
  k.oc = function (a) {
    return this.I(a).then(function (b) {
      return new hm(b);
    });
  };
  k.I = function (a) {
    var b = this;
    return R(this, Xm(this).then(function () {
      return b.b.getToken(a);
    }).then(function (c) {
      if (!c) throw new t("internal-error");
      c.accessToken != b.za && (Jm(b, c.accessToken), b.dispatchEvent(new sm("tokenChanged")));
      an(b, "refreshToken", c.refreshToken);
      return c.accessToken;
    }));
  };
  function wm(a, b) {
    b[Dg] && a.za != b[Dg] && (Cm(a.b, b), a.dispatchEvent(new sm("tokenChanged")), Jm(a, b[Dg]), an(a, "refreshToken", a.b.a));
  }
  function dn(a, b) {
    return O(a.a, Ij, {
      idToken: b
    }).then(q(a.Kc, a));
  }
  k.Kc = function (a) {
    a = a.users;
    if (!a || !a.length) throw new t("internal-error");
    a = a[0];
    Km(this, {
      uid: a.localId,
      displayName: a.displayName,
      photoURL: a.photoUrl,
      email: a.email,
      emailVerified: !!a.emailVerified,
      phoneNumber: a.phoneNumber,
      lastLoginAt: a.lastLoginAt,
      createdAt: a.createdAt,
      tenantId: a.tenantId
    });
    for (var b = en(a), c = 0; c < b.length; c++) Zm(this, b[c]);
    an(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
    this.dispatchEvent(new sm("userReloaded", {
      hd: a
    }));
  };
  function en(a) {
    return (a = a.providerUserInfo) && a.length ? Ra(a, function (b) {
      return new Hm(b.rawId, b.providerId, b.email, b.displayName, b.photoUrl, b.phoneNumber);
    }) : [];
  }
  k.Lc = function (a) {
    gf("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");
    return this.tb(a);
  };
  k.tb = function (a) {
    var b = this, c = null;
    return R(this, a.c(this.a, this.uid).then(function (d) {
      wm(b, d);
      c = fn(b, d, "reauthenticate");
      b.h = null;
      return b.reload();
    }).then(function () {
      return c;
    }), !0);
  };
  function gn(a, b) {
    return cn(a).then(function () {
      if (Va(Ym(a), b)) return Um(a).then(function () {
        throw new t("provider-already-linked");
      });
    });
  }
  k.Cc = function (a) {
    gf("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");
    return this.qb(a);
  };
  k.qb = function (a) {
    var b = this, c = null;
    return R(this, gn(this, a.providerId).then(function () {
      return b.I();
    }).then(function (d) {
      return a.b(b.a, d);
    }).then(function (d) {
      c = fn(b, d, "link");
      return hn(b, d);
    }).then(function () {
      return c;
    }));
  };
  k.Dc = function (a, b) {
    var c = this;
    return R(this, gn(this, "phone").then(function () {
      return gm(Qm(c), a, b, q(c.qb, c));
    }));
  };
  k.Mc = function (a, b) {
    var c = this;
    return R(this, E().then(function () {
      return gm(Qm(c), a, b, q(c.tb, c));
    }), !0);
  };
  function fn(a, b, c) {
    var d = qh(b);
    b = og(b);
    return kf({
      user: a,
      credential: d,
      additionalUserInfo: b,
      operationType: c
    });
  }
  function hn(a, b) {
    wm(a, b);
    return a.reload().then(function () {
      return a;
    });
  }
  k.Bb = function (a) {
    var b = this;
    return R(this, this.I().then(function (c) {
      return b.a.Bb(c, a);
    }).then(function (c) {
      wm(b, c);
      return b.reload();
    }));
  };
  k.ed = function (a) {
    var b = this;
    return R(this, this.I().then(function (c) {
      return a.b(b.a, c);
    }).then(function (c) {
      wm(b, c);
      return b.reload();
    }));
  };
  k.Cb = function (a) {
    var b = this;
    return R(this, this.I().then(function (c) {
      return b.a.Cb(c, a);
    }).then(function (c) {
      wm(b, c);
      return b.reload();
    }));
  };
  k.Db = function (a) {
    if (void 0 === a.displayName && void 0 === a.photoURL) return Xm(this);
    var b = this;
    return R(this, this.I().then(function (c) {
      return b.a.Db(c, {
        displayName: a.displayName,
        photoUrl: a.photoURL
      });
    }).then(function (c) {
      wm(b, c);
      an(b, "displayName", c.displayName || null);
      an(b, "photoURL", c.photoUrl || null);
      w(b.providerData, function (d) {
        "password" === d.providerId && (M(d, "displayName", b.displayName), M(d, "photoURL", b.photoURL));
      });
      return Um(b);
    }).then(Wm));
  };
  k.cd = function (a) {
    var b = this;
    return R(this, cn(this).then(function (c) {
      return Va(Ym(b), a) ? rj(b.a, c, [a]).then(function (d) {
        var e = {};
        w(d.providerUserInfo || [], function (f) {
          e[f.providerId] = !0;
        });
        w(Ym(b), function (f) {
          e[f] || $m(b, f);
        });
        e[lh.PROVIDER_ID] || M(b, "phoneNumber", null);
        return Um(b);
      }) : Um(b).then(function () {
        throw new t("no-such-provider");
      });
    }));
  };
  k.delete = function () {
    var a = this;
    return R(this, this.I().then(function (b) {
      return O(a.a, Fj, {
        idToken: b
      });
    }).then(function () {
      a.dispatchEvent(new sm("userDeleted"));
    })).then(function () {
      for (var b = 0; b < a.J.length; b++) a.J[b].cancel("app-deleted");
      Nm(a, null);
      Om(a, null);
      Pm(a, null);
      a.J = [];
      a.D = !0;
      Sm(a);
      M(a, "refreshToken", null);
      a.i && Ql(a.i, a);
    });
  };
  k.Fb = function (a, b) {
    return "linkViaPopup" == a && (this.g || null) == b && this.f || "reauthViaPopup" == a && (this.g || null) == b && this.f || "linkViaRedirect" == a && (this.ga || null) == b || "reauthViaRedirect" == a && (this.ga || null) == b ? !0 : !1;
  };
  k.na = function (a, b, c, d) {
    "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.g || null) || (c && this.C ? this.C(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.C);
  };
  k.Fa = function (a, b) {
    return "linkViaPopup" == a && b == (this.g || null) ? q(this.Kb, this) : "reauthViaPopup" == a && b == (this.g || null) ? q(this.Lb, this) : "linkViaRedirect" == a && (this.ga || null) == b ? q(this.Kb, this) : "reauthViaRedirect" == a && (this.ga || null) == b ? q(this.Lb, this) : null;
  };
  k.Ec = function (a) {
    var b = this;
    return jn(this, "linkViaPopup", a, function () {
      return gn(b, a.providerId).then(function () {
        return Um(b);
      });
    }, !1);
  };
  k.Nc = function (a) {
    return jn(this, "reauthViaPopup", a, function () {
      return E();
    }, !0);
  };
  function jn(a, b, c, d, e) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    if (a.h && !e) return F(a.h);
    var f = ng(c.providerId), g = Qe(a.uid + ":::"), h = null;
    (!Te() || Ie()) && a.s && c.isOAuthProvider && (h = ek(a.s, a.l, a.m, b, c, null, g, _firebaseAppDefault.default.SDK_VERSION || null, null, null, a.tenantId));
    var m = ze(h, f && f.ua, f && f.ta);
    d = d().then(function () {
      kn(a);
      if (!e) return a.I().then(function () {});
    }).then(function () {
      return Tl(a.i, m, b, c, g, !!h, a.tenantId);
    }).then(function () {
      return new D(function (p, v) {
        a.na(b, null, new t("cancelled-popup-request"), a.g || null);
        a.f = p;
        a.C = v;
        a.g = g;
        a.c = Vl(a.i, a, b, m, g);
      });
    }).then(function (p) {
      m && ye(m);
      return p ? kf(p) : null;
    }).o(function (p) {
      m && ye(m);
      throw p;
    });
    return R(a, d, e);
  }
  k.Fc = function (a) {
    var b = this;
    return ln(this, "linkViaRedirect", a, function () {
      return gn(b, a.providerId);
    }, !1);
  };
  k.Oc = function (a) {
    return ln(this, "reauthViaRedirect", a, function () {
      return E();
    }, !0);
  };
  function ln(a, b, c, d, e) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    if (a.h && !e) return F(a.h);
    var f = null, g = Qe(a.uid + ":::");
    d = d().then(function () {
      kn(a);
      if (!e) return a.I().then(function () {});
    }).then(function () {
      a.ga = g;
      return Um(a);
    }).then(function (h) {
      a.ha && (h = a.ha, h = h.b.set(mn, a.w(), h.a));
      return h;
    }).then(function () {
      return Ul(a.i, b, c, g, a.tenantId);
    }).o(function (h) {
      f = h;
      if (a.ha) return nn(a.ha);
      throw f;
    }).then(function () {
      if (f) throw f;
    });
    return R(a, d, e);
  }
  function kn(a) {
    if (!a.i || !a.R) {
      if (a.i && !a.R) throw new t("internal-error");
      throw new t("auth-domain-config-required");
    }
  }
  k.Kb = function (a, b, c, d) {
    var e = this;
    this.c && (this.c.cancel(), this.c = null);
    var f = null;
    c = this.I().then(function (g) {
      return Hg(e.a, {
        requestUri: a,
        postBody: d,
        sessionId: b,
        idToken: g
      });
    }).then(function (g) {
      f = fn(e, g, "link");
      return hn(e, g);
    }).then(function () {
      return f;
    });
    return R(this, c);
  };
  k.Lb = function (a, b, c, d) {
    var e = this;
    this.c && (this.c.cancel(), this.c = null);
    var f = null, g = E().then(function () {
      return Cg(Ig(e.a, {
        requestUri: a,
        sessionId: b,
        postBody: d,
        tenantId: c
      }), e.uid);
    }).then(function (h) {
      f = fn(e, h, "reauthenticate");
      wm(e, h);
      e.h = null;
      return e.reload();
    }).then(function () {
      return f;
    });
    return R(this, g, !0);
  };
  k.ub = function (a) {
    var b = this, c = null;
    return R(this, this.I().then(function (d) {
      c = d;
      return "undefined" === typeof a || mb(a) ? {} : bg(new Sf(a));
    }).then(function (d) {
      return b.a.ub(c, d);
    }).then(function (d) {
      if (b.email != d) return b.reload();
    }).then(function () {}));
  };
  k.Eb = function (a, b) {
    var c = this, d = null;
    return R(this, this.I().then(function (e) {
      d = e;
      return "undefined" === typeof b || mb(b) ? {} : bg(new Sf(b));
    }).then(function (e) {
      return c.a.Eb(d, a, e);
    }).then(function (e) {
      if (c.email != e) return c.reload();
    }).then(function () {}));
  };
  function R(a, b, c) {
    var d = on(a, b, c);
    a.J.push(d);
    d.oa(function () {
      Wa(a.J, d);
    });
    return d.o(function (e) {
      var f = null;
      e && "auth/multi-factor-auth-required" === e.code && (f = mm(e.w(), Qm(a), q(a.jc, a)));
      throw f || e;
    });
  }
  k.jc = function (a) {
    var b = null, c = this;
    a = Cg(E(a), c.uid).then(function (d) {
      b = fn(c, d, "reauthenticate");
      wm(c, d);
      c.h = null;
      return c.reload();
    }).then(function () {
      return b;
    });
    return R(this, a, !0);
  };
  function on(a, b, c) {
    return a.h && !c ? (b.cancel(), F(a.h)) : b.o(function (d) {
      !d || "auth/user-disabled" != d.code && "auth/user-token-expired" != d.code || (a.h || a.dispatchEvent(new sm("userInvalidated")), a.h = d);
      throw d;
    });
  }
  k.toJSON = function () {
    return this.w();
  };
  k.w = function () {
    var a = {
      uid: this.uid,
      displayName: this.displayName,
      photoURL: this.photoURL,
      email: this.email,
      emailVerified: this.emailVerified,
      phoneNumber: this.phoneNumber,
      isAnonymous: this.isAnonymous,
      tenantId: this.tenantId,
      providerData: [],
      apiKey: this.l,
      appName: this.m,
      authDomain: this.s,
      stsTokenManager: this.b.w(),
      redirectEventId: this.ga || null
    };
    this.metadata && z(a, this.metadata.w());
    w(this.providerData, function (b) {
      a.providerData.push(lf(b));
    });
    z(a, this.O.w());
    return a;
  };
  function pn(a) {
    if (!a.apiKey) return null;
    var b = {
      apiKey: a.apiKey,
      authDomain: a.authDomain,
      appName: a.appName,
      emulatorConfig: a.emulatorConfig
    }, c = {};
    if (a.stsTokenManager && a.stsTokenManager.accessToken) {
      c[Dg] = a.stsTokenManager.accessToken;
      c.refreshToken = a.stsTokenManager.refreshToken || null;
      var d = a.stsTokenManager.expirationTime;
      d && (c.expiresIn = (d - Date.now()) / 1E3);
    } else return null;
    var e = new Im(b, c, a);
    a.providerData && w(a.providerData, function (f) {
      f && Zm(e, kf(f));
    });
    a.redirectEventId && (e.ga = a.redirectEventId);
    return e;
  }
  function qn(a, b, c, d) {
    var e = new Im(a, b);
    c && (e.ha = c);
    d && Mm(e, d);
    return e.reload().then(function () {
      return e;
    });
  }
  function rn(a, b, c, d) {
    var e = a.b, f = {};
    f[Dg] = e.b && e.b.toString();
    f.refreshToken = e.a;
    b = new Im(b || ({
      apiKey: a.l,
      authDomain: a.s,
      appName: a.m
    }), f);
    c && (b.ha = c);
    d && Mm(b, d);
    bn(b, a);
    return b;
  }
  ;
  function sn(a) {
    this.a = a;
    this.b = Vk();
  }
  var mn = {
    name: "redirectUser",
    F: "session"
  };
  function nn(a) {
    return Zk(a.b, mn, a.a);
  }
  function tn(a, b) {
    return a.b.get(mn, a.a).then(function (c) {
      c && b && (c.authDomain = b);
      return pn(c || ({}));
    });
  }
  ;
  function un(a) {
    this.a = a;
    this.b = Vk();
    this.c = null;
    this.f = vn(this);
    this.b.addListener(wn("local"), this.a, q(this.g, this));
  }
  un.prototype.g = function () {
    var a = this, b = wn("local");
    xn(this, function () {
      return E().then(function () {
        return a.c && "local" != a.c.F ? a.b.get(b, a.a) : null;
      }).then(function (c) {
        if (c) return yn(a, "local").then(function () {
          a.c = b;
        });
      });
    });
  };
  function yn(a, b) {
    var c = [], d;
    for (d in Rk) Rk[d] !== b && c.push(Zk(a.b, wn(Rk[d]), a.a));
    c.push(Zk(a.b, zn, a.a));
    return Ic(c);
  }
  function vn(a) {
    var b = wn("local"), c = wn("session"), d = wn("none");
    return Yk(a.b, b, a.a).then(function () {
      return a.b.get(c, a.a);
    }).then(function (e) {
      return e ? c : a.b.get(d, a.a).then(function (f) {
        return f ? d : a.b.get(b, a.a).then(function (g) {
          return g ? b : a.b.get(zn, a.a).then(function (h) {
            return h ? wn(h) : b;
          });
        });
      });
    }).then(function (e) {
      a.c = e;
      return yn(a, e.F);
    }).o(function () {
      a.c || (a.c = b);
    });
  }
  var zn = {
    name: "persistence",
    F: "session"
  };
  function wn(a) {
    return {
      name: "authUser",
      F: a
    };
  }
  un.prototype.xb = function (a) {
    var b = null, c = this;
    Sk(a);
    return xn(this, function () {
      return a != c.c.F ? c.b.get(c.c, c.a).then(function (d) {
        b = d;
        return yn(c, a);
      }).then(function () {
        c.c = wn(a);
        if (b) return c.b.set(c.c, b, c.a);
      }) : E();
    });
  };
  function An(a) {
    return xn(a, function () {
      return a.b.set(zn, a.c.F, a.a);
    });
  }
  function Bn(a, b) {
    return xn(a, function () {
      return a.b.set(a.c, b.w(), a.a);
    });
  }
  function Cn(a) {
    return xn(a, function () {
      return Zk(a.b, a.c, a.a);
    });
  }
  function Dn(a, b, c) {
    return xn(a, function () {
      return a.b.get(a.c, a.a).then(function (d) {
        d && b && (d.authDomain = b);
        d && c && (d.emulatorConfig = c);
        return pn(d || ({}));
      });
    });
  }
  function xn(a, b) {
    a.f = a.f.then(b, b);
    return a.f;
  }
  ;
  function En(a) {
    this.l = !1;
    M(this, "settings", new em());
    M(this, "app", a);
    if (S(this).options && S(this).options.apiKey) (a = _firebaseAppDefault.default.SDK_VERSION ? Oe(_firebaseAppDefault.default.SDK_VERSION) : null, this.a = new Ii(S(this).options && S(this).options.apiKey, Ca(Da), a)); else throw new t("invalid-api-key");
    this.R = [];
    this.s = [];
    this.O = [];
    this.hb = _firebaseAppDefault.default.INTERNAL.createSubscribe(q(this.zc, this));
    this.X = void 0;
    this.bc = _firebaseAppDefault.default.INTERNAL.createSubscribe(q(this.Ac, this));
    Fn(this, null);
    this.i = new un(S(this).options.apiKey + ":" + S(this).name);
    this.D = new sn(S(this).options.apiKey + ":" + S(this).name);
    this.$ = T(this, Gn(this));
    this.h = T(this, Hn(this));
    this.ba = !1;
    this.ja = q(this.Zc, this);
    this.Ba = q(this.da, this);
    this.ya = q(this.mc, this);
    this.za = q(this.wc, this);
    this.Aa = q(this.xc, this);
    this.b = null;
    In(this);
    this.INTERNAL = {};
    this.INTERNAL["delete"] = q(this.delete, this);
    this.INTERNAL.logFramework = q(this.Gc, this);
    this.u = 0;
    H.call(this);
    Jn(this);
    this.J = [];
    this.P = null;
  }
  r(En, H);
  function Kn(a) {
    G.call(this, "languageCodeChanged");
    this.h = a;
  }
  r(Kn, G);
  function Ln(a) {
    G.call(this, "emulatorConfigChanged");
    this.c = a;
  }
  r(Ln, G);
  function Mn(a) {
    G.call(this, "frameworkChanged");
    this.f = a;
  }
  r(Mn, G);
  k = En.prototype;
  k.xb = function (a) {
    a = this.i.xb(a);
    return T(this, a);
  };
  k.wa = function (a) {
    this.aa === a || this.l || (this.aa = a, Oi(this.a, this.aa), this.dispatchEvent(new Kn(this.la())));
  };
  k.la = function () {
    return this.aa;
  };
  k.fd = function () {
    var a = l.navigator;
    this.wa(a ? a.languages && a.languages[0] || a.language || a.userLanguage || null : null);
  };
  k.gd = function (a, b) {
    if (!this.P) {
      if (!(/^https?:\/\//).test(a)) throw new t("argument-error", "Emulator URL must start with a valid scheme (http:// or https://).");
      b = b ? !!b.disableWarnings : !1;
      Nn(b);
      this.P = {
        url: a,
        ec: b
      };
      this.settings.ib = !0;
      Pi(this.a, this.P);
      this.dispatchEvent(new Ln(this.P));
    }
  };
  function Nn(a) {
    "undefined" !== typeof console && "function" === typeof console.info && console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
    l.document && !a && Ee().then(function () {
      var b = l.document.createElement("div");
      b.innerText = "Running in emulator mode. Do not use with production credentials.";
      b.style.position = "fixed";
      b.style.width = "100%";
      b.style.backgroundColor = "#ffffff";
      b.style.border = ".1em solid #000000";
      b.style.color = "#ff0000";
      b.style.bottom = "0px";
      b.style.left = "0px";
      b.style.margin = "0px";
      b.style.zIndex = 1E4;
      b.style.textAlign = "center";
      b.classList.add("firebase-emulator-warning");
      l.document.body.appendChild(b);
    });
  }
  k.Gc = function (a) {
    this.J.push(a);
    Ri(this.a, _firebaseAppDefault.default.SDK_VERSION ? Oe(_firebaseAppDefault.default.SDK_VERSION, this.J) : null);
    this.dispatchEvent(new Mn(this.J));
  };
  k.Ga = function () {
    return Za(this.J);
  };
  k.yb = function (a) {
    this.S === a || this.l || (this.S = a, this.a.b = this.S);
  };
  k.T = function () {
    return this.S;
  };
  function Jn(a) {
    Object.defineProperty(a, "lc", {
      get: function () {
        return this.la();
      },
      set: function (b) {
        this.wa(b);
      },
      enumerable: !1
    });
    a.aa = null;
    Object.defineProperty(a, "ti", {
      get: function () {
        return this.T();
      },
      set: function (b) {
        this.yb(b);
      },
      enumerable: !1
    });
    a.S = null;
    Object.defineProperty(a, "emulatorConfig", {
      get: function () {
        if (this.P) {
          var b = J(this.P.url);
          b = kf({
            protocol: b.c,
            host: b.a,
            port: b.g,
            options: kf({
              disableWarnings: this.P.ec
            })
          });
        } else b = null;
        return b;
      },
      enumerable: !1
    });
  }
  k.toJSON = function () {
    return {
      apiKey: S(this).options.apiKey,
      authDomain: S(this).options.authDomain,
      appName: S(this).name,
      currentUser: U(this) && U(this).w()
    };
  };
  function On(a) {
    return a.Oa || F(new t("auth-domain-config-required"));
  }
  function In(a) {
    var b = S(a).options.authDomain, c = S(a).options.apiKey;
    b && Re() && (a.Oa = a.$.then(function () {
      if (!a.l) {
        a.b = Xl(b, c, S(a).name, a.P);
        Pl(a.b, a);
        U(a) && Vm(U(a));
        if (a.m) {
          Vm(a.m);
          var d = a.m;
          d.wa(a.la());
          Nm(d, a);
          d = a.m;
          Mm(d, a.J);
          Pm(d, a);
          d = a.m;
          Pi(d.a, a.P);
          Om(d, a);
          a.m = null;
        }
        return a.b;
      }
    }));
  }
  k.Fb = function (a, b) {
    switch (a) {
      case "unknown":
      case "signInViaRedirect":
        return !0;
      case "signInViaPopup":
        return this.g == b && !!this.f;
      default:
        return !1;
    }
  };
  k.na = function (a, b, c, d) {
    "signInViaPopup" == a && this.g == d && (c && this.C ? this.C(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.C);
  };
  k.Fa = function (a, b) {
    return "signInViaRedirect" == a || "signInViaPopup" == a && this.g == b && this.f ? q(this.ic, this) : null;
  };
  k.ic = function (a, b, c, d) {
    var e = this, f = {
      requestUri: a,
      postBody: d,
      sessionId: b,
      tenantId: c
    };
    this.c && (this.c.cancel(), this.c = null);
    return e.$.then(function () {
      return Pn(e, Fg(e.a, f));
    });
  };
  k.Xc = function (a) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    var b = this, c = ng(a.providerId), d = Qe(), e = null;
    (!Te() || Ie()) && S(this).options.authDomain && a.isOAuthProvider && (e = ek(S(this).options.authDomain, S(this).options.apiKey, S(this).name, "signInViaPopup", a, null, d, _firebaseAppDefault.default.SDK_VERSION || null, null, null, this.T(), this.P));
    var f = ze(e, c && c.ua, c && c.ta);
    c = On(this).then(function (g) {
      return Tl(g, f, "signInViaPopup", a, d, !!e, b.T());
    }).then(function () {
      return new D(function (g, h) {
        b.na("signInViaPopup", null, new t("cancelled-popup-request"), b.g);
        b.f = g;
        b.C = h;
        b.g = d;
        b.c = Vl(b.b, b, "signInViaPopup", f, d);
      });
    }).then(function (g) {
      f && ye(f);
      return g ? kf(g) : null;
    }).o(function (g) {
      f && ye(f);
      throw g;
    });
    return T(this, c);
  };
  k.Yc = function (a) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    var b = this, c = On(this).then(function () {
      return An(b.i);
    }).then(function () {
      return Ul(b.b, "signInViaRedirect", a, void 0, b.T());
    });
    return T(this, c);
  };
  function Qn(a) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    var b = On(a).then(function () {
      return a.b.qa();
    }).then(function (c) {
      return c ? kf(c) : null;
    });
    return T(a, b);
  }
  k.qa = function () {
    var a = this;
    return Qn(this).then(function (b) {
      a.b && $l(a.b.b);
      return b;
    }).o(function (b) {
      a.b && $l(a.b.b);
      throw b;
    });
  };
  k.dd = function (a) {
    if (!a) return F(new t("null-user"));
    if (this.S != a.tenantId) return F(new t("tenant-id-mismatch"));
    var b = this, c = {};
    c.apiKey = S(this).options.apiKey;
    c.authDomain = S(this).options.authDomain;
    c.appName = S(this).name;
    var d = rn(a, c, b.D, b.Ga());
    return T(this, this.h.then(function () {
      if (S(b).options.apiKey != a.l) return d.reload();
    }).then(function () {
      if (U(b) && a.uid == U(b).uid) return (bn(U(b), a), b.da(a));
      Fn(b, d);
      Vm(d);
      return b.da(d);
    }).then(function () {
      Rn(b);
    }));
  };
  function Sn(a, b) {
    var c = {};
    c.apiKey = S(a).options.apiKey;
    c.authDomain = S(a).options.authDomain;
    c.appName = S(a).name;
    a.P && (c.emulatorConfig = a.P);
    return a.$.then(function () {
      return qn(c, b, a.D, a.Ga());
    }).then(function (d) {
      if (U(a) && d.uid == U(a).uid) return (bn(U(a), d), a.da(d));
      Fn(a, d);
      Vm(d);
      return a.da(d);
    }).then(function () {
      Rn(a);
    });
  }
  function Fn(a, b) {
    U(a) && (Tm(U(a), a.Ba), xd(U(a), "tokenChanged", a.ya), xd(U(a), "userDeleted", a.za), xd(U(a), "userInvalidated", a.Aa), Sm(U(a)));
    b && (b.S.push(a.Ba), nd(b, "tokenChanged", a.ya), nd(b, "userDeleted", a.za), nd(b, "userInvalidated", a.Aa), 0 < a.u && Rm(b));
    M(a, "currentUser", b);
    b && (b.wa(a.la()), Nm(b, a), Mm(b, a.J), Pm(b, a), Pi(b.a, a.P), Om(b, a));
  }
  k.Ab = function () {
    var a = this, b = this.h.then(function () {
      a.b && $l(a.b.b);
      if (!U(a)) return E();
      Fn(a, null);
      return Cn(a.i).then(function () {
        Rn(a);
      });
    });
    return T(this, b);
  };
  function Tn(a) {
    var b = tn(a.D, S(a).options.authDomain).then(function (c) {
      if (a.m = c) c.ha = a.D;
      return nn(a.D);
    });
    return T(a, b);
  }
  function Gn(a) {
    var b = S(a).options.authDomain, c = Tn(a).then(function () {
      return Dn(a.i, b, a.P);
    }).then(function (d) {
      return d ? (d.ha = a.D, a.m && (a.m.ga || null) == (d.ga || null) ? d : d.reload().then(function () {
        return Bn(a.i, d).then(function () {
          return d;
        });
      }).o(function (e) {
        return "auth/network-request-failed" == e.code ? d : Cn(a.i);
      })) : null;
    }).then(function (d) {
      Fn(a, d || null);
    });
    return T(a, c);
  }
  function Hn(a) {
    return a.$.then(function () {
      return Qn(a);
    }).o(function () {}).then(function () {
      if (!a.l) return a.ja();
    }).o(function () {}).then(function () {
      if (!a.l) {
        a.ba = !0;
        var b = a.i;
        b.b.addListener(wn("local"), b.a, a.ja);
      }
    });
  }
  k.Zc = function () {
    var a = this;
    return Dn(this.i, S(this).options.authDomain).then(function (b) {
      if (!a.l) {
        var c;
        if (c = U(a) && b) {
          c = U(a).uid;
          var d = b.uid;
          c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? !1 : c == d;
        }
        if (c) return (bn(U(a), b), U(a).I());
        if (U(a) || b) (Fn(a, b), b && (Vm(b), b.ha = a.D), a.b && Pl(a.b, a), Rn(a));
      }
    });
  };
  k.da = function (a) {
    return Bn(this.i, a);
  };
  k.mc = function () {
    Rn(this);
    this.da(U(this));
  };
  k.wc = function () {
    this.Ab();
  };
  k.xc = function () {
    this.Ab();
  };
  function Pn(a, b) {
    var c = null, d = null;
    return T(a, b.then(function (e) {
      c = qh(e);
      d = og(e);
      return Sn(a, e);
    }, function (e) {
      var f = null;
      e && "auth/multi-factor-auth-required" === e.code && (f = mm(e.w(), a, q(a.kc, a)));
      throw f || e;
    }).then(function () {
      return kf({
        user: U(a),
        credential: c,
        additionalUserInfo: d,
        operationType: "signIn"
      });
    }));
  }
  k.kc = function (a) {
    var b = this;
    return this.h.then(function () {
      return Pn(b, E(a));
    });
  };
  k.zc = function (a) {
    var b = this;
    this.addAuthTokenListener(function () {
      a.next(U(b));
    });
  };
  k.Ac = function (a) {
    var b = this;
    Un(this, function () {
      a.next(U(b));
    });
  };
  k.Ic = function (a, b, c) {
    var d = this;
    this.ba && Promise.resolve().then(function () {
      "function" === typeof a ? a(U(d)) : "function" === typeof a.next && a.next(U(d));
    });
    return this.hb(a, b, c);
  };
  k.Hc = function (a, b, c) {
    var d = this;
    this.ba && Promise.resolve().then(function () {
      d.X = d.getUid();
      "function" === typeof a ? a(U(d)) : "function" === typeof a.next && a.next(U(d));
    });
    return this.bc(a, b, c);
  };
  k.nc = function (a) {
    var b = this, c = this.h.then(function () {
      return U(b) ? U(b).I(a).then(function (d) {
        return {
          accessToken: d
        };
      }) : null;
    });
    return T(this, c);
  };
  k.Tc = function (a) {
    var b = this;
    return this.h.then(function () {
      return Pn(b, O(b.a, Kj, {
        token: a
      }));
    }).then(function (c) {
      var d = c.user;
      an(d, "isAnonymous", !1);
      b.da(d);
      return c;
    });
  };
  k.Uc = function (a, b) {
    var c = this;
    return this.h.then(function () {
      return Pn(c, O(c.a, ah, {
        email: a,
        password: b
      }));
    });
  };
  k.dc = function (a, b) {
    var c = this;
    return this.h.then(function () {
      return Pn(c, O(c.a, Ej, {
        email: a,
        password: b
      }));
    });
  };
  k.$a = function (a) {
    var b = this;
    return this.h.then(function () {
      return Pn(b, a.ka(b.a));
    });
  };
  k.Sc = function (a) {
    gf("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");
    return this.$a(a);
  };
  k.zb = function () {
    var a = this;
    return this.h.then(function () {
      var b = U(a);
      if (b && b.isAnonymous) {
        var c = kf({
          providerId: null,
          isNewUser: !1
        });
        return kf({
          user: b,
          credential: null,
          additionalUserInfo: c,
          operationType: "signIn"
        });
      }
      return Pn(a, a.a.zb()).then(function (d) {
        var e = d.user;
        an(e, "isAnonymous", !0);
        a.da(e);
        return d;
      });
    });
  };
  function S(a) {
    return a.app;
  }
  function U(a) {
    return a.currentUser;
  }
  k.getUid = function () {
    return U(this) && U(this).uid || null;
  };
  function Vn(a) {
    return U(a) && U(a)._lat || null;
  }
  function Rn(a) {
    if (a.ba) {
      for (var b = 0; b < a.s.length; b++) if (a.s[b]) a.s[b](Vn(a));
      if (a.X !== a.getUid() && a.O.length) for ((a.X = a.getUid(), b = 0); b < a.O.length; b++) if (a.O[b]) a.O[b](Vn(a));
    }
  }
  k.cc = function (a) {
    this.addAuthTokenListener(a);
    this.u++;
    0 < this.u && U(this) && Rm(U(this));
  };
  k.Pc = function (a) {
    var b = this;
    w(this.s, function (c) {
      c == a && b.u--;
    });
    0 > this.u && (this.u = 0);
    0 == this.u && U(this) && Sm(U(this));
    this.removeAuthTokenListener(a);
  };
  k.addAuthTokenListener = function (a) {
    var b = this;
    this.s.push(a);
    T(this, this.h.then(function () {
      b.l || Va(b.s, a) && a(Vn(b));
    }));
  };
  k.removeAuthTokenListener = function (a) {
    Xa(this.s, function (b) {
      return b == a;
    });
  };
  function Un(a, b) {
    a.O.push(b);
    T(a, a.h.then(function () {
      !a.l && Va(a.O, b) && a.X !== a.getUid() && (a.X = a.getUid(), b(Vn(a)));
    }));
  }
  k.delete = function () {
    this.l = !0;
    for (var a = 0; a < this.R.length; a++) this.R[a].cancel("app-deleted");
    this.R = [];
    this.i && (a = this.i, a.b.removeListener(wn("local"), a.a, this.ja));
    this.b && (Ql(this.b, this), $l(this.b.b));
    return Promise.resolve();
  };
  function T(a, b) {
    a.R.push(b);
    b.oa(function () {
      Wa(a.R, b);
    });
    return b;
  }
  k.hc = function (a) {
    return T(this, aj(this.a, a));
  };
  k.Bc = function (a) {
    return !!fh(a);
  };
  k.wb = function (a, b) {
    var c = this;
    return T(this, E().then(function () {
      var d = new Sf(b);
      if (!d.c) throw new t("argument-error", $f + " must be true when sending sign in link to email");
      return bg(d);
    }).then(function (d) {
      return c.a.wb(a, d);
    }).then(function () {}));
  };
  k.jd = function (a) {
    return this.Ra(a).then(function (b) {
      return b.data.email;
    });
  };
  k.nb = function (a, b) {
    return T(this, this.a.nb(a, b).then(function () {}));
  };
  k.Ra = function (a) {
    return T(this, this.a.Ra(a).then(function (b) {
      return new vf(b);
    }));
  };
  k.jb = function (a) {
    return T(this, this.a.jb(a).then(function () {}));
  };
  k.vb = function (a, b) {
    var c = this;
    return T(this, E().then(function () {
      return "undefined" === typeof b || mb(b) ? {} : bg(new Sf(b));
    }).then(function (d) {
      return c.a.vb(a, d);
    }).then(function () {}));
  };
  k.Wc = function (a, b) {
    return T(this, gm(this, a, b, q(this.$a, this)));
  };
  k.Vc = function (a, b) {
    var c = this;
    return T(this, E().then(function () {
      var d = b || re(), e = eh(a, d);
      d = fh(d);
      if (!d) throw new t("argument-error", "Invalid email link!");
      if (d.tenantId !== c.T()) throw new t("tenant-id-mismatch");
      return c.$a(e);
    }));
  };
  function Wn() {}
  Wn.prototype.render = function () {};
  Wn.prototype.reset = function () {};
  Wn.prototype.getResponse = function () {};
  Wn.prototype.execute = function () {};
  function Xn() {
    this.a = {};
    this.b = 1E12;
  }
  var Yn = null;
  Xn.prototype.render = function (a, b) {
    this.a[this.b.toString()] = new Zn(a, b);
    return this.b++;
  };
  Xn.prototype.reset = function (a) {
    var b = $n(this, a);
    a = ao(a);
    b && a && (b.delete(), delete this.a[a]);
  };
  Xn.prototype.getResponse = function (a) {
    return (a = $n(this, a)) ? a.getResponse() : null;
  };
  Xn.prototype.execute = function (a) {
    (a = $n(this, a)) && a.execute();
  };
  function $n(a, b) {
    return (b = ao(b)) ? a.a[b] || null : null;
  }
  function ao(a) {
    return (a = "undefined" === typeof a ? 1E12 : a) ? a.toString() : null;
  }
  function Zn(a, b) {
    this.g = !1;
    this.c = b;
    this.a = this.b = null;
    this.h = "invisible" !== this.c.size;
    this.f = kc(a);
    var c = this;
    this.i = function () {
      c.execute();
    };
    this.h ? this.execute() : nd(this.f, "click", this.i);
  }
  Zn.prototype.getResponse = function () {
    bo(this);
    return this.b;
  };
  Zn.prototype.execute = function () {
    bo(this);
    var a = this;
    this.a || (this.a = setTimeout(function () {
      a.b = Me();
      var b = a.c.callback, c = a.c["expired-callback"];
      if (b) try {
        b(a.b);
      } catch (d) {}
      a.a = setTimeout(function () {
        a.a = null;
        a.b = null;
        if (c) try {
          c();
        } catch (d) {}
        a.h && a.execute();
      }, 6E4);
    }, 500));
  };
  Zn.prototype.delete = function () {
    bo(this);
    this.g = !0;
    clearTimeout(this.a);
    this.a = null;
    xd(this.f, "click", this.i);
  };
  function bo(a) {
    if (a.g) throw Error("reCAPTCHA mock was already deleted!");
  }
  ;
  function co() {}
  M(co, "FACTOR_ID", "phone");
  function eo() {}
  eo.prototype.g = function () {
    Yn || (Yn = new Xn());
    return E(Yn);
  };
  eo.prototype.c = function () {};
  var fo = null;
  function go() {
    this.b = l.grecaptcha ? Infinity : 0;
    this.f = null;
    this.a = "__rcb" + Math.floor(1E6 * Math.random()).toString();
  }
  var ho = new qb(rb, "https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"), io = new Ze(3E4, 6E4);
  go.prototype.g = function (a) {
    var b = this;
    return new D(function (c, d) {
      var e = setTimeout(function () {
        d(new t("network-request-failed"));
      }, io.get());
      if (!l.grecaptcha || a !== b.f && !b.b) {
        l[b.a] = function () {
          if (l.grecaptcha) {
            b.f = a;
            var g = l.grecaptcha.render;
            l.grecaptcha.render = function (h, m) {
              h = g(h, m);
              b.b++;
              return h;
            };
            clearTimeout(e);
            c(l.grecaptcha);
          } else (clearTimeout(e), d(new t("internal-error")));
          delete l[b.a];
        };
        var f = zb(ho, {
          onload: b.a,
          hl: a || ""
        });
        E(Bi(f)).o(function () {
          clearTimeout(e);
          d(new t("internal-error", "Unable to load external reCAPTCHA dependencies!"));
        });
      } else (clearTimeout(e), c(l.grecaptcha));
    });
  };
  go.prototype.c = function () {
    this.b--;
  };
  var jo = null;
  function ko(a, b, c, d, e, f, g) {
    M(this, "type", "recaptcha");
    this.c = this.f = null;
    this.D = !1;
    this.v = b;
    this.g = null;
    g ? (fo || (fo = new eo()), g = fo) : (jo || (jo = new go()), g = jo);
    this.m = g;
    this.a = c || ({
      theme: "light",
      type: "image"
    });
    this.h = [];
    if (this.a[lo]) throw new t("argument-error", "sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");
    this.i = "invisible" === this.a[mo];
    if (!l.document) throw new t("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
    if (!kc(b) || !this.i && kc(b).hasChildNodes()) throw new t("argument-error", "reCAPTCHA container is either not found or already contains inner elements!");
    this.s = new Ii(a, f || null, e || null);
    this.u = d || (function () {
      return null;
    });
    var h = this;
    this.l = [];
    var m = this.a[no];
    this.a[no] = function (v) {
      oo(h, v);
      if ("function" === typeof m) m(v); else if ("string" === typeof m) {
        var B = L(m, l);
        "function" === typeof B && B(v);
      }
    };
    var p = this.a[po];
    this.a[po] = function () {
      oo(h, null);
      if ("function" === typeof p) p(); else if ("string" === typeof p) {
        var v = L(p, l);
        "function" === typeof v && v();
      }
    };
  }
  var no = "callback", po = "expired-callback", lo = "sitekey", mo = "size";
  function oo(a, b) {
    for (var c = 0; c < a.l.length; c++) try {
      a.l[c](b);
    } catch (d) {}
  }
  function qo(a, b) {
    Xa(a.l, function (c) {
      return c == b;
    });
  }
  function ro(a, b) {
    a.h.push(b);
    b.oa(function () {
      Wa(a.h, b);
    });
    return b;
  }
  k = ko.prototype;
  k.Ia = function () {
    var a = this;
    return this.f ? this.f : this.f = ro(this, E().then(function () {
      if (Se() && !Je()) return Ee();
      throw new t("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");
    }).then(function () {
      return a.m.g(a.u());
    }).then(function (b) {
      a.g = b;
      return O(a.s, Jj, {});
    }).then(function (b) {
      a.a[lo] = b.recaptchaSiteKey;
    }).o(function (b) {
      a.f = null;
      throw b;
    }));
  };
  k.render = function () {
    so(this);
    var a = this;
    return ro(this, this.Ia().then(function () {
      if (null === a.c) {
        var b = a.v;
        if (!a.i) {
          var c = kc(b);
          b = nc("DIV");
          c.appendChild(b);
        }
        a.c = a.g.render(b, a.a);
      }
      return a.c;
    }));
  };
  k.verify = function () {
    so(this);
    var a = this;
    return ro(this, this.render().then(function (b) {
      return new D(function (c) {
        var d = a.g.getResponse(b);
        if (d) c(d); else {
          var e = function (f) {
            f && (qo(a, e), c(f));
          };
          a.l.push(e);
          a.i && a.g.execute(a.c);
        }
      });
    }));
  };
  k.reset = function () {
    so(this);
    null !== this.c && this.g.reset(this.c);
  };
  function so(a) {
    if (a.D) throw new t("internal-error", "RecaptchaVerifier instance has been destroyed.");
  }
  k.clear = function () {
    so(this);
    this.D = !0;
    this.m.c();
    for (var a = 0; a < this.h.length; a++) this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");
    if (!this.i) {
      a = kc(this.v);
      for (var b; b = a.firstChild; ) a.removeChild(b);
    }
  };
  function to(a, b, c) {
    var d = !1;
    try {
      this.b = c || _firebaseAppDefault.default.app();
    } catch (g) {
      throw new t("argument-error", "No firebase.app.App instance is currently initialized.");
    }
    if (this.b.options && this.b.options.apiKey) c = this.b.options.apiKey; else throw new t("invalid-api-key");
    var e = this, f = null;
    try {
      f = this.b.auth().Ga();
    } catch (g) {}
    try {
      d = this.b.auth().settings.appVerificationDisabledForTesting;
    } catch (g) {}
    f = _firebaseAppDefault.default.SDK_VERSION ? Oe(_firebaseAppDefault.default.SDK_VERSION, f) : null;
    ko.call(this, c, a, b, function () {
      try {
        var g = e.b.auth().la();
      } catch (h) {
        g = null;
      }
      return g;
    }, f, Ca(Da), d);
  }
  r(to, ko);
  function uo(a, b, c, d) {
    a: {
      c = Array.prototype.slice.call(c);
      var e = 0;
      for (var f = !1, g = 0; g < b.length; g++) if (b[g].optional) f = !0; else {
        if (f) throw new t("internal-error", "Argument validator encountered a required argument after an optional argument.");
        e++;
      }
      f = b.length;
      if (c.length < e || f < c.length) d = "Expected " + (e == f ? 1 == e ? "1 argument" : e + " arguments" : e + "-" + f + " arguments") + " but got " + c.length + "."; else {
        for (e = 0; e < c.length; e++) if ((f = b[e].optional && void 0 === c[e], !b[e].M(c[e]) && !f)) {
          b = b[e];
          if (0 > e || e >= vo.length) throw new t("internal-error", "Argument validator received an unsupported number of arguments.");
          c = vo[e];
          d = (d ? "" : c + " argument ") + (b.name ? '"' + b.name + '" ' : "") + "must be " + b.K + ".";
          break a;
        }
        d = null;
      }
    }
    if (d) throw new t("argument-error", a + " failed: " + d);
  }
  var vo = ("First Second Third Fourth Fifth Sixth Seventh Eighth Ninth").split(" ");
  function V(a, b) {
    return {
      name: a || "",
      K: "a valid string",
      optional: !!b,
      M: function (c) {
        return "string" === typeof c;
      }
    };
  }
  function wo(a, b) {
    return {
      name: a || "",
      K: "a boolean",
      optional: !!b,
      M: function (c) {
        return "boolean" === typeof c;
      }
    };
  }
  function W(a, b) {
    return {
      name: a || "",
      K: "a valid object",
      optional: !!b,
      M: n
    };
  }
  function xo(a, b) {
    return {
      name: a || "",
      K: "a function",
      optional: !!b,
      M: function (c) {
        return "function" === typeof c;
      }
    };
  }
  function yo(a, b) {
    return {
      name: a || "",
      K: "null",
      optional: !!b,
      M: function (c) {
        return null === c;
      }
    };
  }
  function zo() {
    return {
      name: "",
      K: "an HTML element",
      optional: !1,
      M: function (a) {
        return !!(a && a instanceof Element);
      }
    };
  }
  function Ao() {
    return {
      name: "auth",
      K: "an instance of Firebase Auth",
      optional: !0,
      M: function (a) {
        return !!(a && a instanceof En);
      }
    };
  }
  function Bo() {
    return {
      name: "app",
      K: "an instance of Firebase App",
      optional: !0,
      M: function (a) {
        return !!(a && a instanceof _firebaseAppDefault.default.app.App);
      }
    };
  }
  function Co(a) {
    return {
      name: a ? a + "Credential" : "credential",
      K: a ? "a valid " + a + " credential" : "a valid credential",
      optional: !1,
      M: function (b) {
        if (!b) return !1;
        var c = !a || b.providerId === a;
        return !(!b.ka || !c);
      }
    };
  }
  function Do() {
    return {
      name: "multiFactorAssertion",
      K: "a valid multiFactorAssertion",
      optional: !1,
      M: function (a) {
        return a ? !!a.sb : !1;
      }
    };
  }
  function Eo() {
    return {
      name: "authProvider",
      K: "a valid Auth provider",
      optional: !1,
      M: function (a) {
        return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
      }
    };
  }
  function Fo(a, b) {
    return n(a) && "string" === typeof a.type && a.type === b && "function" === typeof a.Ha;
  }
  function Go(a) {
    return n(a) && "string" === typeof a.uid;
  }
  function Ho() {
    return {
      name: "applicationVerifier",
      K: "an implementation of firebase.auth.ApplicationVerifier",
      optional: !1,
      M: function (a) {
        return !(!a || "string" !== typeof a.type || "function" !== typeof a.verify);
      }
    };
  }
  function X(a, b, c, d) {
    return {
      name: c || "",
      K: a.K + " or " + b.K,
      optional: !!d,
      M: function (e) {
        return a.M(e) || b.M(e);
      }
    };
  }
  ;
  function Y(a, b) {
    for (var c in b) {
      var d = b[c].name;
      a[d] = Io(d, a[c], b[c].j);
    }
  }
  function Jo(a, b) {
    for (var c in b) {
      var d = b[c].name;
      d !== c && Object.defineProperty(a, d, {
        get: ua(function (e) {
          return this[e];
        }, c),
        set: ua(function (e, f, g, h) {
          uo(e, [g], [h], !0);
          this[f] = h;
        }, d, c, b[c].kb),
        enumerable: !0
      });
    }
  }
  function Z(a, b, c, d) {
    a[b] = Io(b, c, d);
  }
  function Io(a, b, c) {
    function d() {
      var g = Array.prototype.slice.call(arguments);
      uo(e, c, g);
      return b.apply(this, g);
    }
    if (!c) return b;
    var e = Ko(a), f;
    for (f in b) d[f] = b[f];
    for (f in b.prototype) d.prototype[f] = b.prototype[f];
    return d;
  }
  function Ko(a) {
    a = a.split(".");
    return a[a.length - 1];
  }
  ;
  Y(En.prototype, {
    jb: {
      name: "applyActionCode",
      j: [V("code")]
    },
    Ra: {
      name: "checkActionCode",
      j: [V("code")]
    },
    nb: {
      name: "confirmPasswordReset",
      j: [V("code"), V("newPassword")]
    },
    dc: {
      name: "createUserWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    hc: {
      name: "fetchSignInMethodsForEmail",
      j: [V("email")]
    },
    qa: {
      name: "getRedirectResult",
      j: []
    },
    Bc: {
      name: "isSignInWithEmailLink",
      j: [V("emailLink")]
    },
    Hc: {
      name: "onAuthStateChanged",
      j: [X(W(), xo(), "nextOrObserver"), xo("opt_error", !0), xo("opt_completed", !0)]
    },
    Ic: {
      name: "onIdTokenChanged",
      j: [X(W(), xo(), "nextOrObserver"), xo("opt_error", !0), xo("opt_completed", !0)]
    },
    vb: {
      name: "sendPasswordResetEmail",
      j: [V("email"), X(W("opt_actionCodeSettings", !0), yo(null, !0), "opt_actionCodeSettings", !0)]
    },
    wb: {
      name: "sendSignInLinkToEmail",
      j: [V("email"), W("actionCodeSettings")]
    },
    xb: {
      name: "setPersistence",
      j: [V("persistence")]
    },
    Sc: {
      name: "signInAndRetrieveDataWithCredential",
      j: [Co()]
    },
    zb: {
      name: "signInAnonymously",
      j: []
    },
    $a: {
      name: "signInWithCredential",
      j: [Co()]
    },
    Tc: {
      name: "signInWithCustomToken",
      j: [V("token")]
    },
    Uc: {
      name: "signInWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    Vc: {
      name: "signInWithEmailLink",
      j: [V("email"), V("emailLink", !0)]
    },
    Wc: {
      name: "signInWithPhoneNumber",
      j: [V("phoneNumber"), Ho()]
    },
    Xc: {
      name: "signInWithPopup",
      j: [Eo()]
    },
    Yc: {
      name: "signInWithRedirect",
      j: [Eo()]
    },
    dd: {
      name: "updateCurrentUser",
      j: [X((function (a) {
        return {
          name: "user",
          K: "an instance of Firebase User",
          optional: !!a,
          M: function (b) {
            return !!(b && b instanceof Im);
          }
        };
      })(), yo(), "user")]
    },
    Ab: {
      name: "signOut",
      j: []
    },
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    },
    fd: {
      name: "useDeviceLanguage",
      j: []
    },
    gd: {
      name: "useEmulator",
      j: [V("url"), W("options", !0)]
    },
    jd: {
      name: "verifyPasswordResetCode",
      j: [V("code")]
    }
  });
  Jo(En.prototype, {
    lc: {
      name: "languageCode",
      kb: X(V(), yo(), "languageCode")
    },
    ti: {
      name: "tenantId",
      kb: X(V(), yo(), "tenantId")
    }
  });
  En.Persistence = Rk;
  En.Persistence.LOCAL = "local";
  En.Persistence.SESSION = "session";
  En.Persistence.NONE = "none";
  Y(Im.prototype, {
    "delete": {
      name: "delete",
      j: []
    },
    oc: {
      name: "getIdTokenResult",
      j: [wo("opt_forceRefresh", !0)]
    },
    I: {
      name: "getIdToken",
      j: [wo("opt_forceRefresh", !0)]
    },
    Cc: {
      name: "linkAndRetrieveDataWithCredential",
      j: [Co()]
    },
    qb: {
      name: "linkWithCredential",
      j: [Co()]
    },
    Dc: {
      name: "linkWithPhoneNumber",
      j: [V("phoneNumber"), Ho()]
    },
    Ec: {
      name: "linkWithPopup",
      j: [Eo()]
    },
    Fc: {
      name: "linkWithRedirect",
      j: [Eo()]
    },
    Lc: {
      name: "reauthenticateAndRetrieveDataWithCredential",
      j: [Co()]
    },
    tb: {
      name: "reauthenticateWithCredential",
      j: [Co()]
    },
    Mc: {
      name: "reauthenticateWithPhoneNumber",
      j: [V("phoneNumber"), Ho()]
    },
    Nc: {
      name: "reauthenticateWithPopup",
      j: [Eo()]
    },
    Oc: {
      name: "reauthenticateWithRedirect",
      j: [Eo()]
    },
    reload: {
      name: "reload",
      j: []
    },
    ub: {
      name: "sendEmailVerification",
      j: [X(W("opt_actionCodeSettings", !0), yo(null, !0), "opt_actionCodeSettings", !0)]
    },
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    },
    cd: {
      name: "unlink",
      j: [V("provider")]
    },
    Bb: {
      name: "updateEmail",
      j: [V("email")]
    },
    Cb: {
      name: "updatePassword",
      j: [V("password")]
    },
    ed: {
      name: "updatePhoneNumber",
      j: [Co("phone")]
    },
    Db: {
      name: "updateProfile",
      j: [W("profile")]
    },
    Eb: {
      name: "verifyBeforeUpdateEmail",
      j: [V("email"), X(W("opt_actionCodeSettings", !0), yo(null, !0), "opt_actionCodeSettings", !0)]
    }
  });
  Y(Xn.prototype, {
    execute: {
      name: "execute"
    },
    render: {
      name: "render"
    },
    reset: {
      name: "reset"
    },
    getResponse: {
      name: "getResponse"
    }
  });
  Y(Wn.prototype, {
    execute: {
      name: "execute"
    },
    render: {
      name: "render"
    },
    reset: {
      name: "reset"
    },
    getResponse: {
      name: "getResponse"
    }
  });
  Y(D.prototype, {
    oa: {
      name: "finally"
    },
    o: {
      name: "catch"
    },
    then: {
      name: "then"
    }
  });
  Jo(em.prototype, {
    appVerificationDisabled: {
      name: "appVerificationDisabledForTesting",
      kb: wo("appVerificationDisabledForTesting")
    }
  });
  Y(fm.prototype, {
    confirm: {
      name: "confirm",
      j: [V("verificationCode")]
    }
  });
  Z(Bg, "fromJSON", function (a) {
    a = "string" === typeof a ? JSON.parse(a) : a;
    for (var b, c = [Mg, dh, kh, Jg], d = 0; d < c.length; d++) if (b = c[d](a)) return b;
    return null;
  }, [X(V(), W(), "json")]);
  Z(Zg, "credential", function (a, b) {
    return new Yg(a, b);
  }, [V("email"), V("password")]);
  Y(Yg.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(Qg.prototype, {
    Ca: {
      name: "addScope",
      j: [V("scope")]
    },
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(Qg, "credential", Rg, [X(V(), W(), "token")]);
  Z(Zg, "credentialWithLink", eh, [V("email"), V("emailLink")]);
  Y(Sg.prototype, {
    Ca: {
      name: "addScope",
      j: [V("scope")]
    },
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(Sg, "credential", Tg, [X(V(), W(), "token")]);
  Y(Ug.prototype, {
    Ca: {
      name: "addScope",
      j: [V("scope")]
    },
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(Ug, "credential", Vg, [X(V(), X(W(), yo()), "idToken"), X(V(), yo(), "accessToken", !0)]);
  Y(Wg.prototype, {
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(Wg, "credential", Xg, [X(V(), W(), "token"), V("secret", !0)]);
  Y(Pg.prototype, {
    Ca: {
      name: "addScope",
      j: [V("scope")]
    },
    credential: {
      name: "credential",
      j: [X(V(), X(W(), yo()), "optionsOrIdToken"), X(V(), yo(), "accessToken", !0)]
    },
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Y(Kg.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(Eg.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Z(lh, "credential", ph, [V("verificationId"), V("verificationCode")]);
  Y(lh.prototype, {
    fb: {
      name: "verifyPhoneNumber",
      j: [X(V(), (function (a, b) {
        return {
          name: a || "phoneInfoOptions",
          K: "valid phone info options",
          optional: !!b,
          M: function (c) {
            return c ? c.session && c.phoneNumber ? Fo(c.session, zg) && "string" === typeof c.phoneNumber : c.session && c.multiFactorHint ? Fo(c.session, Ag) && Go(c.multiFactorHint) : c.session && c.multiFactorUid ? Fo(c.session, Ag) && "string" === typeof c.multiFactorUid : c.phoneNumber ? "string" === typeof c.phoneNumber : !1 : !1;
          }
        };
      })(), "phoneInfoOptions"), Ho()]
    }
  });
  Y(gh.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(t.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(yh.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(xh.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(lm.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(im.prototype, {
    Rc: {
      name: "resolveSignIn",
      j: [Do()]
    }
  });
  Y(tm.prototype, {
    Rb: {
      name: "getSession",
      j: []
    },
    fc: {
      name: "enroll",
      j: [Do(), V("displayName", !0)]
    },
    bd: {
      name: "unenroll",
      j: [X({
        name: "multiFactorInfo",
        K: "a valid multiFactorInfo",
        optional: !1,
        M: Go
      }, V(), "multiFactorInfoIdentifier")]
    }
  });
  Y(to.prototype, {
    clear: {
      name: "clear",
      j: []
    },
    render: {
      name: "render",
      j: []
    },
    verify: {
      name: "verify",
      j: []
    }
  });
  Z(Jf, "parseLink", Rf, [V("link")]);
  Z(co, "assertion", function (a) {
    return new rm(a);
  }, [Co("phone")]);
  (function () {
    if ("undefined" !== typeof _firebaseAppDefault.default && _firebaseAppDefault.default.INTERNAL && _firebaseAppDefault.default.INTERNAL.registerComponent) {
      var a = {
        ActionCodeInfo: {
          Operation: {
            EMAIL_SIGNIN: Af,
            PASSWORD_RESET: "PASSWORD_RESET",
            RECOVER_EMAIL: "RECOVER_EMAIL",
            REVERT_SECOND_FACTOR_ADDITION: Cf,
            VERIFY_AND_CHANGE_EMAIL: Bf,
            VERIFY_EMAIL: "VERIFY_EMAIL"
          }
        },
        Auth: En,
        AuthCredential: Bg,
        Error: t
      };
      Z(a, "EmailAuthProvider", Zg, []);
      Z(a, "FacebookAuthProvider", Qg, []);
      Z(a, "GithubAuthProvider", Sg, []);
      Z(a, "GoogleAuthProvider", Ug, []);
      Z(a, "TwitterAuthProvider", Wg, []);
      Z(a, "OAuthProvider", Pg, [V("providerId")]);
      Z(a, "SAMLAuthProvider", Og, [V("providerId")]);
      Z(a, "PhoneAuthProvider", lh, [Ao()]);
      Z(a, "RecaptchaVerifier", to, [X(V(), zo(), "recaptchaContainer"), W("recaptchaParameters", !0), Bo()]);
      Z(a, "ActionCodeURL", Jf, []);
      Z(a, "PhoneMultiFactorGenerator", co, []);
      _firebaseAppDefault.default.INTERNAL.registerComponent({
        name: "auth",
        instanceFactory: function (b) {
          b = b.getProvider("app").getImmediate();
          return new En(b);
        },
        multipleInstances: !1,
        serviceProps: a,
        instantiationMode: "LAZY",
        type: "PUBLIC"
      });
      _firebaseAppDefault.default.INTERNAL.registerComponent({
        name: "auth-internal",
        instanceFactory: function (b) {
          b = b.getProvider("auth").getImmediate();
          return {
            getUid: q(b.getUid, b),
            getToken: q(b.nc, b),
            addAuthTokenListener: q(b.cc, b),
            removeAuthTokenListener: q(b.Pc, b)
          };
        },
        multipleInstances: !1,
        instantiationMode: "LAZY",
        type: "PRIVATE"
      });
      _firebaseAppDefault.default.registerVersion("@firebase/auth", "0.16.4");
      _firebaseAppDefault.default.INTERNAL.extendNamespace({
        User: Im
      });
    } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
  })();
}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

},{"@firebase/app":"6IUA5","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"5Eq2v":[function(require,module,exports) {
'use strict';

require('@firebase/firestore');


},{"@firebase/firestore":"6C1I5"}],"6C1I5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "registerFirestore", function () {
  return L;
});
var _firebaseApp = require("@firebase/app");
var _firebaseAppDefault = _parcelHelpers.interopDefault(_firebaseApp);
require("@firebase/logger");
require("@firebase/util");
require("@firebase/webchannel-wrapper");
require("tslib");
var _prebuilt67479dbf318e5a2cJs = require("./prebuilt-67479dbf-318e5a2c.js");
var _firebaseComponent = require("@firebase/component");
var I = {
  Firestore: _prebuilt67479dbf318e5a2cJs.Q,
  GeoPoint: _prebuilt67479dbf318e5a2cJs.Z,
  Timestamp: _prebuilt67479dbf318e5a2cJs.K,
  Blob: _prebuilt67479dbf318e5a2cJs.L,
  Transaction: _prebuilt67479dbf318e5a2cJs.j,
  WriteBatch: _prebuilt67479dbf318e5a2cJs.G,
  DocumentReference: _prebuilt67479dbf318e5a2cJs.H,
  DocumentSnapshot: _prebuilt67479dbf318e5a2cJs.a,
  Query: _prebuilt67479dbf318e5a2cJs.e,
  QueryDocumentSnapshot: _prebuilt67479dbf318e5a2cJs.t,
  QuerySnapshot: _prebuilt67479dbf318e5a2cJs.s,
  CollectionReference: _prebuilt67479dbf318e5a2cJs.i,
  FieldPath: _prebuilt67479dbf318e5a2cJs.o,
  FieldValue: _prebuilt67479dbf318e5a2cJs.c,
  setLogLevel: _prebuilt67479dbf318e5a2cJs.W,
  CACHE_SIZE_UNLIMITED: _prebuilt67479dbf318e5a2cJs.Y
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Registers the main Firestore build with the components framework.
* Persistence can be enabled via `firebase.firestore().enablePersistence()`.
*/
function L(e) {
  (!/**
  * Configures Firestore as part of the Firebase SDK by calling registerService.
  *
  * @param firebase - The FirebaseNamespace to register Firestore with
  * @param firestoreFactory - A factory function that returns a new Firestore
  *    instance.
  */
  (function (e, r) {
    e.INTERNAL.registerComponent(new _firebaseComponent.Component("firestore", function (e) {
      var t = e.getProvider("app").getImmediate();
      return r(t, e.getProvider("auth-internal"));
    }, "PUBLIC").setServiceProps(Object.assign({}, I)));
  })(e, function (e, s) {
    return new _prebuilt67479dbf318e5a2cJs.Q(e, new _prebuilt67479dbf318e5a2cJs.X(e, s), new _prebuilt67479dbf318e5a2cJs.U());
  }), e.registerVersion("@firebase/firestore", "2.1.7"));
}
L(_firebaseAppDefault.default);

},{"@firebase/app":"6IUA5","@firebase/logger":"5PuYX","@firebase/util":"3bR6t","@firebase/webchannel-wrapper":"71Sz5","tslib":"4rd38","./prebuilt-67479dbf-318e5a2c.js":"3aOqI","@firebase/component":"5qT0x","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"71Sz5":[function(require,module,exports) {
var global = arguments[3];
(function () {
  /*
  
  Copyright The Closure Library Authors.
  SPDX-License-Identifier: Apache-2.0
  */
  var m;
  function aa(a) {
    var b = 0;
    return function () {
      return b < a.length ? {
        done: !1,
        value: a[b++]
      } : {
        done: !0
      };
    };
  }
  function p(a) {
    var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
    return b ? b.call(a) : {
      next: aa(a)
    };
  }
  var ba = "function" == typeof Object.create ? Object.create : function (a) {
    function b() {}
    b.prototype = a;
    return new b();
  }, ca = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
    if (a == Array.prototype || a == Object.prototype) return a;
    a[b] = c.value;
    return a;
  };
  function da(a) {
    a = ["object" == typeof globalThis && globalThis, a, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global];
    for (var b = 0; b < a.length; ++b) {
      var c = a[b];
      if (c && c.Math == Math) return c;
    }
    throw Error("Cannot find global object");
  }
  var ea = da(this);
  function q(a, b) {
    if (b) a: {
      var c = ea;
      a = a.split(".");
      for (var d = 0; d < a.length - 1; d++) {
        var e = a[d];
        if (!((e in c))) break a;
        c = c[e];
      }
      a = a[a.length - 1];
      d = c[a];
      b = b(d);
      b != d && null != b && ca(c, a, {
        configurable: !0,
        writable: !0,
        value: b
      });
    }
  }
  var fa;
  if ("function" == typeof Object.setPrototypeOf) fa = Object.setPrototypeOf; else {
    var ha;
    a: {
      var ia = {
        Ja: !0
      }, ja = {};
      try {
        ja.__proto__ = ia;
        ha = ja.Ja;
        break a;
      } catch (a) {}
      ha = !1;
    }
    fa = ha ? function (a, b) {
      a.__proto__ = b;
      if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
      return a;
    } : null;
  }
  var la = fa;
  q("Symbol", function (a) {
    function b(e) {
      if (this instanceof b) throw new TypeError("Symbol is not a constructor");
      return new c("jscomp_symbol_" + (e || "") + "_" + d++, e);
    }
    function c(e, f) {
      this.a = e;
      ca(this, "description", {
        configurable: !0,
        writable: !0,
        value: f
      });
    }
    if (a) return a;
    c.prototype.toString = function () {
      return this.a;
    };
    var d = 0;
    return b;
  });
  q("Symbol.iterator", function (a) {
    if (a) return a;
    a = Symbol("Symbol.iterator");
    for (var b = ("Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array").split(" "), c = 0; c < b.length; c++) {
      var d = ea[b[c]];
      "function" === typeof d && "function" != typeof d.prototype[a] && ca(d.prototype, a, {
        configurable: !0,
        writable: !0,
        value: function () {
          return ma(aa(this));
        }
      });
    }
    return a;
  });
  function ma(a) {
    a = {
      next: a
    };
    a[Symbol.iterator] = function () {
      return this;
    };
    return a;
  }
  function t(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  q("WeakMap", function (a) {
    function b(g) {
      this.a = (h += Math.random() + 1).toString();
      if (g) {
        g = p(g);
        for (var l; !(l = g.next()).done; ) (l = l.value, this.set(l[0], l[1]));
      }
    }
    function c() {}
    function d(g) {
      var l = typeof g;
      return "object" === l && null !== g || "function" === l;
    }
    function e(g) {
      if (!t(g, k)) {
        var l = new c();
        ca(g, k, {
          value: l
        });
      }
    }
    function f(g) {
      var l = Object[g];
      l && (Object[g] = function (n) {
        if (n instanceof c) return n;
        Object.isExtensible(n) && e(n);
        return l(n);
      });
    }
    if ((function () {
      if (!a || !Object.seal) return !1;
      try {
        var g = Object.seal({}), l = Object.seal({}), n = new a([[g, 2], [l, 3]]);
        if (2 != n.get(g) || 3 != n.get(l)) return !1;
        n.delete(g);
        n.set(l, 4);
        return !n.has(g) && 4 == n.get(l);
      } catch (r) {
        return !1;
      }
    })()) return a;
    var k = "$jscomp_hidden_" + Math.random();
    f("freeze");
    f("preventExtensions");
    f("seal");
    var h = 0;
    b.prototype.set = function (g, l) {
      if (!d(g)) throw Error("Invalid WeakMap key");
      e(g);
      if (!t(g, k)) throw Error("WeakMap key fail: " + g);
      g[k][this.a] = l;
      return this;
    };
    b.prototype.get = function (g) {
      return d(g) && t(g, k) ? g[k][this.a] : void 0;
    };
    b.prototype.has = function (g) {
      return d(g) && t(g, k) && t(g[k], this.a);
    };
    b.prototype.delete = function (g) {
      return d(g) && t(g, k) && t(g[k], this.a) ? delete g[k][this.a] : !1;
    };
    return b;
  });
  q("Map", function (a) {
    function b() {
      var h = {};
      return h.O = h.next = h.head = h;
    }
    function c(h, g) {
      var l = h.a;
      return ma(function () {
        if (l) {
          for (; l.head != h.a; ) l = l.O;
          for (; l.next != l.head; ) return (l = l.next, {
            done: !1,
            value: g(l)
          });
          l = null;
        }
        return {
          done: !0,
          value: void 0
        };
      });
    }
    function d(h, g) {
      var l = g && typeof g;
      "object" == l || "function" == l ? f.has(g) ? l = f.get(g) : (l = "" + ++k, f.set(g, l)) : l = "p_" + g;
      var n = h.b[l];
      if (n && t(h.b, l)) for (h = 0; h < n.length; h++) {
        var r = n[h];
        if (g !== g && r.key !== r.key || g === r.key) return {
          id: l,
          list: n,
          index: h,
          D: r
        };
      }
      return {
        id: l,
        list: n,
        index: -1,
        D: void 0
      };
    }
    function e(h) {
      this.b = {};
      this.a = b();
      this.size = 0;
      if (h) {
        h = p(h);
        for (var g; !(g = h.next()).done; ) (g = g.value, this.set(g[0], g[1]));
      }
    }
    if ((function () {
      if (!a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal) return !1;
      try {
        var h = Object.seal({
          x: 4
        }), g = new a(p([[h, "s"]]));
        if ("s" != g.get(h) || 1 != g.size || g.get({
          x: 4
        }) || g.set({
          x: 4
        }, "t") != g || 2 != g.size) return !1;
        var l = g.entries(), n = l.next();
        if (n.done || n.value[0] != h || "s" != n.value[1]) return !1;
        n = l.next();
        return n.done || 4 != n.value[0].x || "t" != n.value[1] || !l.next().done ? !1 : !0;
      } catch (r) {
        return !1;
      }
    })()) return a;
    var f = new WeakMap();
    e.prototype.set = function (h, g) {
      h = 0 === h ? 0 : h;
      var l = d(this, h);
      l.list || (l.list = this.b[l.id] = []);
      l.D ? l.D.value = g : (l.D = {
        next: this.a,
        O: this.a.O,
        head: this.a,
        key: h,
        value: g
      }, l.list.push(l.D), this.a.O.next = l.D, this.a.O = l.D, this.size++);
      return this;
    };
    e.prototype.delete = function (h) {
      h = d(this, h);
      return h.D && h.list ? (h.list.splice(h.index, 1), h.list.length || delete this.b[h.id], h.D.O.next = h.D.next, h.D.next.O = h.D.O, h.D.head = null, this.size--, !0) : !1;
    };
    e.prototype.clear = function () {
      this.b = {};
      this.a = this.a.O = b();
      this.size = 0;
    };
    e.prototype.has = function (h) {
      return !!d(this, h).D;
    };
    e.prototype.get = function (h) {
      return (h = d(this, h).D) && h.value;
    };
    e.prototype.entries = function () {
      return c(this, function (h) {
        return [h.key, h.value];
      });
    };
    e.prototype.keys = function () {
      return c(this, function (h) {
        return h.key;
      });
    };
    e.prototype.values = function () {
      return c(this, function (h) {
        return h.value;
      });
    };
    e.prototype.forEach = function (h, g) {
      for (var l = this.entries(), n; !(n = l.next()).done; ) (n = n.value, h.call(g, n[1], n[0], this));
    };
    e.prototype[Symbol.iterator] = e.prototype.entries;
    var k = 0;
    return e;
  });
  q("Set", function (a) {
    function b(c) {
      this.a = new Map();
      if (c) {
        c = p(c);
        for (var d; !(d = c.next()).done; ) this.add(d.value);
      }
      this.size = this.a.size;
    }
    if ((function () {
      if (!a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal) return !1;
      try {
        var c = Object.seal({
          x: 4
        }), d = new a(p([c]));
        if (!d.has(c) || 1 != d.size || d.add(c) != d || 1 != d.size || d.add({
          x: 4
        }) != d || 2 != d.size) return !1;
        var e = d.entries(), f = e.next();
        if (f.done || f.value[0] != c || f.value[1] != c) return !1;
        f = e.next();
        return f.done || f.value[0] == c || 4 != f.value[0].x || f.value[1] != f.value[0] ? !1 : e.next().done;
      } catch (k) {
        return !1;
      }
    })()) return a;
    b.prototype.add = function (c) {
      c = 0 === c ? 0 : c;
      this.a.set(c, c);
      this.size = this.a.size;
      return this;
    };
    b.prototype.delete = function (c) {
      c = this.a.delete(c);
      this.size = this.a.size;
      return c;
    };
    b.prototype.clear = function () {
      this.a.clear();
      this.size = 0;
    };
    b.prototype.has = function (c) {
      return this.a.has(c);
    };
    b.prototype.entries = function () {
      return this.a.entries();
    };
    b.prototype.values = function () {
      return this.a.values();
    };
    b.prototype.keys = b.prototype.values;
    b.prototype[Symbol.iterator] = b.prototype.values;
    b.prototype.forEach = function (c, d) {
      var e = this;
      this.a.forEach(function (f) {
        return c.call(d, f, f, e);
      });
    };
    return b;
  });
  function na(a, b) {
    a instanceof String && (a += "");
    var c = 0, d = !1, e = {
      next: function () {
        if (!d && c < a.length) {
          var f = c++;
          return {
            value: b(f, a[f]),
            done: !1
          };
        }
        d = !0;
        return {
          done: !0,
          value: void 0
        };
      }
    };
    e[Symbol.iterator] = function () {
      return e;
    };
    return e;
  }
  q("Array.prototype.values", function (a) {
    return a ? a : function () {
      return na(this, function (b, c) {
        return c;
      });
    };
  });
  var goog = goog || ({}), u = this || self;
  function oa() {}
  function pa(a) {
    var b = typeof a;
    b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
    return "array" == b || "object" == b && "number" == typeof a.length;
  }
  function v(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
  }
  function qa(a) {
    return Object.prototype.hasOwnProperty.call(a, ra) && a[ra] || (a[ra] = ++sa);
  }
  var ra = "closure_uid_" + (1E9 * Math.random() >>> 0), sa = 0;
  function ta(a, b, c) {
    return a.call.apply(a.bind, arguments);
  }
  function ua(a, b, c) {
    if (!a) throw Error();
    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () {
        var e = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(e, d);
        return a.apply(b, e);
      };
    }
    return function () {
      return a.apply(b, arguments);
    };
  }
  function w(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? w = ta : w = ua;
    return w.apply(null, arguments);
  }
  function va(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function () {
      var d = c.slice();
      d.push.apply(d, arguments);
      return a.apply(this, d);
    };
  }
  function x() {
    return Date.now();
  }
  function y(a, b) {
    function c() {}
    c.prototype = b.prototype;
    a.W = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;
    a.Nb = function (d, e, f) {
      for (var k = Array(arguments.length - 2), h = 2; h < arguments.length; h++) k[h - 2] = arguments[h];
      return b.prototype[e].apply(d, k);
    };
  }
  ;
  function z() {
    0 != wa && (xa[qa(this)] = this);
    this.j = this.j;
    this.i = this.i;
  }
  var wa = 0, xa = {};
  z.prototype.j = !1;
  z.prototype.la = function () {
    if (!this.j && (this.j = !0, this.H(), 0 != wa)) {
      var a = qa(this);
      if (0 != wa && this.i && 0 < this.i.length) throw Error(this + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
      delete xa[a];
    }
  };
  z.prototype.H = function () {
    if (this.i) for (; this.i.length; ) this.i.shift()();
  };
  var ya = Array.prototype.indexOf ? function (a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
  } : function (a, b) {
    if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
    for (var c = 0; c < a.length; c++) if ((c in a) && a[c] === b) return c;
    return -1;
  }, za = Array.prototype.forEach ? function (a, b, c) {
    Array.prototype.forEach.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++) (f in e) && b.call(c, e[f], f, a);
  };
  function Aa(a) {
    a: {
      var b = Ba;
      for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++) if ((e in d) && b.call(void 0, d[e], e, a)) {
        b = e;
        break a;
      }
      b = -1;
    }
    return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
  }
  function Ca(a) {
    return Array.prototype.concat.apply([], arguments);
  }
  function Fa(a) {
    var b = a.length;
    if (0 < b) {
      for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];
      return c;
    }
    return [];
  }
  ;
  function Ga(a) {
    return (/^[\s\xa0]*$/).test(a);
  }
  var Ha = String.prototype.trim ? function (a) {
    return a.trim();
  } : function (a) {
    return (/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/).exec(a)[1];
  };
  function A(a, b) {
    return -1 != a.indexOf(b);
  }
  function Ia(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  ;
  var B;
  a: {
    var Ja = u.navigator;
    if (Ja) {
      var Ka = Ja.userAgent;
      if (Ka) {
        B = Ka;
        break a;
      }
    }
    B = "";
  }
  ;
  function La(a, b, c) {
    for (var d in a) b.call(c, a[d], d, a);
  }
  function Ma(a) {
    var b = {}, c;
    for (c in a) b[c] = a[c];
    return b;
  }
  var Na = ("constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf").split(" ");
  function Oa(a, b) {
    for (var c, d, e = 1; e < arguments.length; e++) {
      d = arguments[e];
      for (c in d) a[c] = d[c];
      for (var f = 0; f < Na.length; f++) (c = Na[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]));
    }
  }
  ;
  function Pa(a) {
    Pa[" "](a);
    return a;
  }
  Pa[" "] = oa;
  function Qa(a, b) {
    var c = Ra;
    return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
  }
  ;
  var Sa = A(B, "Opera"), C = A(B, "Trident") || A(B, "MSIE"), Ta = A(B, "Edge"), Ua = Ta || C, Va = A(B, "Gecko") && !(A(B.toLowerCase(), "webkit") && !A(B, "Edge")) && !(A(B, "Trident") || A(B, "MSIE")) && !A(B, "Edge"), Wa = A(B.toLowerCase(), "webkit") && !A(B, "Edge");
  function Xa() {
    var a = u.document;
    return a ? a.documentMode : void 0;
  }
  var Ya;
  a: {
    var Za = "", $a = (function () {
      var a = B;
      if (Va) return (/rv:([^\);]+)(\)|;)/).exec(a);
      if (Ta) return (/Edge\/([\d\.]+)/).exec(a);
      if (C) return (/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/).exec(a);
      if (Wa) return (/WebKit\/(\S+)/).exec(a);
      if (Sa) return (/(?:Version)[ \/]?(\S+)/).exec(a);
    })();
    $a && (Za = $a ? $a[1] : "");
    if (C) {
      var ab = Xa();
      if (null != ab && ab > parseFloat(Za)) {
        Ya = String(ab);
        break a;
      }
    }
    Ya = Za;
  }
  var Ra = {};
  function bb(a) {
    return Qa(a, function () {
      for (var b = 0, c = Ha(String(Ya)).split("."), d = Ha(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
        var k = c[f] || "", h = d[f] || "";
        do {
          k = (/(\d*)(\D*)(.*)/).exec(k) || ["", "", "", ""];
          h = (/(\d*)(\D*)(.*)/).exec(h) || ["", "", "", ""];
          if (0 == k[0].length && 0 == h[0].length) break;
          b = Ia(0 == k[1].length ? 0 : parseInt(k[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || Ia(0 == k[2].length, 0 == h[2].length) || Ia(k[2], h[2]);
          k = k[3];
          h = h[3];
        } while (0 == b);
      }
      return 0 <= b;
    });
  }
  var cb;
  if (u.document && C) {
    var db = Xa();
    cb = db ? db : parseInt(Ya, 10) || void 0;
  } else cb = void 0;
  var eb = cb;
  var fb = !C || 9 <= Number(eb), gb = C && !bb("9"), hb = (function () {
    if (!u.addEventListener || !Object.defineProperty) return !1;
    var a = !1, b = Object.defineProperty({}, "passive", {
      get: function () {
        a = !0;
      }
    });
    try {
      (u.addEventListener("test", oa, b), u.removeEventListener("test", oa, b));
    } catch (c) {}
    return a;
  })();
  function D(a, b) {
    this.type = a;
    this.a = this.target = b;
    this.defaultPrevented = !1;
  }
  D.prototype.b = function () {
    this.defaultPrevented = !0;
  };
  function E(a, b) {
    D.call(this, a ? a.type : "");
    this.relatedTarget = this.a = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.pointerId = 0;
    this.pointerType = "";
    this.c = null;
    if (a) {
      var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
      this.target = a.target || a.srcElement;
      this.a = b;
      if (b = a.relatedTarget) {
        if (Va) {
          a: {
            try {
              Pa(b.nodeName);
              var e = !0;
              break a;
            } catch (f) {}
            e = !1;
          }
          e || (b = null);
        }
      } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
      this.relatedTarget = b;
      d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
      this.button = a.button;
      this.key = a.key || "";
      this.ctrlKey = a.ctrlKey;
      this.altKey = a.altKey;
      this.shiftKey = a.shiftKey;
      this.metaKey = a.metaKey;
      this.pointerId = a.pointerId || 0;
      this.pointerType = "string" === typeof a.pointerType ? a.pointerType : ib[a.pointerType] || "";
      this.c = a;
      a.defaultPrevented && this.b();
    }
  }
  y(E, D);
  var ib = {
    2: "touch",
    3: "pen",
    4: "mouse"
  };
  E.prototype.b = function () {
    E.W.b.call(this);
    var a = this.c;
    if (a.preventDefault) a.preventDefault(); else if ((a.returnValue = !1, gb)) try {
      if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
    } catch (b) {}
  };
  var F = "closure_listenable_" + (1E6 * Math.random() | 0), jb = 0;
  function kb(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.ea = e;
    this.key = ++jb;
    this.$ = this.aa = !1;
  }
  function lb(a) {
    a.$ = !0;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.ea = null;
  }
  ;
  function mb(a) {
    this.src = a;
    this.a = {};
    this.b = 0;
  }
  mb.prototype.add = function (a, b, c, d, e) {
    var f = a.toString();
    a = this.a[f];
    a || (a = this.a[f] = [], this.b++);
    var k = nb(a, b, d, e);
    -1 < k ? (b = a[k], c || (b.aa = !1)) : (b = new kb(b, this.src, f, !!d, e), b.aa = c, a.push(b));
    return b;
  };
  function ob(a, b) {
    var c = b.type;
    if ((c in a.a)) {
      var d = a.a[c], e = ya(d, b), f;
      (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
      f && (lb(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    }
  }
  function nb(a, b, c, d) {
    for (var e = 0; e < a.length; ++e) {
      var f = a[e];
      if (!f.$ && f.listener == b && f.capture == !!c && f.ea == d) return e;
    }
    return -1;
  }
  ;
  var pb = "closure_lm_" + (1E6 * Math.random() | 0), qb = {}, rb = 0;
  function sb(a, b, c, d, e) {
    if (d && d.once) return tb(a, b, c, d, e);
    if (Array.isArray(b)) {
      for (var f = 0; f < b.length; f++) sb(a, b[f], c, d, e);
      return null;
    }
    c = ub(c);
    return a && a[F] ? a.xa(b, c, v(d) ? !!d.capture : !!d, e) : vb(a, b, c, !1, d, e);
  }
  function vb(a, b, c, d, e, f) {
    if (!b) throw Error("Invalid event type");
    var k = v(e) ? !!e.capture : !!e;
    if (k && !fb) return null;
    var h = wb(a);
    h || (a[pb] = h = new mb(a));
    c = h.add(b, c, d, k, f);
    if (c.proxy) return c;
    d = xb();
    c.proxy = d;
    d.src = a;
    d.listener = c;
    if (a.addEventListener) (hb || (e = k), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e)); else if (a.attachEvent) a.attachEvent(yb(b.toString()), d); else if (a.addListener && a.removeListener) a.addListener(d); else throw Error("addEventListener and attachEvent are unavailable.");
    rb++;
    return c;
  }
  function xb() {
    var a = Ab, b = fb ? function (c) {
      return a.call(b.src, b.listener, c);
    } : function (c) {
      c = a.call(b.src, b.listener, c);
      if (!c) return c;
    };
    return b;
  }
  function tb(a, b, c, d, e) {
    if (Array.isArray(b)) {
      for (var f = 0; f < b.length; f++) tb(a, b[f], c, d, e);
      return null;
    }
    c = ub(c);
    return a && a[F] ? a.ya(b, c, v(d) ? !!d.capture : !!d, e) : vb(a, b, c, !0, d, e);
  }
  function Bb(a, b, c, d, e) {
    if (Array.isArray(b)) for (var f = 0; f < b.length; f++) Bb(a, b[f], c, d, e); else (d = v(d) ? !!d.capture : !!d, c = ub(c), a && a[F]) ? (a = a.c, b = String(b).toString(), (b in a.a) && (f = a.a[b], c = nb(f, c, d, e), -1 < c && (lb(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = wb(a)) && (b = a.a[b.toString()], a = -1, b && (a = nb(b, c, d, e)), (c = -1 < a ? b[a] : null) && Cb(c));
  }
  function Cb(a) {
    if ("number" !== typeof a && a && !a.$) {
      var b = a.src;
      if (b && b[F]) ob(b.c, a); else {
        var c = a.type, d = a.proxy;
        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(yb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
        rb--;
        (c = wb(b)) ? (ob(c, a), 0 == c.b && (c.src = null, b[pb] = null)) : lb(a);
      }
    }
  }
  function yb(a) {
    return (a in qb) ? qb[a] : qb[a] = "on" + a;
  }
  function Db(a, b) {
    var c = a.listener, d = a.ea || a.src;
    a.aa && Cb(a);
    return c.call(d, b);
  }
  function Ab(a, b) {
    if (a.$) return !0;
    if (!fb) {
      if (!b) a: {
        b = ["window", "event"];
        for (var c = u, d = 0; d < b.length; d++) if ((c = c[b[d]], null == c)) {
          b = null;
          break a;
        }
        b = c;
      }
      b = new E(b, this);
      return Db(a, b);
    }
    return Db(a, new E(b, this));
  }
  function wb(a) {
    a = a[pb];
    return a instanceof mb ? a : null;
  }
  var Eb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
  function ub(a) {
    if ("function" === typeof a) return a;
    a[Eb] || (a[Eb] = function (b) {
      return a.handleEvent(b);
    });
    return a[Eb];
  }
  ;
  function G() {
    z.call(this);
    this.c = new mb(this);
    this.K = this;
    this.C = null;
  }
  y(G, z);
  G.prototype[F] = !0;
  m = G.prototype;
  m.addEventListener = function (a, b, c, d) {
    sb(this, a, b, c, d);
  };
  m.removeEventListener = function (a, b, c, d) {
    Bb(this, a, b, c, d);
  };
  function H(a, b) {
    var c, d = a.C;
    if (d) for (c = []; d; d = d.C) c.push(d);
    a = a.K;
    d = b.type || b;
    if ("string" === typeof b) b = new D(b, a); else if (b instanceof D) b.target = b.target || a; else {
      var e = b;
      b = new D(d, a);
      Oa(b, e);
    }
    e = !0;
    if (c) for (var f = c.length - 1; 0 <= f; f--) {
      var k = b.a = c[f];
      e = Fb(k, d, !0, b) && e;
    }
    k = b.a = a;
    e = Fb(k, d, !0, b) && e;
    e = Fb(k, d, !1, b) && e;
    if (c) for (f = 0; f < c.length; f++) (k = b.a = c[f], e = Fb(k, d, !1, b) && e);
  }
  m.H = function () {
    G.W.H.call(this);
    if (this.c) {
      var a = this.c, b = 0, c;
      for (c in a.a) {
        for (var d = a.a[c], e = 0; e < d.length; e++) (++b, lb(d[e]));
        delete a.a[c];
        a.b--;
      }
    }
    this.C = null;
  };
  m.xa = function (a, b, c, d) {
    return this.c.add(String(a), b, !1, c, d);
  };
  m.ya = function (a, b, c, d) {
    return this.c.add(String(a), b, !0, c, d);
  };
  function Fb(a, b, c, d) {
    b = a.c.a[String(b)];
    if (!b) return !0;
    b = b.concat();
    for (var e = !0, f = 0; f < b.length; ++f) {
      var k = b[f];
      if (k && !k.$ && k.capture == c) {
        var h = k.listener, g = k.ea || k.src;
        k.aa && ob(a.c, k);
        e = !1 !== h.call(g, d) && e;
      }
    }
    return e && !d.defaultPrevented;
  }
  ;
  var Gb = u.JSON.stringify;
  function Hb(a, b) {
    this.c = a;
    this.f = b;
    this.b = 0;
    this.a = null;
  }
  Hb.prototype.get = function () {
    if (0 < this.b) {
      this.b--;
      var a = this.a;
      this.a = a.next;
      a.next = null;
    } else a = this.c();
    return a;
  };
  function Ib() {
    this.b = this.a = null;
  }
  var Kb = new Hb(function () {
    return new Jb();
  }, function (a) {
    a.reset();
  });
  Ib.prototype.add = function (a, b) {
    var c = Kb.get();
    c.set(a, b);
    this.b ? this.b.next = c : this.a = c;
    this.b = c;
  };
  function Lb() {
    var a = Mb, b = null;
    a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
    return b;
  }
  function Jb() {
    this.next = this.b = this.a = null;
  }
  Jb.prototype.set = function (a, b) {
    this.a = a;
    this.b = b;
    this.next = null;
  };
  Jb.prototype.reset = function () {
    this.next = this.b = this.a = null;
  };
  function Nb(a) {
    u.setTimeout(function () {
      throw a;
    }, 0);
  }
  ;
  function Ob(a, b) {
    Pb || Qb();
    Rb || (Pb(), Rb = !0);
    Mb.add(a, b);
  }
  var Pb;
  function Qb() {
    var a = u.Promise.resolve(void 0);
    Pb = function () {
      a.then(Sb);
    };
  }
  var Rb = !1, Mb = new Ib();
  function Sb() {
    for (var a; a = Lb(); ) {
      try {
        a.a.call(a.b);
      } catch (c) {
        Nb(c);
      }
      var b = Kb;
      b.f(a);
      100 > b.b && (b.b++, a.next = b.a, b.a = a);
    }
    Rb = !1;
  }
  ;
  function Tb(a, b) {
    G.call(this);
    this.b = a || 1;
    this.a = b || u;
    this.f = w(this.bb, this);
    this.g = x();
  }
  y(Tb, G);
  m = Tb.prototype;
  m.ca = !1;
  m.N = null;
  m.bb = function () {
    if (this.ca) {
      var a = x() - this.g;
      0 < a && a < .8 * this.b ? this.N = this.a.setTimeout(this.f, this.b - a) : (this.N && (this.a.clearTimeout(this.N), this.N = null), H(this, "tick"), this.ca && (Ub(this), this.start()));
    }
  };
  m.start = function () {
    this.ca = !0;
    this.N || (this.N = this.a.setTimeout(this.f, this.b), this.g = x());
  };
  function Ub(a) {
    a.ca = !1;
    a.N && (a.a.clearTimeout(a.N), a.N = null);
  }
  m.H = function () {
    Tb.W.H.call(this);
    Ub(this);
    delete this.a;
  };
  function Vb(a, b, c) {
    if ("function" === typeof a) c && (a = w(a, c)); else if (a && "function" == typeof a.handleEvent) a = w(a.handleEvent, a); else throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : u.setTimeout(a, b || 0);
  }
  ;
  function I(a, b, c) {
    z.call(this);
    this.g = null != c ? a.bind(c) : a;
    this.h = b;
    this.b = null;
    this.c = !1;
    this.a = null;
  }
  I.prototype = ba(z.prototype);
  I.prototype.constructor = I;
  if (la) la(I, z); else for (var J in z) if ("prototype" != J) if (Object.defineProperties) {
    var Wb = Object.getOwnPropertyDescriptor(z, J);
    Wb && Object.defineProperty(I, J, Wb);
  } else I[J] = z[J];
  I.W = z.prototype;
  I.prototype.f = function (a) {
    this.b = arguments;
    this.a ? this.c = !0 : Xb(this);
  };
  I.prototype.H = function () {
    z.prototype.H.call(this);
    this.a && (u.clearTimeout(this.a), this.a = null, this.c = !1, this.b = null);
  };
  function Xb(a) {
    a.a = Vb(function () {
      a.a = null;
      a.c && (a.c = !1, Xb(a));
    }, a.h);
    var b = a.b;
    a.b = null;
    a.g.apply(null, b);
  }
  ;
  function Yb(a) {
    z.call(this);
    this.b = a;
    this.a = {};
  }
  y(Yb, z);
  var Zb = [];
  function $b(a, b, c, d) {
    Array.isArray(c) || (c && (Zb[0] = c.toString()), c = Zb);
    for (var e = 0; e < c.length; e++) {
      var f = sb(b, c[e], d || a.handleEvent, !1, a.b || a);
      if (!f) break;
      a.a[f.key] = f;
    }
  }
  function ac(a) {
    La(a.a, function (b, c) {
      this.a.hasOwnProperty(c) && Cb(b);
    }, a);
    a.a = {};
  }
  Yb.prototype.H = function () {
    Yb.W.H.call(this);
    ac(this);
  };
  Yb.prototype.handleEvent = function () {
    throw Error("EventHandler.handleEvent not implemented");
  };
  function bc() {
    this.a = !0;
  }
  function cc(a, b, c, d, e, f) {
    a.info(function () {
      if (a.a) if (f) {
        var k = "";
        for (var h = f.split("&"), g = 0; g < h.length; g++) {
          var l = h[g].split("=");
          if (1 < l.length) {
            var n = l[0];
            l = l[1];
            var r = n.split("_");
            k = 2 <= r.length && "type" == r[1] ? k + (n + "=" + l + "&") : k + (n + "=redacted&");
          }
        }
      } else k = null; else k = f;
      return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + k;
    });
  }
  function dc(a, b, c, d, e, f, k) {
    a.info(function () {
      return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + k;
    });
  }
  function K(a, b, c, d) {
    a.info(function () {
      return "XMLHTTP TEXT (" + b + "): " + ec(a, c) + (d ? " " + d : "");
    });
  }
  function fc(a, b) {
    a.info(function () {
      return "TIMEOUT: " + b;
    });
  }
  bc.prototype.info = function () {};
  function ec(a, b) {
    if (!a.a) return b;
    if (!b) return null;
    try {
      var c = JSON.parse(b);
      if (c) for (a = 0; a < c.length; a++) if (Array.isArray(c[a])) {
        var d = c[a];
        if (!(2 > d.length)) {
          var e = d[1];
          if (Array.isArray(e) && !(1 > e.length)) {
            var f = e[0];
            if ("noop" != f && "stop" != f && "close" != f) for (var k = 1; k < e.length; k++) e[k] = "";
          }
        }
      }
      return Gb(c);
    } catch (h) {
      return b;
    }
  }
  ;
  var L = {}, gc = null;
  function hc() {
    return gc = gc || new G();
  }
  L.Ha = "serverreachability";
  function ic(a) {
    D.call(this, L.Ha, a);
  }
  y(ic, D);
  function jc(a) {
    var b = hc();
    H(b, new ic(b, a));
  }
  L.STAT_EVENT = "statevent";
  function kc(a, b) {
    D.call(this, L.STAT_EVENT, a);
    this.stat = b;
  }
  y(kc, D);
  function M(a) {
    var b = hc();
    H(b, new kc(b, a));
  }
  L.Ia = "timingevent";
  function lc(a) {
    D.call(this, L.Ia, a);
  }
  y(lc, D);
  function mc(a, b) {
    if ("function" !== typeof a) throw Error("Fn must not be null and must be a function");
    return u.setTimeout(function () {
      a();
    }, b);
  }
  ;
  var nc = {
    NO_ERROR: 0,
    cb: 1,
    qb: 2,
    pb: 3,
    kb: 4,
    ob: 5,
    rb: 6,
    Fa: 7,
    TIMEOUT: 8,
    ub: 9
  };
  var oc = {
    ib: "complete",
    Eb: "success",
    Ga: "error",
    Fa: "abort",
    wb: "ready",
    xb: "readystatechange",
    TIMEOUT: "timeout",
    sb: "incrementaldata",
    vb: "progress",
    lb: "downloadprogress",
    Mb: "uploadprogress"
  };
  function pc() {}
  pc.prototype.a = null;
  function qc(a) {
    var b;
    (b = a.a) || (b = a.a = {});
    return b;
  }
  ;
  function rc() {}
  var sc = {
    OPEN: "a",
    hb: "b",
    Ga: "c",
    tb: "d"
  };
  function tc() {
    D.call(this, "d");
  }
  y(tc, D);
  function uc() {
    D.call(this, "c");
  }
  y(uc, D);
  var vc;
  function wc() {}
  y(wc, pc);
  vc = new wc();
  function xc(a, b, c, d) {
    this.g = a;
    this.c = b;
    this.f = c;
    this.U = d || 1;
    this.K = new Yb(this);
    this.S = yc;
    a = Ua ? 125 : void 0;
    this.T = new Tb(a);
    this.B = null;
    this.b = !1;
    this.j = this.l = this.i = this.I = this.u = this.V = this.o = null;
    this.s = [];
    this.a = null;
    this.F = 0;
    this.h = this.m = null;
    this.P = -1;
    this.v = !1;
    this.R = 0;
    this.G = null;
    this.Y = this.C = this.X = this.J = !1;
  }
  var yc = 45E3, zc = {}, Ac = {};
  m = xc.prototype;
  m.setTimeout = function (a) {
    this.S = a;
  };
  function Bc(a, b, c) {
    a.I = 1;
    a.i = Cc(N(b));
    a.j = c;
    a.J = !0;
    Dc(a, null);
  }
  function Dc(a, b) {
    a.u = x();
    Ec(a);
    a.l = N(a.i);
    var c = a.l, d = a.U;
    Array.isArray(d) || (d = [String(d)]);
    Fc(c.b, "t", d);
    a.F = 0;
    a.a = Gc(a.g, a.g.C ? b : null);
    0 < a.R && (a.G = new I(w(a.Ea, a, a.a), a.R));
    $b(a.K, a.a, "readystatechange", a.$a);
    b = a.B ? Ma(a.B) : {};
    a.j ? (a.m || (a.m = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.da(a.l, a.m, a.j, b)) : (a.m = "GET", a.a.da(a.l, a.m, null, b));
    jc(1);
    cc(a.c, a.m, a.l, a.f, a.U, a.j);
  }
  m.$a = function (a) {
    a = a.target;
    var b = this.G;
    b && 3 == O(a) ? b.f() : this.Ea(a);
  };
  m.Ea = function (a) {
    try {
      if (a == this.a) a: {
        var b = O(this.a), c = this.a.wa(), d = this.a.Z();
        if (!(3 > b || 3 == b && !Ua && !this.a.ba())) {
          this.v || 4 != b || 7 == c || (8 == c || 0 >= d ? jc(3) : jc(2));
          Hc(this);
          var e = this.a.Z();
          this.P = e;
          var f = this.a.ba();
          this.b = 200 == e;
          dc(this.c, this.m, this.l, this.f, this.U, b, e);
          if (this.b) {
            if (this.X && !this.C) {
              b: {
                if (this.a) {
                  var k, h = this.a;
                  if ((k = h.a ? h.a.getResponseHeader("X-HTTP-Initial-Response") : null) && !Ga(k)) {
                    var g = k;
                    break b;
                  }
                }
                g = null;
              }
              if (g) (K(this.c, this.f, g, "Initial handshake response via X-HTTP-Initial-Response"), this.C = !0, Jc(this, g)); else {
                this.b = !1;
                this.h = 3;
                M(12);
                P(this);
                Kc(this);
                break a;
              }
            }
            this.J ? (Lc(this, b, f), Ua && this.b && 3 == b && ($b(this.K, this.T, "tick", this.Za), this.T.start())) : (K(this.c, this.f, f, null), Jc(this, f));
            4 == b && P(this);
            this.b && !this.v && (4 == b ? Nc(this.g, this) : (this.b = !1, Ec(this)));
          } else (400 == e && 0 < f.indexOf("Unknown SID") ? (this.h = 3, M(12)) : (this.h = 0, M(13)), P(this), Kc(this));
        }
      }
    } catch (l) {} finally {}
  };
  function Lc(a, b, c) {
    for (var d = !0; !a.v && a.F < c.length; ) {
      var e = Oc(a, c);
      if (e == Ac) {
        4 == b && (a.h = 4, M(14), d = !1);
        K(a.c, a.f, null, "[Incomplete Response]");
        break;
      } else if (e == zc) {
        a.h = 4;
        M(15);
        K(a.c, a.f, c, "[Invalid Chunk]");
        d = !1;
        break;
      } else (K(a.c, a.f, e, null), Jc(a, e));
    }
    4 == b && 0 == c.length && (a.h = 1, M(16), d = !1);
    a.b = a.b && d;
    d ? 0 < c.length && !a.Y && (a.Y = !0, b = a.g, b.a == a && b.X && !b.G && (b.c.info("Great, no buffering proxy detected. Bytes received: " + c.length), Pc(b), b.G = !0, M(11))) : (K(a.c, a.f, c, "[Invalid Chunked Response]"), P(a), Kc(a));
  }
  m.Za = function () {
    if (this.a) {
      var a = O(this.a), b = this.a.ba();
      this.F < b.length && (Hc(this), Lc(this, a, b), this.b && 4 != a && Ec(this));
    }
  };
  function Oc(a, b) {
    var c = a.F, d = b.indexOf("\n", c);
    if (-1 == d) return Ac;
    c = Number(b.substring(c, d));
    if (isNaN(c)) return zc;
    d += 1;
    if (d + c > b.length) return Ac;
    b = b.substr(d, c);
    a.F = d + c;
    return b;
  }
  m.cancel = function () {
    this.v = !0;
    P(this);
  };
  function Ec(a) {
    a.V = x() + a.S;
    Qc(a, a.S);
  }
  function Qc(a, b) {
    if (null != a.o) throw Error("WatchDog timer not null");
    a.o = mc(w(a.Ya, a), b);
  }
  function Hc(a) {
    a.o && (u.clearTimeout(a.o), a.o = null);
  }
  m.Ya = function () {
    this.o = null;
    var a = x();
    0 <= a - this.V ? (fc(this.c, this.l), 2 != this.I && (jc(3), M(17)), P(this), this.h = 2, Kc(this)) : Qc(this, this.V - a);
  };
  function Kc(a) {
    0 == a.g.A || a.v || Nc(a.g, a);
  }
  function P(a) {
    Hc(a);
    var b = a.G;
    b && "function" == typeof b.la && b.la();
    a.G = null;
    Ub(a.T);
    ac(a.K);
    a.a && (b = a.a, a.a = null, b.abort(), b.la());
  }
  function Jc(a, b) {
    try {
      var c = a.g;
      if (0 != c.A && (c.a == a || Rc(c.b, a))) if ((c.J = a.P, !a.C && Rc(c.b, a) && 3 == c.A)) {
        try {
          var d = c.ra.a.parse(b);
        } catch (Ic) {
          d = null;
        }
        if (Array.isArray(d) && 3 == d.length) {
          var e = d;
          if (0 == e[0]) a: {
            if (!c.j) {
              if (c.a) if (c.a.u + 3E3 < a.u) (Sc(c), Tc(c)); else break a;
              Uc(c);
              M(18);
            }
          } else (c.qa = e[1], 0 < c.qa - c.S && 37500 > e[2] && c.I && 0 == c.o && !c.m && (c.m = mc(w(c.Va, c), 6E3)));
          if (1 >= Vc(c.b) && c.ga) {
            try {
              c.ga();
            } catch (Ic) {}
            c.ga = void 0;
          }
        } else Q(c, 11);
      } else if (((a.C || c.a == a) && Sc(c), !Ga(b))) for ((b = d = c.ra.a.parse(b), d = 0); d < b.length; d++) if ((e = b[d], c.S = e[0], e = e[1], 2 == c.A)) if ("c" == e[0]) {
        c.K = e[1];
        c.ia = e[2];
        var f = e[3];
        null != f && (c.ja = f, c.c.info("VER=" + c.ja));
        var k = e[4];
        null != k && (c.ma = k, c.c.info("SVER=" + c.ma));
        var h = e[5];
        if (null != h && "number" === typeof h && 0 < h) {
          var g = 1.5 * h;
          c.F = g;
          c.c.info("backChannelRequestTimeoutMs_=" + g);
        }
        g = c;
        var l = a.a;
        if (l) {
          var n = l.a ? l.a.getResponseHeader("X-Client-Wire-Protocol") : null;
          if (n) {
            var r = g.b;
            !r.a && (A(n, "spdy") || A(n, "quic") || A(n, "h2")) && (r.f = r.g, r.a = new Set(), r.b && (Wc(r, r.b), r.b = null));
          }
          if (g.v) {
            var zb = l.a ? l.a.getResponseHeader("X-HTTP-Session-Id") : null;
            zb && (g.pa = zb, R(g.B, g.v, zb));
          }
        }
        c.A = 3;
        c.f && c.f.va();
        c.X && (c.P = x() - a.u, c.c.info("Handshake RTT: " + c.P + "ms"));
        g = c;
        var Da = a;
        g.na = Xc(g, g.C ? g.ia : null, g.ha);
        if (Da.C) {
          Yc(g.b, Da);
          var Ea = Da, Mc = g.F;
          Mc && Ea.setTimeout(Mc);
          Ea.o && (Hc(Ea), Ec(Ea));
          g.a = Da;
        } else Zc(g);
        0 < c.g.length && $c(c);
      } else "stop" != e[0] && "close" != e[0] || Q(c, 7); else 3 == c.A && ("stop" == e[0] || "close" == e[0] ? "stop" == e[0] ? Q(c, 7) : ad(c) : "noop" != e[0] && c.f && c.f.ua(e), c.o = 0);
      jc(4);
    } catch (Ic) {}
  }
  ;
  function bd(a) {
    if (a.L && "function" == typeof a.L) return a.L();
    if ("string" === typeof a) return a.split("");
    if (pa(a)) {
      for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);
      return b;
    }
    b = [];
    c = 0;
    for (d in a) b[c++] = a[d];
    return b;
  }
  function cd(a, b) {
    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0); else if (pa(a) || "string" === typeof a) za(a, b, void 0); else {
      if (a.M && "function" == typeof a.M) var c = a.M(); else if (a.L && "function" == typeof a.L) c = void 0; else if (pa(a) || "string" === typeof a) {
        c = [];
        for (var d = a.length, e = 0; e < d; e++) c.push(e);
      } else for (e in (c = [], d = 0, a)) c[d++] = e;
      d = bd(a);
      e = d.length;
      for (var f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);
    }
  }
  ;
  function S(a, b) {
    this.b = {};
    this.a = [];
    this.c = 0;
    var c = arguments.length;
    if (1 < c) {
      if (c % 2) throw Error("Uneven number of arguments");
      for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
    } else if (a) if (a instanceof S) for ((c = a.M(), d = 0); d < c.length; d++) this.set(c[d], a.get(c[d])); else for (d in a) this.set(d, a[d]);
  }
  m = S.prototype;
  m.L = function () {
    dd(this);
    for (var a = [], b = 0; b < this.a.length; b++) a.push(this.b[this.a[b]]);
    return a;
  };
  m.M = function () {
    dd(this);
    return this.a.concat();
  };
  function dd(a) {
    if (a.c != a.a.length) {
      for (var b = 0, c = 0; b < a.a.length; ) {
        var d = a.a[b];
        T(a.b, d) && (a.a[c++] = d);
        b++;
      }
      a.a.length = c;
    }
    if (a.c != a.a.length) {
      var e = {};
      for (c = b = 0; b < a.a.length; ) (d = a.a[b], T(e, d) || (a.a[c++] = d, e[d] = 1), b++);
      a.a.length = c;
    }
  }
  m.get = function (a, b) {
    return T(this.b, a) ? this.b[a] : b;
  };
  m.set = function (a, b) {
    T(this.b, a) || (this.c++, this.a.push(a));
    this.b[a] = b;
  };
  m.forEach = function (a, b) {
    for (var c = this.M(), d = 0; d < c.length; d++) {
      var e = c[d], f = this.get(e);
      a.call(b, f, e, this);
    }
  };
  function T(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  ;
  var ed = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
  function fd(a, b) {
    if (a) {
      a = a.split("&");
      for (var c = 0; c < a.length; c++) {
        var d = a[c].indexOf("="), e = null;
        if (0 <= d) {
          var f = a[c].substring(0, d);
          e = a[c].substring(d + 1);
        } else f = a[c];
        b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
      }
    }
  }
  ;
  function U(a, b) {
    this.c = this.j = this.f = "";
    this.h = null;
    this.i = this.g = "";
    this.a = !1;
    if (a instanceof U) {
      this.a = void 0 !== b ? b : a.a;
      gd(this, a.f);
      this.j = a.j;
      hd(this, a.c);
      id(this, a.h);
      this.g = a.g;
      b = a.b;
      var c = new jd();
      c.c = b.c;
      b.a && (c.a = new S(b.a), c.b = b.b);
      kd(this, c);
      this.i = a.i;
    } else a && (c = String(a).match(ed)) ? (this.a = !!b, gd(this, c[1] || "", !0), this.j = ld(c[2] || ""), hd(this, c[3] || "", !0), id(this, c[4]), this.g = ld(c[5] || "", !0), kd(this, c[6] || "", !0), this.i = ld(c[7] || "")) : (this.a = !!b, this.b = new jd(null, this.a));
  }
  U.prototype.toString = function () {
    var a = [], b = this.f;
    b && a.push(md(b, nd, !0), ":");
    var c = this.c;
    if (c || "file" == b) (a.push("//"), (b = this.j) && a.push(md(b, nd, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.h, null != c && a.push(":", String(c)));
    if (c = this.g) (this.c && "/" != c.charAt(0) && a.push("/"), a.push(md(c, "/" == c.charAt(0) ? od : pd, !0)));
    (c = this.b.toString()) && a.push("?", c);
    (c = this.i) && a.push("#", md(c, qd));
    return a.join("");
  };
  function N(a) {
    return new U(a);
  }
  function gd(a, b, c) {
    a.f = c ? ld(b, !0) : b;
    a.f && (a.f = a.f.replace(/:$/, ""));
  }
  function hd(a, b, c) {
    a.c = c ? ld(b, !0) : b;
  }
  function id(a, b) {
    if (b) {
      b = Number(b);
      if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
      a.h = b;
    } else a.h = null;
  }
  function kd(a, b, c) {
    b instanceof jd ? (a.b = b, rd(a.b, a.a)) : (c || (b = md(b, sd)), a.b = new jd(b, a.a));
  }
  function R(a, b, c) {
    a.b.set(b, c);
  }
  function Cc(a) {
    R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ x()).toString(36));
    return a;
  }
  function td(a) {
    return a instanceof U ? N(a) : new U(a, void 0);
  }
  function ud(a, b, c, d) {
    var e = new U(null, void 0);
    a && gd(e, a);
    b && hd(e, b);
    c && id(e, c);
    d && (e.g = d);
    return e;
  }
  function ld(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
  }
  function md(a, b, c) {
    return "string" === typeof a ? (a = encodeURI(a).replace(b, vd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
  }
  function vd(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
  }
  var nd = /[#\/\?@]/g, pd = /[#\?:]/g, od = /[#\?]/g, sd = /[#\?@]/g, qd = /#/g;
  function jd(a, b) {
    this.b = this.a = null;
    this.c = a || null;
    this.f = !!b;
  }
  function V(a) {
    a.a || (a.a = new S(), a.b = 0, a.c && fd(a.c, function (b, c) {
      a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
  }
  m = jd.prototype;
  m.add = function (a, b) {
    V(this);
    this.c = null;
    a = W(this, a);
    var c = this.a.get(a);
    c || this.a.set(a, c = []);
    c.push(b);
    this.b += 1;
    return this;
  };
  function wd(a, b) {
    V(a);
    b = W(a, b);
    T(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, T(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && dd(a)));
  }
  function xd(a, b) {
    V(a);
    b = W(a, b);
    return T(a.a.b, b);
  }
  m.forEach = function (a, b) {
    V(this);
    this.a.forEach(function (c, d) {
      za(c, function (e) {
        a.call(b, e, d, this);
      }, this);
    }, this);
  };
  m.M = function () {
    V(this);
    for (var a = this.a.L(), b = this.a.M(), c = [], d = 0; d < b.length; d++) for (var e = a[d], f = 0; f < e.length; f++) c.push(b[d]);
    return c;
  };
  m.L = function (a) {
    V(this);
    var b = [];
    if ("string" === typeof a) xd(this, a) && (b = Ca(b, this.a.get(W(this, a)))); else {
      a = this.a.L();
      for (var c = 0; c < a.length; c++) b = Ca(b, a[c]);
    }
    return b;
  };
  m.set = function (a, b) {
    V(this);
    this.c = null;
    a = W(this, a);
    xd(this, a) && (this.b -= this.a.get(a).length);
    this.a.set(a, [b]);
    this.b += 1;
    return this;
  };
  m.get = function (a, b) {
    if (!a) return b;
    a = this.L(a);
    return 0 < a.length ? String(a[0]) : b;
  };
  function Fc(a, b, c) {
    wd(a, b);
    0 < c.length && (a.c = null, a.a.set(W(a, b), Fa(c)), a.b += c.length);
  }
  m.toString = function () {
    if (this.c) return this.c;
    if (!this.a) return "";
    for (var a = [], b = this.a.M(), c = 0; c < b.length; c++) {
      var d = b[c], e = encodeURIComponent(String(d));
      d = this.L(d);
      for (var f = 0; f < d.length; f++) {
        var k = e;
        "" !== d[f] && (k += "=" + encodeURIComponent(String(d[f])));
        a.push(k);
      }
    }
    return this.c = a.join("&");
  };
  function W(a, b) {
    b = String(b);
    a.f && (b = b.toLowerCase());
    return b;
  }
  function rd(a, b) {
    b && !a.f && (V(a), a.c = null, a.a.forEach(function (c, d) {
      var e = d.toLowerCase();
      d != e && (wd(this, d), Fc(this, e, c));
    }, a));
    a.f = b;
  }
  ;
  function yd(a, b) {
    this.b = a;
    this.a = b;
  }
  ;
  function zd(a) {
    this.g = a || Ad;
    u.PerformanceNavigationTiming ? (a = u.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(u.ka && u.ka.Aa && u.ka.Aa() && u.ka.Aa().Ob);
    this.f = a ? this.g : 1;
    this.a = null;
    1 < this.f && (this.a = new Set());
    this.b = null;
    this.c = [];
  }
  var Ad = 10;
  function Bd(a) {
    return a.b ? !0 : a.a ? a.a.size >= a.f : !1;
  }
  function Vc(a) {
    return a.b ? 1 : a.a ? a.a.size : 0;
  }
  function Rc(a, b) {
    return a.b ? a.b == b : a.a ? a.a.has(b) : !1;
  }
  function Wc(a, b) {
    a.a ? a.a.add(b) : a.b = b;
  }
  function Yc(a, b) {
    a.b && a.b == b ? a.b = null : a.a && a.a.has(b) && a.a.delete(b);
  }
  zd.prototype.cancel = function () {
    this.c = Cd(this);
    if (this.b) (this.b.cancel(), this.b = null); else if (this.a && 0 !== this.a.size) {
      for (var a = p(this.a.values()), b = a.next(); !b.done; b = a.next()) b.value.cancel();
      this.a.clear();
    }
  };
  function Cd(a) {
    if (null != a.b) return a.c.concat(a.b.s);
    if (null != a.a && 0 !== a.a.size) {
      var b = a.c;
      a = p(a.a.values());
      for (var c = a.next(); !c.done; c = a.next()) b = b.concat(c.value.s);
      return b;
    }
    return Fa(a.c);
  }
  ;
  function Dd() {}
  Dd.prototype.stringify = function (a) {
    return u.JSON.stringify(a, void 0);
  };
  Dd.prototype.parse = function (a) {
    return u.JSON.parse(a, void 0);
  };
  function Ed() {
    this.a = new Dd();
  }
  function Fd(a, b, c) {
    var d = c || "";
    try {
      cd(a, function (e, f) {
        var k = e;
        v(e) && (k = Gb(e));
        b.push(d + f + "=" + encodeURIComponent(k));
      });
    } catch (e) {
      throw (b.push(d + "type=" + encodeURIComponent("_badmap")), e);
    }
  }
  ;
  function Gd(a, b) {
    var c = new bc();
    if (u.Image) {
      var d = new Image();
      d.onload = va(Hd, c, d, "TestLoadImage: loaded", !0, b);
      d.onerror = va(Hd, c, d, "TestLoadImage: error", !1, b);
      d.onabort = va(Hd, c, d, "TestLoadImage: abort", !1, b);
      d.ontimeout = va(Hd, c, d, "TestLoadImage: timeout", !1, b);
      u.setTimeout(function () {
        if (d.ontimeout) d.ontimeout();
      }, 1E4);
      d.src = a;
    } else b(!1);
  }
  function Hd(a, b, c, d, e) {
    try {
      (b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d));
    } catch (f) {}
  }
  ;
  var Id = u.JSON.parse;
  function X(a) {
    G.call(this);
    this.headers = new S();
    this.I = a || null;
    this.b = !1;
    this.s = this.a = null;
    this.B = "";
    this.h = 0;
    this.f = "";
    this.g = this.v = this.l = this.u = !1;
    this.o = 0;
    this.m = null;
    this.J = Jd;
    this.F = this.G = !1;
  }
  y(X, G);
  var Jd = "", Kd = /^https?$/i, Ld = ["POST", "PUT"];
  m = X.prototype;
  m.da = function (a, b, c, d) {
    if (this.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.B + "; newUri=" + a);
    b = b ? b.toUpperCase() : "GET";
    this.B = a;
    this.f = "";
    this.h = 0;
    this.u = !1;
    this.b = !0;
    this.a = new XMLHttpRequest();
    this.s = this.I ? qc(this.I) : qc(vc);
    this.a.onreadystatechange = w(this.Ba, this);
    try {
      (this.v = !0, this.a.open(b, String(a), !0), this.v = !1);
    } catch (f) {
      Md(this, f);
      return;
    }
    a = c || "";
    var e = new S(this.headers);
    d && cd(d, function (f, k) {
      e.set(k, f);
    });
    d = Aa(e.M());
    c = u.FormData && a instanceof u.FormData;
    !(0 <= ya(Ld, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    e.forEach(function (f, k) {
      this.a.setRequestHeader(k, f);
    }, this);
    this.J && (this.a.responseType = this.J);
    ("withCredentials" in this.a) && this.a.withCredentials !== this.G && (this.a.withCredentials = this.G);
    try {
      (Nd(this), 0 < this.o && ((this.F = Od(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = w(this.za, this)) : this.m = Vb(this.za, this.o, this)), this.l = !0, this.a.send(a), this.l = !1);
    } catch (f) {
      Md(this, f);
    }
  };
  function Od(a) {
    return C && bb(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout;
  }
  function Ba(a) {
    return "content-type" == a.toLowerCase();
  }
  m.za = function () {
    "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, H(this, "timeout"), this.abort(8));
  };
  function Md(a, b) {
    a.b = !1;
    a.a && (a.g = !0, a.a.abort(), a.g = !1);
    a.f = b;
    a.h = 5;
    Pd(a);
    Qd(a);
  }
  function Pd(a) {
    a.u || (a.u = !0, H(a, "complete"), H(a, "error"));
  }
  m.abort = function (a) {
    this.a && this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1, this.h = a || 7, H(this, "complete"), H(this, "abort"), Qd(this));
  };
  m.H = function () {
    this.a && (this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1), Qd(this, !0));
    X.W.H.call(this);
  };
  m.Ba = function () {
    this.j || (this.v || this.l || this.g ? Rd(this) : this.Xa());
  };
  m.Xa = function () {
    Rd(this);
  };
  function Rd(a) {
    if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != O(a) || 2 != a.Z())) if (a.l && 4 == O(a)) Vb(a.Ba, 0, a); else if ((H(a, "readystatechange"), 4 == O(a))) {
      a.b = !1;
      try {
        var b = a.Z();
        a: switch (b) {
          case 200:
          case 201:
          case 202:
          case 204:
          case 206:
          case 304:
          case 1223:
            var c = !0;
            break a;
          default:
            c = !1;
        }
        var d;
        if (!(d = c)) {
          var e;
          if (e = 0 === b) {
            var f = String(a.B).match(ed)[1] || null;
            if (!f && u.self && u.self.location) {
              var k = u.self.location.protocol;
              f = k.substr(0, k.length - 1);
            }
            e = !Kd.test(f ? f.toLowerCase() : "");
          }
          d = e;
        }
        if (d) (H(a, "complete"), H(a, "success")); else {
          a.h = 6;
          try {
            var h = 2 < O(a) ? a.a.statusText : "";
          } catch (g) {
            h = "";
          }
          a.f = h + " [" + a.Z() + "]";
          Pd(a);
        }
      } finally {
        Qd(a);
      }
    }
  }
  function Qd(a, b) {
    if (a.a) {
      Nd(a);
      var c = a.a, d = a.s[0] ? oa : null;
      a.a = null;
      a.s = null;
      b || H(a, "ready");
      try {
        c.onreadystatechange = d;
      } catch (e) {}
    }
  }
  function Nd(a) {
    a.a && a.F && (a.a.ontimeout = null);
    a.m && (u.clearTimeout(a.m), a.m = null);
  }
  function O(a) {
    return a.a ? a.a.readyState : 0;
  }
  m.Z = function () {
    try {
      return 2 < O(this) ? this.a.status : -1;
    } catch (a) {
      return -1;
    }
  };
  m.ba = function () {
    try {
      return this.a ? this.a.responseText : "";
    } catch (a) {
      return "";
    }
  };
  m.Ra = function (a) {
    if (this.a) {
      var b = this.a.responseText;
      a && 0 == b.indexOf(a) && (b = b.substring(a.length));
      return Id(b);
    }
  };
  m.wa = function () {
    return this.h;
  };
  m.Sa = function () {
    return "string" === typeof this.f ? this.f : String(this.f);
  };
  function Sd(a) {
    var b = "";
    La(a, function (c, d) {
      b += d;
      b += ":";
      b += c;
      b += "\r\n";
    });
    return b;
  }
  function Td(a, b, c) {
    a: {
      for (d in c) {
        var d = !1;
        break a;
      }
      d = !0;
    }
    d || (c = Sd(c), "string" === typeof a ? (encodeURIComponent(String(b)), null != c && encodeURIComponent(String(c))) : R(a, b, c));
  }
  ;
  function Ud(a, b, c) {
    return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
  }
  function Vd(a) {
    this.ma = 0;
    this.g = [];
    this.c = new bc();
    this.ia = this.na = this.B = this.ha = this.a = this.pa = this.v = this.Y = this.i = this.R = this.l = null;
    this.Ta = this.T = 0;
    this.Oa = Ud("failFast", !1, a);
    this.I = this.m = this.j = this.h = this.f = null;
    this.U = !0;
    this.J = this.qa = this.S = -1;
    this.V = this.o = this.u = 0;
    this.Ka = Ud("baseRetryDelayMs", 5E3, a);
    this.Ua = Ud("retryDelaySeedMs", 1E4, a);
    this.Pa = Ud("forwardChannelMaxRetries", 2, a);
    this.oa = Ud("forwardChannelRequestTimeoutMs", 2E4, a);
    this.Qa = a && a.g || void 0;
    this.F = void 0;
    this.C = a && a.supportsCrossDomainXhr || !1;
    this.K = "";
    this.b = new zd(a && a.concurrentRequestLimit);
    this.ra = new Ed();
    this.fa = a && a.fastHandshake || !1;
    this.Ma = a && a.b || !1;
    a && a.f && (this.c.a = !1);
    a && a.forceLongPolling && (this.U = !1);
    this.X = !this.fa && this.U && a && a.detectBufferingProxy || !1;
    this.ga = void 0;
    this.P = 0;
    this.G = !1;
    this.s = null;
    (this.Na = a && a.c || !1) && this.c.info("Opt-in to enable Chrome Origin Trials.");
  }
  m = Vd.prototype;
  m.ja = 8;
  m.A = 1;
  function ad(a) {
    Wd(a);
    if (3 == a.A) {
      var b = a.T++, c = N(a.B);
      R(c, "SID", a.K);
      R(c, "RID", b);
      R(c, "TYPE", "terminate");
      Xd(a, c);
      b = new xc(a, a.c, b, void 0);
      b.I = 2;
      b.i = Cc(N(c));
      c = !1;
      u.navigator && u.navigator.sendBeacon && (c = u.navigator.sendBeacon(b.i.toString(), ""));
      !c && u.Image && (new Image().src = b.i, c = !0);
      c || (b.a = Gc(b.g, null), b.a.da(b.i));
      b.u = x();
      Ec(b);
    }
    Yd(a);
  }
  function Tc(a) {
    a.a && (Pc(a), a.a.cancel(), a.a = null);
  }
  function Wd(a) {
    Tc(a);
    a.j && (u.clearTimeout(a.j), a.j = null);
    Sc(a);
    a.b.cancel();
    a.h && ("number" === typeof a.h && u.clearTimeout(a.h), a.h = null);
  }
  function Zd(a, b) {
    a.g.push(new yd(a.Ta++, b));
    3 == a.A && $c(a);
  }
  function $c(a) {
    Bd(a.b) || a.h || (a.h = !0, Ob(a.Da, a), a.u = 0);
  }
  function $d(a, b) {
    if (Vc(a.b) >= a.b.f - (a.h ? 1 : 0)) return !1;
    if (a.h) return (a.g = b.s.concat(a.g), !0);
    if (1 == a.A || 2 == a.A || a.u >= (a.Oa ? 0 : a.Pa)) return !1;
    a.h = mc(w(a.Da, a, b), ae(a, a.u));
    a.u++;
    return !0;
  }
  m.Da = function (a) {
    if (this.h) if ((this.h = null, 1 == this.A)) {
      if (!a) {
        this.T = Math.floor(1E5 * Math.random());
        a = this.T++;
        var b = new xc(this, this.c, a, void 0), c = this.l;
        this.R && (c ? (c = Ma(c), Oa(c, this.R)) : c = this.R);
        null === this.i && (b.B = c);
        var d;
        if (this.fa) a: {
          for (var e = d = 0; e < this.g.length; e++) {
            b: {
              var f = this.g[e];
              if (("__data__" in f.a) && (f = f.a.__data__, "string" === typeof f)) {
                f = f.length;
                break b;
              }
              f = void 0;
            }
            if (void 0 === f) break;
            d += f;
            if (4096 < d) {
              d = e;
              break a;
            }
            if (4096 === d || e === this.g.length - 1) {
              d = e + 1;
              break a;
            }
          }
          d = 1E3;
        } else d = 1E3;
        d = be(this, b, d);
        e = N(this.B);
        R(e, "RID", a);
        R(e, "CVER", 22);
        this.v && R(e, "X-HTTP-Session-Id", this.v);
        Xd(this, e);
        this.i && c && Td(e, this.i, c);
        Wc(this.b, b);
        this.Ma && R(e, "TYPE", "init");
        this.fa ? (R(e, "$req", d), R(e, "SID", "null"), b.X = !0, Bc(b, e, null)) : Bc(b, e, d);
        this.A = 2;
      }
    } else 3 == this.A && (a ? ce(this, a) : 0 == this.g.length || Bd(this.b) || ce(this));
  };
  function ce(a, b) {
    var c;
    b ? c = b.f : c = a.T++;
    var d = N(a.B);
    R(d, "SID", a.K);
    R(d, "RID", c);
    R(d, "AID", a.S);
    Xd(a, d);
    a.i && a.l && Td(d, a.i, a.l);
    c = new xc(a, a.c, c, a.u + 1);
    null === a.i && (c.B = a.l);
    b && (a.g = b.s.concat(a.g));
    b = be(a, c, 1E3);
    c.setTimeout(Math.round(.5 * a.oa) + Math.round(.5 * a.oa * Math.random()));
    Wc(a.b, c);
    Bc(c, d, b);
  }
  function Xd(a, b) {
    a.f && cd({}, function (c, d) {
      R(b, d, c);
    });
  }
  function be(a, b, c) {
    c = Math.min(a.g.length, c);
    var d = a.f ? w(a.f.La, a.f, a) : null;
    a: for (var e = a.g, f = -1; ; ) {
      var k = ["count=" + c];
      -1 == f ? 0 < c ? (f = e[0].b, k.push("ofs=" + f)) : f = 0 : k.push("ofs=" + f);
      for (var h = !0, g = 0; g < c; g++) {
        var l = e[g].b, n = e[g].a;
        l -= f;
        if (0 > l) (f = Math.max(0, e[g].b - 100), h = !1); else try {
          Fd(n, k, "req" + l + "_");
        } catch (r) {
          d && d(n);
        }
      }
      if (h) {
        d = k.join("&");
        break a;
      }
    }
    a = a.g.splice(0, c);
    b.s = a;
    return d;
  }
  function Zc(a) {
    a.a || a.j || (a.V = 1, Ob(a.Ca, a), a.o = 0);
  }
  function Uc(a) {
    if (a.a || a.j || 3 <= a.o) return !1;
    a.V++;
    a.j = mc(w(a.Ca, a), ae(a, a.o));
    a.o++;
    return !0;
  }
  m.Ca = function () {
    this.j = null;
    de(this);
    if (this.X && !(this.G || null == this.a || 0 >= this.P)) {
      var a = 2 * this.P;
      this.c.info("BP detection timer enabled: " + a);
      this.s = mc(w(this.Wa, this), a);
    }
  };
  m.Wa = function () {
    this.s && (this.s = null, this.c.info("BP detection timeout reached."), this.c.info("Buffering proxy detected and switch to long-polling!"), this.I = !1, this.G = !0, M(10), Tc(this), de(this));
  };
  function Pc(a) {
    null != a.s && (u.clearTimeout(a.s), a.s = null);
  }
  function de(a) {
    a.a = new xc(a, a.c, "rpc", a.V);
    null === a.i && (a.a.B = a.l);
    a.a.R = 0;
    var b = N(a.na);
    R(b, "RID", "rpc");
    R(b, "SID", a.K);
    R(b, "CI", a.I ? "0" : "1");
    R(b, "AID", a.S);
    Xd(a, b);
    R(b, "TYPE", "xmlhttp");
    a.i && a.l && Td(b, a.i, a.l);
    a.F && a.a.setTimeout(a.F);
    var c = a.a;
    a = a.ia;
    c.I = 1;
    c.i = Cc(N(b));
    c.j = null;
    c.J = !0;
    Dc(c, a);
  }
  m.Va = function () {
    null != this.m && (this.m = null, Tc(this), Uc(this), M(19));
  };
  function Sc(a) {
    null != a.m && (u.clearTimeout(a.m), a.m = null);
  }
  function Nc(a, b) {
    var c = null;
    if (a.a == b) {
      Sc(a);
      Pc(a);
      a.a = null;
      var d = 2;
    } else if (Rc(a.b, b)) (c = b.s, Yc(a.b, b), d = 1); else return;
    a.J = b.P;
    if (0 != a.A) if (b.b) if (1 == d) {
      c = b.j ? b.j.length : 0;
      b = x() - b.u;
      var e = a.u;
      d = hc();
      H(d, new lc(d, c, b, e));
      $c(a);
    } else Zc(a); else if ((e = b.h, 3 == e || 0 == e && 0 < a.J || !(1 == d && $d(a, b) || 2 == d && Uc(a)))) switch ((c && 0 < c.length && (b = a.b, b.c = b.c.concat(c)), e)) {
      case 1:
        Q(a, 5);
        break;
      case 4:
        Q(a, 10);
        break;
      case 3:
        Q(a, 6);
        break;
      default:
        Q(a, 2);
    }
  }
  function ae(a, b) {
    var c = a.Ka + Math.floor(Math.random() * a.Ua);
    a.f || (c *= 2);
    return c * b;
  }
  function Q(a, b) {
    a.c.info("Error code " + b);
    if (2 == b) {
      var c = null;
      a.f && (c = null);
      var d = w(a.ab, a);
      c || (c = new U("//www.google.com/images/cleardot.gif"), u.location && "http" == u.location.protocol || gd(c, "https"), Cc(c));
      Gd(c.toString(), d);
    } else M(2);
    a.A = 0;
    a.f && a.f.ta(b);
    Yd(a);
    Wd(a);
  }
  m.ab = function (a) {
    a ? (this.c.info("Successfully pinged google.com"), M(2)) : (this.c.info("Failed to ping google.com"), M(1));
  };
  function Yd(a) {
    a.A = 0;
    a.J = -1;
    if (a.f) {
      if (0 != Cd(a.b).length || 0 != a.g.length) (a.b.c.length = 0, Fa(a.g), a.g.length = 0);
      a.f.sa();
    }
  }
  function Xc(a, b, c) {
    var d = td(c);
    if ("" != d.c) (b && hd(d, b + "." + d.c), id(d, d.h)); else {
      var e = u.location;
      d = ud(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
    }
    a.Y && La(a.Y, function (f, k) {
      R(d, k, f);
    });
    b = a.v;
    c = a.pa;
    b && c && R(d, b, c);
    R(d, "VER", a.ja);
    Xd(a, d);
    return d;
  }
  function Gc(a, b) {
    if (b && !a.C) throw Error("Can't create secondary domain capable XhrIo object.");
    b = new X(a.Qa);
    b.G = a.C;
    return b;
  }
  function ee() {}
  m = ee.prototype;
  m.va = function () {};
  m.ua = function () {};
  m.ta = function () {};
  m.sa = function () {};
  m.La = function () {};
  function fe() {
    if (C && !(10 <= Number(eb))) throw Error("Environmental error: no available transport.");
  }
  fe.prototype.a = function (a, b) {
    return new Y(a, b);
  };
  function Y(a, b) {
    G.call(this);
    this.a = new Vd(b);
    this.o = a;
    this.b = b && b.messageUrlParams || null;
    a = b && b.messageHeaders || null;
    b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
      "X-Client-Protocol": "webchannel"
    });
    this.a.l = a;
    a = b && b.initMessageHeaders || null;
    b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
      "X-WebChannel-Content-Type": b.messageContentType
    });
    b && b.a && (a ? a["X-WebChannel-Client-Profile"] = b.a : a = {
      "X-WebChannel-Client-Profile": b.a
    });
    this.a.R = a;
    (a = b && b.httpHeadersOverwriteParam) && !Ga(a) && (this.a.i = a);
    this.m = b && b.supportsCrossDomainXhr || !1;
    this.l = b && b.sendRawJson || !1;
    (b = b && b.httpSessionIdParam) && !Ga(b) && (this.a.v = b, a = this.b, null !== a && (b in a) && (a = this.b, (b in a) && delete a[b]));
    this.f = new Z(this);
  }
  y(Y, G);
  Y.prototype.g = function () {
    this.a.f = this.f;
    this.m && (this.a.C = !0);
    var a = this.a, b = this.o, c = this.b || void 0;
    M(0);
    a.ha = b;
    a.Y = c || ({});
    a.I = a.U;
    a.B = Xc(a, null, a.ha);
    $c(a);
  };
  Y.prototype.close = function () {
    ad(this.a);
  };
  Y.prototype.h = function (a) {
    if ("string" === typeof a) {
      var b = {};
      b.__data__ = a;
      Zd(this.a, b);
    } else this.l ? (b = {}, b.__data__ = Gb(a), Zd(this.a, b)) : Zd(this.a, a);
  };
  Y.prototype.H = function () {
    this.a.f = null;
    delete this.f;
    ad(this.a);
    delete this.a;
    Y.W.H.call(this);
  };
  function ge(a) {
    tc.call(this);
    var b = a.__sm__;
    if (b) {
      a: {
        for (var c in b) {
          a = c;
          break a;
        }
        a = void 0;
      }
      (this.c = a) ? (a = this.c, this.data = null !== b && (a in b) ? b[a] : void 0) : this.data = b;
    } else this.data = a;
  }
  y(ge, tc);
  function he() {
    uc.call(this);
    this.status = 1;
  }
  y(he, uc);
  function Z(a) {
    this.a = a;
  }
  y(Z, ee);
  Z.prototype.va = function () {
    H(this.a, "a");
  };
  Z.prototype.ua = function (a) {
    H(this.a, new ge(a));
  };
  Z.prototype.ta = function (a) {
    H(this.a, new he(a));
  };
  Z.prototype.sa = function () {
    H(this.a, "b");
  };
  /*
  
  Copyright 2017 Google LLC
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  fe.prototype.createWebChannel = fe.prototype.a;
  Y.prototype.send = Y.prototype.h;
  Y.prototype.open = Y.prototype.g;
  Y.prototype.close = Y.prototype.close;
  nc.NO_ERROR = 0;
  nc.TIMEOUT = 8;
  nc.HTTP_ERROR = 6;
  oc.COMPLETE = "complete";
  rc.EventType = sc;
  sc.OPEN = "a";
  sc.CLOSE = "b";
  sc.ERROR = "c";
  sc.MESSAGE = "d";
  G.prototype.listen = G.prototype.xa;
  X.prototype.listenOnce = X.prototype.ya;
  X.prototype.getLastError = X.prototype.Sa;
  X.prototype.getLastErrorCode = X.prototype.wa;
  X.prototype.getStatus = X.prototype.Z;
  X.prototype.getResponseJson = X.prototype.Ra;
  X.prototype.getResponseText = X.prototype.ba;
  X.prototype.send = X.prototype.da;
  module.exports.createWebChannelTransport = function () {
    return new fe();
  };
  module.exports.getStatEventTarget = function () {
    return hc();
  };
  module.exports.ErrorCode = nc;
  module.exports.EventType = oc;
  module.exports.Event = L;
  module.exports.Stat = {
    jb: 0,
    mb: 1,
    nb: 2,
    Gb: 3,
    Lb: 4,
    Ib: 5,
    Jb: 6,
    Hb: 7,
    Fb: 8,
    Kb: 9,
    PROXY: 10,
    NOPROXY: 11,
    Db: 12,
    zb: 13,
    Ab: 14,
    yb: 15,
    Bb: 16,
    Cb: 17,
    fb: 18,
    eb: 19,
    gb: 20
  };
  module.exports.WebChannel = rc;
  module.exports.XhrIo = X;
}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

},{}],"3aOqI":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "G", function () {
  return xc;
});
_parcelHelpers.export(exports, "H", function () {
  return Oc;
});
_parcelHelpers.export(exports, "K", function () {
  return K;
});
_parcelHelpers.export(exports, "L", function () {
  return Ec;
});
_parcelHelpers.export(exports, "Q", function () {
  return Nc;
});
_parcelHelpers.export(exports, "U", function () {
  return Tc;
});
_parcelHelpers.export(exports, "W", function () {
  return Dc;
});
_parcelHelpers.export(exports, "X", function () {
  return Ma;
});
_parcelHelpers.export(exports, "Y", function () {
  return Ua;
});
_parcelHelpers.export(exports, "Z", function () {
  return Hs;
});
_parcelHelpers.export(exports, "a", function () {
  return Lc;
});
_parcelHelpers.export(exports, "b", function () {
  return Bc;
});
_parcelHelpers.export(exports, "c", function () {
  return Gc;
});
_parcelHelpers.export(exports, "e", function () {
  return Uc;
});
_parcelHelpers.export(exports, "i", function () {
  return Fc;
});
_parcelHelpers.export(exports, "j", function () {
  return Sc;
});
_parcelHelpers.export(exports, "o", function () {
  return zc;
});
_parcelHelpers.export(exports, "s", function () {
  return qc;
});
_parcelHelpers.export(exports, "t", function () {
  return Rc;
});
_parcelHelpers.export(exports, "u", function () {
  return Qc;
});
var _firebaseLogger = require("@firebase/logger");
var _firebaseUtil = require("@firebase/util");
var _firebaseWebchannelWrapper = require("@firebase/webchannel-wrapper");
var _tslib = require("tslib");
var process = require("process");
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var _ = /**
* Constructs a DatabaseInfo using the provided host, databaseId and
* persistenceKey.
*
* @param databaseId - The database to use.
* @param persistenceKey - A unique identifier for this Firestore's local
* storage (used in conjunction with the databaseId).
* @param host - The Firestore backend host to connect to.
* @param ssl - Whether to use SSL when connecting.
* @param forceLongPolling - Whether to use the forceLongPolling option
* when using WebChannel as the network transport.
* @param autoDetectLongPolling - Whether to use the detectBufferingProxy
* option when using WebChannel as the network transport.
*/
function (t, e, n, r, i, o) {
  (this.t = t, this.persistenceKey = e, this.host = n, this.ssl = r, this.forceLongPolling = i, this.i = o);
}, I = /** @class*/
(function () {
  function t(t, e) {
    (this.projectId = t, this.database = e || "(default)");
  }
  return (Object.defineProperty(t.prototype, "o", {
    get: function () {
      return "(default)" === this.database;
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.isEqual = function (e) {
    return e instanceof t && e.projectId === this.projectId && e.database === this.database;
  }, t);
})(), E = new _firebaseLogger.Logger("@firebase/firestore");
/** The default database name for a project.*/
/** Represents the database ID a Firestore client is associated with.*/
// Helper methods are needed because variables can't be exported as read/write
function T() {
  return E.logLevel;
}
/**
* Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
*
* @param logLevel - The verbosity you set for activity and error logging. Can
*   be any of the following values:
*
*   <ul>
*     <li>`debug` for the most verbose logging level, primarily for
*     debugging.</li>
*     <li>`error` to log errors only.</li>
*     <li><code>`silent` to turn off logging.</li>
*   </ul>
*/
function N(t) {
  for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
  if (E.logLevel <= _firebaseLogger.LogLevel.DEBUG) {
    var i = n.map(S);
    E.debug.apply(E, _tslib.__spreadArrays(["Firestore (8.2.9): " + t], i));
  }
}
function A(t) {
  for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
  if (E.logLevel <= _firebaseLogger.LogLevel.ERROR) {
    var i = n.map(S);
    E.error.apply(E, _tslib.__spreadArrays(["Firestore (8.2.9): " + t], i));
  }
}
function D(t) {
  for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
  if (E.logLevel <= _firebaseLogger.LogLevel.WARN) {
    var i = n.map(S);
    E.warn.apply(E, _tslib.__spreadArrays(["Firestore (8.2.9): " + t], i));
  }
}
/**
* Converts an additional log parameter to a string representation.
*/
function S(t) {
  if ("string" == typeof t) return t;
  try {
    return (e = t, JSON.stringify(e));
  } catch (e) {
    // Converting to JSON failed, just log the object directly
    return t;
  }
  /**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  /** Formats an object as a JSON string, suitable for logging.*/
  var e;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Unconditionally fails, throwing an Error with the given message.
* Messages are stripped in production builds.
*
* Returns `never` and can be used in expressions:
* @example
* let futureVar = fail('not implemented yet');
*/
function x(t) {
  void 0 === t && (t = "Unexpected state");
  // Log the failure in addition to throw an exception, just in case the
  // exception is swallowed.
  var e = "FIRESTORE (8.2.9) INTERNAL ASSERTION FAILED: " + t;
  // NOTE: We don't use FirestoreError here because these are internal failures
  // that cannot be handled by the user. (Also it would create a circular
  // dependency between the error and assert modules which doesn't work.)
  throw (A(e), new Error(e));
}
function k(t, e) {
  t || x();
}
/**
* Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
* instance of `T` before casting.
*/
function O(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
  return t;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Generates `nBytes` of random bytes.
*
* If `nBytes < 0` , an error will be thrown.
*/
function P(t) {
  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
  var e = // eslint-disable-next-line @typescript-eslint/no-explicit-any
  "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
  if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else // Falls back to Math.random
  for (var r = 0; r < t; r++) n[r] = Math.floor(256 * Math.random());
  return n;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var V = /** @class*/
(function () {
  function t() {}
  return (t.u = function () {
    for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length, n = ""; // The largest byte value that is a multiple of `char.length`.
    n.length < 20; ) for (var r = P(40), i = 0; i < r.length; ++i) // Only accept values that are [0, maxMultiple), this ensures they can
    // be evenly mapped to indices of `chars` via a modulo operation.
    n.length < 20 && r[i] < e && (n += t.charAt(r[i] % t.length));
    return n;
  }, t);
})();
function C(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
/** Helper to compare arrays using isEqual().*/
function L(t, e, n) {
  return t.length === e.length && t.every(function (t, r) {
    return n(t, e[r]);
  });
}
/**
* Returns the immediate lexicographically-following string. This is useful to
* construct an inclusive range for indexeddb iterators.
*/
function R(t) {
  // Return the input string, with an additional NUL byte appended.
  return t + "\0";
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Immutable class that represents a "proto" byte string.
*
* Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
* sent on the wire. This class abstracts away this differentiation by holding
* the proto byte string in a common class that must be converted into a string
* before being sent as a proto.
*/
var U = /** @class*/
(function () {
  function t(t) {
    this.h = t;
  }
  return (t.fromBase64String = function (e) {
    return new t(atob(e));
  }, t.fromUint8Array = function (e) {
    return new t(/**
    * Helper function to convert an Uint8array to a binary string.
    */
    (function (t) {
      for (var e = "", n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
      return e;
    })(e));
  }, t.prototype.toBase64 = function () {
    return (t = this.h, btoa(t));
    /** Converts a binary string to a Base64 encoded string.*/
    var t;
  }, t.prototype.toUint8Array = function () {
    return (function (t) {
      for (var e = new Uint8Array(t.length), n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
      return e;
    })(this.h);
  }, t.prototype.l = function () {
    return 2 * this.h.length;
  }, t.prototype._ = function (t) {
    return C(this.h, t.h);
  }, t.prototype.isEqual = function (t) {
    return this.h === t.h;
  }, t);
})();
U.T = new U("");
var M = {
  // Causes are copied from:
  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
  /** Not an error; returned on success.*/
  OK: "ok",
  /** The operation was cancelled (typically by the caller).*/
  CANCELLED: "cancelled",
  /** Unknown error or an error from a different error domain.*/
  UNKNOWN: "unknown",
  /**
  * Client specified an invalid argument. Note that this differs from
  * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
  * problematic regardless of the state of the system (e.g., a malformed file
  * name).
  */
  INVALID_ARGUMENT: "invalid-argument",
  /**
  * Deadline expired before operation could complete. For operations that
  * change the state of the system, this error may be returned even if the
  * operation has completed successfully. For example, a successful response
  * from a server could have been delayed long enough for the deadline to
  * expire.
  */
  DEADLINE_EXCEEDED: "deadline-exceeded",
  /** Some requested entity (e.g., file or directory) was not found.*/
  NOT_FOUND: "not-found",
  /**
  * Some entity that we attempted to create (e.g., file or directory) already
  * exists.
  */
  ALREADY_EXISTS: "already-exists",
  /**
  * The caller does not have permission to execute the specified operation.
  * PERMISSION_DENIED must not be used for rejections caused by exhausting
  * some resource (use RESOURCE_EXHAUSTED instead for those errors).
  * PERMISSION_DENIED must not be used if the caller can not be identified
  * (use UNAUTHENTICATED instead for those errors).
  */
  PERMISSION_DENIED: "permission-denied",
  /**
  * The request does not have valid authentication credentials for the
  * operation.
  */
  UNAUTHENTICATED: "unauthenticated",
  /**
  * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
  * entire file system is out of space.
  */
  RESOURCE_EXHAUSTED: "resource-exhausted",
  /**
  * Operation was rejected because the system is not in a state required for
  * the operation's execution. For example, directory to be deleted may be
  * non-empty, an rmdir operation is applied to a non-directory, etc.
  *
  * A litmus test that may help a service implementor in deciding
  * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
  *  (a) Use UNAVAILABLE if the client can retry just the failing call.
  *  (b) Use ABORTED if the client should retry at a higher-level
  *      (e.g., restarting a read-modify-write sequence).
  *  (c) Use FAILED_PRECONDITION if the client should not retry until
  *      the system state has been explicitly fixed. E.g., if an "rmdir"
  *      fails because the directory is non-empty, FAILED_PRECONDITION
  *      should be returned since the client should not retry unless
  *      they have first fixed up the directory by deleting files from it.
  *  (d) Use FAILED_PRECONDITION if the client performs conditional
  *      REST Get/Update/Delete on a resource and the resource on the
  *      server does not match the condition. E.g., conflicting
  *      read-modify-write on the same resource.
  */
  FAILED_PRECONDITION: "failed-precondition",
  /**
  * The operation was aborted, typically due to a concurrency issue like
  * sequencer check failures, transaction aborts, etc.
  *
  * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
  * and UNAVAILABLE.
  */
  ABORTED: "aborted",
  /**
  * Operation was attempted past the valid range. E.g., seeking or reading
  * past end of file.
  *
  * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
  * if the system state changes. For example, a 32-bit file system will
  * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
  * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
  * an offset past the current file size.
  *
  * There is a fair bit of overlap between FAILED_PRECONDITION and
  * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
  * when it applies so that callers who are iterating through a space can
  * easily look for an OUT_OF_RANGE error to detect when they are done.
  */
  OUT_OF_RANGE: "out-of-range",
  /** Operation is not implemented or not supported/enabled in this service.*/
  UNIMPLEMENTED: "unimplemented",
  /**
  * Internal errors. Means some invariants expected by underlying System has
  * been broken. If you see one of these errors, Something is very broken.
  */
  INTERNAL: "internal",
  /**
  * The service is currently unavailable. This is a most likely a transient
  * condition and may be corrected by retrying with a backoff.
  *
  * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
  * and UNAVAILABLE.
  */
  UNAVAILABLE: "unavailable",
  /** Unrecoverable data loss or corruption.*/
  DATA_LOSS: "data-loss"
}, q = /** @class*/
(function (t) {
  /** @hideconstructor*/
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, n) || this).code = e, r.message = n, r.name = "FirebaseError", // HACK: We write a toString property directly because Error is not a real
    // class and so inheritance does not work correctly. We could alternatively
    // do the same "back-door inheritance" trick that FirebaseError does.
    r.toString = function () {
      return r.name + ": [code=" + r.code + "]: " + r.message;
    }, r);
  }
  return (_tslib.__extends(e, t), e);
})(Error), F = /** @class*/
(function () {
  /** @hideconstructor*/
  function t(t) {
    this.I = t;
  }
  /**
  * Creates a new `Bytes` object from the given Base64 string, converting it to
  * bytes.
  *
  * @param base64 - The Base64 string used to create the `Bytes` object.
  */
  return (t.fromBase64String = function (e) {
    try {
      return new t(U.fromBase64String(e));
    } catch (e) {
      throw new q(M.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e);
    }
  }, /**
  * Creates a new `Bytes` object from the given Uint8Array.
  *
  * @param array - The Uint8Array used to create the `Bytes` object.
  */
  t.fromUint8Array = function (e) {
    return new t(U.fromUint8Array(e));
  }, /**
  * Returns the underlying bytes as a Base64-encoded string.
  *
  * @returns The Base64-encoded string created from the `Bytes` object.
  */
  t.prototype.toBase64 = function () {
    return this.I.toBase64();
  }, /**
  * Returns the underlying bytes in a new `Uint8Array`.
  *
  * @returns The Uint8Array created from the `Bytes` object.
  */
  t.prototype.toUint8Array = function () {
    return this.I.toUint8Array();
  }, /**
  * Returns a string representation of the `Bytes` object.
  *
  * @returns A string representation of the `Bytes` object.
  */
  t.prototype.toString = function () {
    return "Bytes(base64: " + this.toBase64() + ")";
  }, /**
  * Returns true if this `Bytes` object is equal to the provided one.
  *
  * @param other - The `Bytes` object to compare against.
  * @returns true if this `Bytes` object is equal to the provided one.
  */
  t.prototype.isEqual = function (t) {
    return this.I.isEqual(t.I);
  }, t);
})(), j = /** @class*/
(function () {
  function t(t) {
    this.uid = t;
  }
  return (t.prototype.m = function () {
    return null != this.uid;
  }, /**
  * Returns a key representing this user, suitable for inclusion in a
  * dictionary.
  */
  t.prototype.A = function () {
    return this.m() ? "uid:" + this.uid : "anonymous-user";
  }, t.prototype.isEqual = function (t) {
    return t.uid === this.uid;
  }, t);
})();
/** An error returned by a Firestore operation.*/
/** A user with a null UID.*/
(j.UNAUTHENTICATED = new j(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
j.R = new j("google-credentials-uid"), j.P = new j("first-party-uid"));
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var z = function (t, e) {
  (this.user = e, this.type = "OAuth", this.g = {}, // Set the headers using Object Literal notation to avoid minification
  this.g.Authorization = "Bearer " + t);
}, G = /** @class*/
(function () {
  function t() {
    /**
    * Stores the listener registered with setChangeListener()
    * This isn't actually necessary since the UID never changes, but we use this
    * to verify the listen contract is adhered to in tests.
    */
    this.V = null;
  }
  return (t.prototype.getToken = function () {
    return Promise.resolve(null);
  }, t.prototype.p = function () {}, t.prototype.v = function (t) {
    (this.V = t, // Fire with initial user.
    t(j.UNAUTHENTICATED));
  }, t.prototype.S = function () {
    this.V = null;
  }, t);
})(), B = /** @class*/
(function () {
  function t(t) {
    var e = this;
    /**
    * The auth token listener registered with FirebaseApp, retained here so we
    * can unregister it.
    */
    (this.D = null, /** Tracks the current User.*/
    this.currentUser = j.UNAUTHENTICATED, this.C = !1, /**
    * Counter used to detect if the token changed while a getToken request was
    * outstanding.
    */
    this.N = 0, /** The listener registered with setChangeListener().*/
    this.V = null, this.forceRefresh = !1, this.D = function () {
      (e.N++, e.currentUser = e.$(), e.C = !0, e.V && e.V(e.currentUser));
    }, this.N = 0, this.auth = t.getImmediate({
      optional: !0
    }), this.auth ? this.auth.addAuthTokenListener(this.D) : // if auth is not available, invoke tokenListener once with null token
    (this.D(null), t.get().then(function (t) {
      (e.auth = t, e.D && // tokenListener can be removed by removeChangeListener()
      e.auth.addAuthTokenListener(e.D));
    }, function () {})));
  }
  return (t.prototype.getToken = function () {
    var t = this, e = this.N, n = this.forceRefresh;
    // Take note of the current value of the tokenCounter so that this method
    // can fail (with an ABORTED error) if there is a token change while the
    // request is outstanding.
    return (this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then(function (n) {
      // Cancel the request since the token changed while the request was
      // outstanding so the response is potentially for a previous user (which
      // user, we can't be sure).
      return t.N !== e ? (N("FirebaseCredentialsProvider", "getToken aborted due to token change."), t.getToken()) : n ? (k("string" == typeof n.accessToken), new z(n.accessToken, t.currentUser)) : null;
    }) : Promise.resolve(null));
  }, t.prototype.p = function () {
    this.forceRefresh = !0;
  }, t.prototype.v = function (t) {
    (this.V = t, // Fire the initial event
    this.C && t(this.currentUser));
  }, t.prototype.S = function () {
    (this.auth && this.auth.removeAuthTokenListener(this.D), this.D = null, this.V = null);
  }, // Auth.getUid() can return null even with a user logged in. It is because
  // getUid() is synchronous, but the auth code populating Uid is asynchronous.
  // This method should only be called in the AuthTokenListener callback
  // to guarantee to get the actual user.
  t.prototype.$ = function () {
    var t = this.auth && this.auth.getUid();
    return (k(null === t || "string" == typeof t), new j(t));
  }, t);
})(), Q = /** @class*/
(function () {
  function t(t, e) {
    (this.F = t, this.O = e, this.type = "FirstParty", this.user = j.P);
  }
  return (Object.defineProperty(t.prototype, "g", {
    get: function () {
      var t = {
        "X-Goog-AuthUser": this.O
      }, e = this.F.auth.getAuthHeaderValueForFirstParty([]);
      // Use array notation to prevent minification
      return (e && (t.Authorization = e), t);
    },
    enumerable: !1,
    configurable: !0
  }), t);
})(), Y = /** @class*/
(function () {
  function t(t, e) {
    (this.F = t, this.O = e);
  }
  return (t.prototype.getToken = function () {
    return Promise.resolve(new Q(this.F, this.O));
  }, t.prototype.v = function (t) {
    // Fire with initial uid.
    t(j.P);
  }, t.prototype.S = function () {}, t.prototype.p = function () {}, t);
})(), H = /** @class*/
(function () {
  function t(t, e) {
    var n = this;
    (this.previousValue = t, e && (e.k = function (t) {
      return n.M(t);
    }, this.L = function (t) {
      return e.B(t);
    }));
  }
  return (t.prototype.M = function (t) {
    return (this.previousValue = Math.max(t, this.previousValue), this.previousValue);
  }, t.prototype.next = function () {
    var t = ++this.previousValue;
    return (this.L && this.L(t), t);
  }, t);
})();
/** A CredentialsProvider that always yields an empty token.*/
H.q = -1;
/**
* A `Timestamp` represents a point in time independent of any time zone or
* calendar, represented as seconds and fractions of seconds at nanosecond
* resolution in UTC Epoch time.
*
* It is encoded using the Proleptic Gregorian Calendar which extends the
* Gregorian calendar backwards to year one. It is encoded assuming all minutes
* are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
* table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
* 9999-12-31T23:59:59.999999999Z.
*
* For examples and further specifications, refer to the
* {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
*/
var K = /** @class*/
(function () {
  /**
  * Creates a new timestamp.
  *
  * @param seconds - The number of seconds of UTC time since Unix epoch
  *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  *     9999-12-31T23:59:59Z inclusive.
  * @param nanoseconds - The non-negative fractions of a second at nanosecond
  *     resolution. Negative second values with fractions must still have
  *     non-negative nanoseconds values that count forward in time. Must be
  *     from 0 to 999,999,999 inclusive.
  */
  function t(t, e) {
    if ((this.seconds = t, this.nanoseconds = e, e < 0)) throw new q(M.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
    if (e >= 1e9) throw new q(M.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
    if (t < -62135596800) throw new q(M.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
    // This will break in the year 10,000.
    if (t >= 253402300800) throw new q(M.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
  }
  /**
  * Creates a new timestamp with the current date, with millisecond precision.
  *
  * @returns a new timestamp representing the current date.
  */
  return (t.now = function () {
    return t.fromMillis(Date.now());
  }, /**
  * Creates a new timestamp from the given date.
  *
  * @param date - The date to initialize the `Timestamp` from.
  * @returns A new `Timestamp` representing the same point in time as the given
  *     date.
  */
  t.fromDate = function (e) {
    return t.fromMillis(e.getTime());
  }, /**
  * Creates a new timestamp from the given number of milliseconds.
  *
  * @param milliseconds - Number of milliseconds since Unix epoch
  *     1970-01-01T00:00:00Z.
  * @returns A new `Timestamp` representing the same point in time as the given
  *     number of milliseconds.
  */
  t.fromMillis = function (e) {
    var n = Math.floor(e / 1e3);
    return new t(n, 1e6 * (e - 1e3 * n));
  }, /**
  * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes
  * a loss of precision since `Date` objects only support millisecond precision.
  *
  * @returns JavaScript `Date` object representing the same point in time as
  *     this `Timestamp`, with millisecond precision.
  */
  t.prototype.toDate = function () {
    return new Date(this.toMillis());
  }, /**
  * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
  * epoch). This operation causes a loss of precision.
  *
  * @returns The point in time corresponding to this timestamp, represented as
  *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
  */
  t.prototype.toMillis = function () {
    return 1e3 * this.seconds + this.nanoseconds / 1e6;
  }, t.prototype.U = function (t) {
    return this.seconds === t.seconds ? C(this.nanoseconds, t.nanoseconds) : C(this.seconds, t.seconds);
  }, /**
  * Returns true if this `Timestamp` is equal to the provided one.
  *
  * @param other - The `Timestamp` to compare against.
  * @returns true if this `Timestamp` is equal to the provided one.
  */
  t.prototype.isEqual = function (t) {
    return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
  }, t.prototype.toString = function () {
    return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
  }, t.prototype.toJSON = function () {
    return {
      seconds: this.seconds,
      nanoseconds: this.nanoseconds
    };
  }, /**
  * Converts this object to a primitive string, which allows Timestamp objects to be compared
  * using the `>`, `<=`, `>=` and `>` operators.
  */
  t.prototype.valueOf = function () {
    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
    // with zeroes to be a consistent length. Strings with this format then have a lexiographical
    // ordering that matches the expected ordering. The <seconds> translation is done to avoid
    // having a leading negative sign (i.e. a leading '-' character) in its string representation,
    // which would affect its lexiographical ordering.
    var t = this.seconds - -62135596800;
    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
  }, t);
})(), X = /** @class*/
(function () {
  function t(t) {
    this.timestamp = t;
  }
  return (t.K = function (e) {
    return new t(e);
  }, t.min = function () {
    return new t(new K(0, 0));
  }, t.prototype._ = function (t) {
    return this.timestamp.U(t.timestamp);
  }, t.prototype.isEqual = function (t) {
    return this.timestamp.isEqual(t.timestamp);
  }, /** Returns a number representation of the version for use in spec tests.*/
  t.prototype.W = function () {
    // Convert to microseconds.
    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
  }, t.prototype.toString = function () {
    return "SnapshotVersion(" + this.timestamp.toString() + ")";
  }, t.prototype.j = function () {
    return this.timestamp;
  }, t);
})(), W = /** @class*/
(function () {
  function t(t, e, n) {
    (void 0 === e ? e = 0 : e > t.length && x(), void 0 === n ? n = t.length - e : n > t.length - e && x(), this.segments = t, this.offset = e, this.G = n);
  }
  return (Object.defineProperty(t.prototype, "length", {
    get: function () {
      return this.G;
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.isEqual = function (e) {
    return 0 === t.H(this, e);
  }, t.prototype.child = function (e) {
    var n = this.segments.slice(this.offset, this.limit());
    return (e instanceof t ? e.forEach(function (t) {
      n.push(t);
    }) : n.push(e), this.J(n));
  }, /** The index of one past the last segment of the path.*/
  t.prototype.limit = function () {
    return this.offset + this.length;
  }, t.prototype.Y = function (t) {
    return (t = void 0 === t ? 1 : t, this.J(this.segments, this.offset + t, this.length - t));
  }, t.prototype.X = function () {
    return this.J(this.segments, this.offset, this.length - 1);
  }, t.prototype.Z = function () {
    return this.segments[this.offset];
  }, t.prototype.tt = function () {
    return this.get(this.length - 1);
  }, t.prototype.get = function (t) {
    return this.segments[this.offset + t];
  }, t.prototype.et = function () {
    return 0 === this.length;
  }, t.prototype.nt = function (t) {
    if (t.length < this.length) return !1;
    for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
    return !0;
  }, t.prototype.st = function (t) {
    if (this.length + 1 !== t.length) return !1;
    for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
    return !0;
  }, t.prototype.forEach = function (t) {
    for (var e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
  }, t.prototype.it = function () {
    return this.segments.slice(this.offset, this.limit());
  }, t.H = function (t, e) {
    for (var n = Math.min(t.length, e.length), r = 0; r < n; r++) {
      var i = t.get(r), o = e.get(r);
      if (i < o) return -1;
      if (i > o) return 1;
    }
    return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
  }, t);
})(), Z = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.J = function (t, n, r) {
    return new e(t, n, r);
  }, e.prototype.rt = function () {
    // NOTE: The client is ignorant of any path segments containing escape
    // sequences (e.g. __id123__) and just passes them through raw (they exist
    // for legacy reasons and should not be used frequently).
    return this.it().join("/");
  }, e.prototype.toString = function () {
    return this.rt();
  }, /**
  * Creates a resource path from the given slash-delimited string. If multiple
  * arguments are provided, all components are combined. Leading and trailing
  * slashes from all components are ignored.
  */
  e.ot = function () {
    for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
    // NOTE: The client is ignorant of any path segments containing escape
    // sequences (e.g. __id123__) and just passes them through raw (they exist
    // for legacy reasons and should not be used frequently).
    for (var r = [], i = 0, o = t; i < o.length; i++) {
      var u = o[i];
      if (u.indexOf("//") >= 0) throw new q(M.INVALID_ARGUMENT, "Invalid segment (" + u + "). Paths must not contain // in them.");
      // Strip leading and traling slashed.
      r.push.apply(r, u.split("/").filter(function (t) {
        return t.length > 0;
      }));
    }
    return new e(r);
  }, e.ct = function () {
    return new e([]);
  }, e);
})(W), J = /^[_a-zA-Z][_a-zA-Z0-9]*$/, $ = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.J = function (t, n, r) {
    return new e(t, n, r);
  }, /**
  * Returns true if the string could be used as a segment in a field path
  * without escaping.
  */
  e.at = function (t) {
    return J.test(t);
  }, e.prototype.rt = function () {
    return this.it().map(function (t) {
      return (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), e.at(t) || (t = "`" + t + "`"), t);
    }).join(".");
  }, e.prototype.toString = function () {
    return this.rt();
  }, /**
  * Returns true if this field references the key of a document.
  */
  e.prototype.ut = function () {
    return 1 === this.length && "__name__" === this.get(0);
  }, /**
  * The field designating the key of a document.
  */
  e.ht = function () {
    return new e(["__name__"]);
  }, /**
  * Parses a field string from the given server-formatted string.
  *
  * - Splitting the empty string is not allowed (for now at least).
  * - Empty segments within the string (e.g. if there are two consecutive
  *   separators) are not allowed.
  *
  * TODO(b/37244157): we should make this more strict. Right now, it allows
  * non-identifier path components, even if they aren't escaped.
  */
  e.lt = function (t) {
    for (var n = [], r = "", i = 0, o = function () {
      if (0 === r.length) throw new q(M.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
      (n.push(r), r = "");
    }, u = !1; i < t.length; ) {
      var s = t[i];
      if ("\\" === s) {
        if (i + 1 === t.length) throw new q(M.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
        var a = t[i + 1];
        if ("\\" !== a && "." !== a && "`" !== a) throw new q(M.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
        (r += a, i += 2);
      } else "`" === s ? (u = !u, i++) : "." !== s || u ? (r += s, i++) : (o(), i++);
    }
    if ((o(), u)) throw new q(M.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
    return new e(n);
  }, e.ct = function () {
    return new e([]);
  }, e);
})(W), tt = /** @class*/
(function () {
  function t(t) {
    this.path = t;
  }
  return (t._t = function (e) {
    return new t(Z.ot(e));
  }, t.ft = function (e) {
    return new t(Z.ot(e).Y(5));
  }, /** Returns true if the document is in the specified collectionId.*/
  t.prototype.dt = function (t) {
    return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
  }, t.prototype.isEqual = function (t) {
    return null !== t && 0 === Z.H(this.path, t.path);
  }, t.prototype.toString = function () {
    return this.path.toString();
  }, t.H = function (t, e) {
    return Z.H(t.path, e.path);
  }, t.wt = function (t) {
    return t.length % 2 == 0;
  }, /**
  * Creates and returns a new document key with the given segments.
  *
  * @param segments - The segments of the path to the document
  * @returns A new instance of DocumentKey
  */
  t.Et = function (e) {
    return new t(new Z(e.slice()));
  }, t);
})();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A version of a document in Firestore. This corresponds to the version
* timestamp, such as update_time or read_time.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function et(t) {
  var e = 0;
  for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
  return e;
}
function nt(t, e) {
  for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
}
function rt(t) {
  for (var e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
  return !0;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Provides a set of fields that can be used to partially patch a document.
* FieldMask is used in conjunction with ObjectValue.
* Examples:
*   foo - Overwrites foo entirely with the provided value. If foo is not
*         present in the companion ObjectValue, the field is deleted.
*   foo.bar - Overwrites only the field bar of the object foo.
*             If foo is not an object, foo is replaced with an object
*             containing foo
*/
var it = /** @class*/
(function () {
  function t(t) {
    (this.fields = t, // TODO(dimond): validation of FieldMask
    // Sort the field mask to support `FieldMask.isEqual()` and assert below.
    t.sort($.H));
  }
  return (t.prototype.Tt = function (t) {
    for (var e = 0, n = this.fields; e < n.length; e++) {
      if (n[e].nt(t)) return !0;
    }
    return !1;
  }, t.prototype.isEqual = function (t) {
    return L(this.fields, t.fields, function (t, e) {
      return t.isEqual(e);
    });
  }, t);
})(), ot = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
// A RegExp matching ISO 8601 UTC timestamps with optional fraction.
/**
* Converts the possible Proto values for a timestamp value into a "seconds and
* nanos" representation.
*/
function ut(t) {
  // The json interface (for the browser) will return an iso timestamp string,
  // while the proto js library (for node) will return a
  // google.protobuf.Timestamp instance.
  if ((k(!!t), "string" == typeof t)) {
    // The date string can have higher precision (nanos) than the Date class
    // (millis), so we do some custom parsing here.
    // Parse the nanos right out of the string.
    var e = 0, n = ot.exec(t);
    if ((k(!!n), n[1])) {
      // Pad the fraction out to 9 digits (nanos).
      var r = n[1];
      (r = (r + "000000000").substr(0, 9), e = Number(r));
    }
    // Parse the date to get the seconds.
    var i = new Date(t);
    return {
      seconds: Math.floor(i.getTime() / 1e3),
      nanos: e
    };
  }
  return {
    seconds: st(t.seconds),
    nanos: st(t.nanos)
  };
}
/**
* Converts the possible Proto types for numbers into a JavaScript number.
* Returns 0 if the value is not numeric.
*/
function st(t) {
  // TODO(bjornick): Handle int64 greater than 53 bits.
  return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
}
/** Converts the possible Proto types for Blobs into a ByteString.*/
function at(t) {
  return "string" == typeof t ? U.fromBase64String(t) : U.fromUint8Array(t);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents a locally-applied ServerTimestamp.
*
* Server Timestamps are backed by MapValues that contain an internal field
* `__type__` with a value of `server_timestamp`. The previous value and local
* write time are stored in its `__previous_value__` and `__local_write_time__`
* fields respectively.
*
* Notes:
* - ServerTimestampValue instances are created as the result of applying a
*   transform. They can only exist in the local view of a document. Therefore
*   they do not need to be parsed or serialized.
* - When evaluated locally (e.g. for snapshot.data()), they by default
*   evaluate to `null`. This behavior can be configured by passing custom
*   FieldValueOptions to value().
* - With respect to other ServerTimestampValues, they sort by their
*   localWriteTime.
*/
function ct(t) {
  var e, n;
  return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || ({})).__type__) || void 0 === n ? void 0 : n.stringValue);
}
/**
* Creates a new ServerTimestamp proto value (using the internal format).
*/
/**
* Returns the value of the field before this ServerTimestamp was set.
*
* Preserving the previous values allows the user to display the last resoled
* value until the backend responds with the timestamp.
*/
function ht(t) {
  var e = t.mapValue.fields.__previous_value__;
  return ct(e) ? ht(e) : e;
}
/**
* Returns the local time at which this timestamp was first set.
*/
function ft(t) {
  var e = ut(t.mapValue.fields.__local_write_time__.timestampValue);
  return new K(e.seconds, e.nanos);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Sentinel value that sorts before any Mutation Batch ID.*/
/**
* Returns whether a variable is either undefined or null.
*/
function lt(t) {
  return null == t;
}
/** Returns whether the value represents -0.*/
function pt(t) {
  // Detect if the value is -0.0. Based on polyfill from
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  return 0 === t && 1 / t == -1 / 0;
}
/**
* Returns whether a value is an integer and in the safe integer range
* @param value - The value to test for being an integer and in the safe range
*/
function dt(t) {
  return "number" == typeof t && Number.isInteger(t) && !pt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Extracts the backend's type order for the provided value.*/
function vt(t) {
  return ("nullValue" in t) ? 0 : /*NullValue*/
  ("booleanValue" in t) ? 1 : /*BooleanValue*/
  ("integerValue" in t) || ("doubleValue" in t) ? 2 : /*NumberValue*/
  ("timestampValue" in t) ? 3 : /*TimestampValue*/
  ("stringValue" in t) ? 5 : /*StringValue*/
  ("bytesValue" in t) ? 6 : /*BlobValue*/
  ("referenceValue" in t) ? 7 : /*RefValue*/
  ("geoPointValue" in t) ? 8 : /*GeoPointValue*/
  ("arrayValue" in t) ? 9 : /*ArrayValue*/
  ("mapValue" in t) ? ct(t) ? 4 : /*ServerTimestampValue*/
  10 : /*ObjectValue*/
  x();
}
/** Tests `left` and `right` for equality based on the backend semantics.*/
function yt(t, e) {
  var n = vt(t);
  if (n !== vt(e)) return !1;
  switch (n) {
    case 0:
      /*NullValue*/
      return !0;
    case 1:
      /*BooleanValue*/
      return t.booleanValue === e.booleanValue;
    case 4:
      /*ServerTimestampValue*/
      return ft(t).isEqual(ft(e));
    case 3:
      /*TimestampValue*/
      return (function (t, e) {
        if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) // Use string equality for ISO 8601 timestamps
        return t.timestampValue === e.timestampValue;
        var n = ut(t.timestampValue), r = ut(e.timestampValue);
        return n.seconds === r.seconds && n.nanos === r.nanos;
      })(t, e);
    case 5:
      /*StringValue*/
      return t.stringValue === e.stringValue;
    case 6:
      /*BlobValue*/
      return (function (t, e) {
        return at(t.bytesValue).isEqual(at(e.bytesValue));
      })(t, e);
    case 7:
      /*RefValue*/
      return t.referenceValue === e.referenceValue;
    case 8:
      /*GeoPointValue*/
      return (function (t, e) {
        return st(t.geoPointValue.latitude) === st(e.geoPointValue.latitude) && st(t.geoPointValue.longitude) === st(e.geoPointValue.longitude);
      })(t, e);
    case 2:
      /*NumberValue*/
      return (function (t, e) {
        if (("integerValue" in t) && ("integerValue" in e)) return st(t.integerValue) === st(e.integerValue);
        if (("doubleValue" in t) && ("doubleValue" in e)) {
          var n = st(t.doubleValue), r = st(e.doubleValue);
          return n === r ? pt(n) === pt(r) : isNaN(n) && isNaN(r);
        }
        return !1;
      })(t, e);
    case 9:
      /*ArrayValue*/
      return L(t.arrayValue.values || [], e.arrayValue.values || [], yt);
    case 10:
      /*ObjectValue*/
      return (function (t, e) {
        var n = t.mapValue.fields || ({}), r = e.mapValue.fields || ({});
        if (et(n) !== et(r)) return !1;
        for (var i in n) if (n.hasOwnProperty(i) && (void 0 === r[i] || !yt(n[i], r[i]))) return !1;
        return !0;
      })(t, e);
    default:
      return x();
  }
}
function mt(t, e) {
  return void 0 !== (t.values || []).find(function (t) {
    return yt(t, e);
  });
}
function gt(t, e) {
  var n = vt(t), r = vt(e);
  if (n !== r) return C(n, r);
  switch (n) {
    case 0:
      /*NullValue*/
      return 0;
    case 1:
      /*BooleanValue*/
      return C(t.booleanValue, e.booleanValue);
    case 2:
      /*NumberValue*/
      return (function (t, e) {
        var n = st(t.integerValue || t.doubleValue), r = st(e.integerValue || e.doubleValue);
        return n < r ? -1 : n > r ? 1 : n === r ? 0 : // one or both are NaN.
        isNaN(n) ? isNaN(r) ? 0 : -1 : 1;
      })(t, e);
    case 3:
      /*TimestampValue*/
      return wt(t.timestampValue, e.timestampValue);
    case 4:
      /*ServerTimestampValue*/
      return wt(ft(t), ft(e));
    case 5:
      /*StringValue*/
      return C(t.stringValue, e.stringValue);
    case 6:
      /*BlobValue*/
      return (function (t, e) {
        var n = at(t), r = at(e);
        return n._(r);
      })(t.bytesValue, e.bytesValue);
    case 7:
      /*RefValue*/
      return (function (t, e) {
        for (var n = t.split("/"), r = e.split("/"), i = 0; i < n.length && i < r.length; i++) {
          var o = C(n[i], r[i]);
          if (0 !== o) return o;
        }
        return C(n.length, r.length);
      })(t.referenceValue, e.referenceValue);
    case 8:
      /*GeoPointValue*/
      return (function (t, e) {
        var n = C(st(t.latitude), st(e.latitude));
        return 0 !== n ? n : C(st(t.longitude), st(e.longitude));
      })(t.geoPointValue, e.geoPointValue);
    case 9:
      /*ArrayValue*/
      return (function (t, e) {
        for (var n = t.values || [], r = e.values || [], i = 0; i < n.length && i < r.length; ++i) {
          var o = gt(n[i], r[i]);
          if (o) return o;
        }
        return C(n.length, r.length);
      })(t.arrayValue, e.arrayValue);
    case 10:
      /*ObjectValue*/
      return (function (t, e) {
        var n = t.fields || ({}), r = Object.keys(n), i = e.fields || ({}), o = Object.keys(i);
        // Even though MapValues are likely sorted correctly based on their insertion
        // order (e.g. when received from the backend), local modifications can bring
        // elements out of order. We need to re-sort the elements to ensure that
        // canonical IDs are independent of insertion order.
        (r.sort(), o.sort());
        for (var u = 0; u < r.length && u < o.length; ++u) {
          var s = C(r[u], o[u]);
          if (0 !== s) return s;
          var a = gt(n[r[u]], i[o[u]]);
          if (0 !== a) return a;
        }
        return C(r.length, o.length);
      })(t.mapValue, e.mapValue);
    default:
      throw x();
  }
}
function wt(t, e) {
  if ("string" == typeof t && "string" == typeof e && t.length === e.length) return C(t, e);
  var n = ut(t), r = ut(e), i = C(n.seconds, r.seconds);
  return 0 !== i ? i : C(n.nanos, r.nanos);
}
function bt(t) {
  return _t(t);
}
function _t(t) {
  return ("nullValue" in t) ? "null" : ("booleanValue" in t) ? "" + t.booleanValue : ("integerValue" in t) ? "" + t.integerValue : ("doubleValue" in t) ? "" + t.doubleValue : ("timestampValue" in t) ? (function (t) {
    var e = ut(t);
    return "time(" + e.seconds + "," + e.nanos + ")";
  })(t.timestampValue) : ("stringValue" in t) ? t.stringValue : ("bytesValue" in t) ? at(t.bytesValue).toBase64() : ("referenceValue" in t) ? (n = t.referenceValue, tt.ft(n).toString()) : ("geoPointValue" in t) ? "geo(" + (e = t.geoPointValue).latitude + "," + e.longitude + ")" : ("arrayValue" in t) ? (function (t) {
    for (var e = "[", n = !0, r = 0, i = t.values || []; r < i.length; r++) {
      (n ? n = !1 : e += ",", e += _t(i[r]));
    }
    return e + "]";
  })(t.arrayValue) : ("mapValue" in t) ? (function (t) {
    for (var e = "{", n = !0, r = 0, i = Object.keys(t.fields || ({})).sort(); r < i.length; r++) {
      var o = i[r];
      (n ? n = !1 : e += ",", e += o + ":" + _t(t.fields[o]));
    }
    return e + "}";
  })(t.mapValue) : x();
  var e, n;
}
function It(t, e) {
  return {
    referenceValue: "projects/" + t.projectId + "/databases/" + t.database + "/documents/" + e.path.rt()
  };
}
/** Returns true if `value` is an IntegerValue .*/
function Et(t) {
  return !!t && ("integerValue" in t);
}
/** Returns true if `value` is a DoubleValue.*/
/** Returns true if `value` is an ArrayValue.*/
function Tt(t) {
  return !!t && ("arrayValue" in t);
}
/** Returns true if `value` is a NullValue.*/
function Nt(t) {
  return !!t && ("nullValue" in t);
}
/** Returns true if `value` is NaN.*/
function At(t) {
  return !!t && ("doubleValue" in t) && isNaN(Number(t.doubleValue));
}
/** Returns true if `value` is a MapValue.*/
function Dt(t) {
  return !!t && ("mapValue" in t);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An ObjectValue represents a MapValue in the Firestore Proto and offers the
* ability to add and remove fields (via the ObjectValueBuilder).
*/
var St = /** @class*/
(function () {
  function t(t) {
    this.proto = t;
  }
  return (t.empty = function () {
    return new t({
      mapValue: {}
    });
  }, /**
  * Returns the value at the given path or null.
  *
  * @param path - the path to search
  * @returns The value at the path or if there it doesn't exist.
  */
  t.prototype.field = function (t) {
    if (t.et()) return this.proto;
    for (var e = this.proto, n = 0; n < t.length - 1; ++n) {
      if (!e.mapValue.fields) return null;
      if (!Dt(e = e.mapValue.fields[t.get(n)])) return null;
    }
    return (e = (e.mapValue.fields || ({}))[t.tt()]) || null;
  }, t.prototype.isEqual = function (t) {
    return yt(this.proto, t.proto);
  }, t);
})(), xt = /** @class*/
(function () {
  /**
  * @param baseObject - The object to mutate.
  */
  function t(t) {
    (void 0 === t && (t = St.empty()), this.It = t, /** A map that contains the accumulated changes in this builder.*/
    this.At = new Map());
  }
  /**
  * Sets the field to the provided value.
  *
  * @param path - The field path to set.
  * @param value - The value to set.
  * @returns The current Builder instance.
  */
  return (t.prototype.set = function (t, e) {
    return (this.Rt(t, e), this);
  }, /**
  * Removes the field at the specified path. If there is no field at the
  * specified path, nothing is changed.
  *
  * @param path - The field path to remove.
  * @returns The current Builder instance.
  */
  t.prototype.delete = function (t) {
    return (this.Rt(t, null), this);
  }, /**
  * Adds `value` to the overlay map at `path`. Creates nested map entries if
  * needed.
  */
  t.prototype.Rt = function (t, e) {
    for (var n = this.At, r = 0; r < t.length - 1; ++r) {
      var i = t.get(r), o = n.get(i);
      o instanceof Map ? // Re-use a previously created map
      n = o : o && 10 === /*ObjectValue*/
      vt(o) ? // Convert the existing Protobuf MapValue into a map
      (o = new Map(Object.entries(o.mapValue.fields || ({}))), n.set(i, o), n = o) : // Create an empty map to represent the current nesting level
      (o = new Map(), n.set(i, o), n = o);
    }
    n.set(t.tt(), e);
  }, /** Returns an ObjectValue with all mutations applied.*/
  t.prototype.Pt = function () {
    var t = this.yt($.ct(), this.At);
    return null != t ? new St(t) : this.It;
  }, /**
  * Applies any overlays from `currentOverlays` that exist at `currentPath`
  * and returns the merged data at `currentPath` (or null if there were no
  * changes).
  *
  * @param currentPath - The path at the current nesting level. Can be set to
  * FieldValue.emptyPath() to represent the root.
  * @param currentOverlays - The overlays at the current nesting level in the
  * same format as `overlayMap`.
  * @returns The merged data at `currentPath` or null if no modifications
  * were applied.
  */
  t.prototype.yt = function (t, e) {
    var n = this, r = !1, i = this.It.field(t), o = Dt(i) ? // If there is already data at the current path, base our
    Object.assign({}, i.mapValue.fields) : {};
    return (e.forEach(function (e, i) {
      if (e instanceof Map) {
        var u = n.yt(t.child(i), e);
        null != u && (o[i] = u, r = !0);
      } else null !== e ? (o[i] = e, r = !0) : o.hasOwnProperty(i) && (delete o[i], r = !0);
    }), r ? {
      mapValue: {
        fields: o
      }
    } : null);
  }, t);
})();
/**
* An ObjectValueBuilder provides APIs to set and delete fields from an
* ObjectValue.
*/
/**
* Returns a FieldMask built from all fields in a MapValue.
*/
function kt(t) {
  var e = [];
  return (nt(t.fields || ({}), function (t, n) {
    var r = new $([t]);
    if (Dt(n)) {
      var i = kt(n.mapValue).fields;
      if (0 === i.length) // Preserve the empty map by adding it to the FieldMask.
      e.push(r); else // For nested and non-empty ObjectValues, add the FieldPath of the
      // leaf nodes.
      for (var o = 0, u = i; o < u.length; o++) {
        var s = u[o];
        e.push(r.child(s));
      }
    } else // For nested and non-empty ObjectValues, add the FieldPath of the leaf
    // nodes.
    e.push(r);
  }), new it(e));
}
var Ot = function (t, e) {
  (this.key = t, this.version = e);
}, Pt = /** @class*/
(function (t) {
  function e(e, n, r, i) {
    var o = this;
    return ((o = t.call(this, e, n) || this).gt = r, o.Vt = !!i.Vt, o.hasCommittedMutations = !!i.hasCommittedMutations, o);
  }
  return (_tslib.__extends(e, t), e.prototype.field = function (t) {
    return this.gt.field(t);
  }, e.prototype.data = function () {
    return this.gt;
  }, e.prototype.bt = function () {
    return this.gt.proto;
  }, e.prototype.isEqual = function (t) {
    return t instanceof e && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.Vt === t.Vt && this.hasCommittedMutations === t.hasCommittedMutations && this.gt.isEqual(t.gt);
  }, e.prototype.toString = function () {
    return "Document(" + this.key + ", " + this.version + ", " + this.gt.toString() + ", {hasLocalMutations: " + this.Vt + "}), {hasCommittedMutations: " + this.hasCommittedMutations + "})";
  }, Object.defineProperty(e.prototype, "hasPendingWrites", {
    get: function () {
      return this.Vt || this.hasCommittedMutations;
    },
    enumerable: !1,
    configurable: !0
  }), e);
})(Ot), Vt = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this, e, n) || this).hasCommittedMutations = !(!r || !r.hasCommittedMutations), i);
  }
  return (_tslib.__extends(e, t), e.prototype.toString = function () {
    return "NoDocument(" + this.key + ", " + this.version + ")";
  }, Object.defineProperty(e.prototype, "hasPendingWrites", {
    get: function () {
      return this.hasCommittedMutations;
    },
    enumerable: !1,
    configurable: !0
  }), e.prototype.isEqual = function (t) {
    return t instanceof e && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
  }, e);
})(Ot), Ct = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.toString = function () {
    return "UnknownDocument(" + this.key + ", " + this.version + ")";
  }, Object.defineProperty(e.prototype, "hasPendingWrites", {
    get: function () {
      return !0;
    },
    enumerable: !1,
    configurable: !0
  }), e.prototype.isEqual = function (t) {
    return t instanceof e && t.version.isEqual(this.version) && t.key.isEqual(this.key);
  }, e);
})(Ot), Lt = function (t, e, n, r, i, o, u) {
  (void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), void 0 === i && (i = null), void 0 === o && (o = null), void 0 === u && (u = null), this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = i, this.startAt = o, this.endAt = u, this.vt = null);
};
/**
* Represents a document in Firestore with a key, version, data and whether the
* data has local mutations applied to it.
*/
/**
* Initializes a Target with a path and optional additional query constraints.
* Path must currently be empty if this is a collection group query.
*
* NOTE: you should always construct `Target` from `Query.toTarget` instead of
* using this factory method, because `Query` provides an implicit `orderBy`
* property.
*/
function Rt(t, e, n, r, i, o, u) {
  return (void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), void 0 === i && (i = null), void 0 === o && (o = null), void 0 === u && (u = null), new Lt(t, e, n, r, i, o, u));
}
function Ut(t) {
  var e = O(t);
  if (null === e.vt) {
    var n = e.path.rt();
    (null !== e.collectionGroup && (n += "|cg:" + e.collectionGroup), n += "|f:", n += e.filters.map(function (t) {
      return (function (t) {
        // TODO(b/29183165): Technically, this won't be unique if two values have
        // the same description, such as the int 3 and the string "3". So we should
        // add the types in here somehow, too.
        return t.field.rt() + t.op.toString() + bt(t.value);
      })(t);
    }).join(","), n += "|ob:", n += e.orderBy.map(function (t) {
      return (function (t) {
        // TODO(b/29183165): Make this collision robust.
        return t.field.rt() + t.dir;
      })(t);
    }).join(","), lt(e.limit) || (n += "|l:", n += e.limit), e.startAt && (n += "|lb:", n += Wt(e.startAt)), e.endAt && (n += "|ub:", n += Wt(e.endAt)), e.vt = n);
  }
  return e.vt;
}
function Mt(t, e) {
  if (t.limit !== e.limit) return !1;
  if (t.orderBy.length !== e.orderBy.length) return !1;
  for (var n = 0; n < t.orderBy.length; n++) if (!Jt(t.orderBy[n], e.orderBy[n])) return !1;
  if (t.filters.length !== e.filters.length) return !1;
  for (var r = 0; r < t.filters.length; r++) if ((i = t.filters[r], o = e.filters[r], i.op !== o.op || !i.field.isEqual(o.field) || !yt(i.value, o.value))) return !1;
  var i, o;
  return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!te(t.startAt, e.startAt) && te(t.endAt, e.endAt);
}
function qt(t) {
  return tt.wt(t.path) && null === t.collectionGroup && 0 === t.filters.length;
}
var Ft = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this) || this).field = e, i.op = n, i.value = r, i);
  }
  /**
  * Creates a filter based on the provided arguments.
  */
  return (_tslib.__extends(e, t), e.create = function (t, n, r) {
    return t.ut() ? "in" === /*IN*/
    n || "not-in" === /*NOT_IN*/
    n ? this.St(t, n, r) : new jt(t, n, r) : "array-contains" === /*ARRAY_CONTAINS*/
    n ? new Qt(t, r) : "in" === /*IN*/
    n ? new Yt(t, r) : "not-in" === /*NOT_IN*/
    n ? new Ht(t, r) : "array-contains-any" === /*ARRAY_CONTAINS_ANY*/
    n ? new Kt(t, r) : new e(t, n, r);
  }, e.St = function (t, e, n) {
    return "in" === /*IN*/
    e ? new zt(t, n) : new Gt(t, n);
  }, e.prototype.matches = function (t) {
    var e = t.field(this.field);
    // Types do not have to match in NOT_EQUAL filters.
    return "!=" === /*NOT_EQUAL*/
    this.op ? null !== e && this.Dt(gt(e, this.value)) : null !== e && vt(this.value) === vt(e) && this.Dt(gt(e, this.value));
  }, e.prototype.Dt = function (t) {
    switch (this.op) {
      case "<":
        /*LESS_THAN*/
        return t < 0;
      case "<=":
        /*LESS_THAN_OR_EQUAL*/
        return t <= 0;
      case "==":
        /*EQUAL*/
        return 0 === t;
      case "!=":
        /*NOT_EQUAL*/
        return 0 !== t;
      case ">":
        /*GREATER_THAN*/
        return t > 0;
      case ">=":
        /*GREATER_THAN_OR_EQUAL*/
        return t >= 0;
      default:
        return x();
    }
  }, e.prototype.Ct = function () {
    return ["<", /*LESS_THAN*/
    "<=", /*LESS_THAN*/
    /*LESS_THAN_OR_EQUAL*/
    ">", /*LESS_THAN*/
    /*LESS_THAN_OR_EQUAL*/
    /*GREATER_THAN*/
    ">=", /*LESS_THAN*/
    /*LESS_THAN_OR_EQUAL*/
    /*GREATER_THAN*/
    /*GREATER_THAN_OR_EQUAL*/
    "!=", /*LESS_THAN*/
    /*LESS_THAN_OR_EQUAL*/
    /*GREATER_THAN*/
    /*GREATER_THAN_OR_EQUAL*/
    /*NOT_EQUAL*/
    "not-in"].indexOf(this.op) >= 0;
  }, e);
})(function () {});
var jt = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this, e, n, r) || this).key = tt.ft(r.referenceValue), i);
  }
  return (_tslib.__extends(e, t), e.prototype.matches = function (t) {
    var e = tt.H(t.key, this.key);
    return this.Dt(e);
  }, e);
})(Ft), zt = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, e, "in", /*IN*/
    n) || this).keys = Bt("in", /*IN*/
    n), r);
  }
  return (_tslib.__extends(e, t), e.prototype.matches = function (t) {
    return this.keys.some(function (e) {
      return e.isEqual(t.key);
    });
  }, e);
})(Ft), Gt = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, e, "not-in", /*NOT_IN*/
    n) || this).keys = Bt("not-in", /*NOT_IN*/
    n), r);
  }
  return (_tslib.__extends(e, t), e.prototype.matches = function (t) {
    return !this.keys.some(function (e) {
      return e.isEqual(t.key);
    });
  }, e);
})(Ft);
/** Filter that matches on key fields within an array.*/
function Bt(t, e) {
  var n;
  return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map(function (t) {
    return tt.ft(t.referenceValue);
  });
}
/** A Filter that implements the array-contains operator.*/
var Qt = /** @class*/
(function (t) {
  function e(e, n) {
    return t.call(this, e, "array-contains", /*ARRAY_CONTAINS*/
    n) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.matches = function (t) {
    var e = t.field(this.field);
    return Tt(e) && mt(e.arrayValue, this.value);
  }, e);
})(Ft), Yt = /** @class*/
(function (t) {
  function e(e, n) {
    return t.call(this, e, "in", /*IN*/
    n) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.matches = function (t) {
    var e = t.field(this.field);
    return null !== e && mt(this.value.arrayValue, e);
  }, e);
})(Ft), Ht = /** @class*/
(function (t) {
  function e(e, n) {
    return t.call(this, e, "not-in", /*NOT_IN*/
    n) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.matches = function (t) {
    if (mt(this.value.arrayValue, {
      nullValue: "NULL_VALUE"
    })) return !1;
    var e = t.field(this.field);
    return null !== e && !mt(this.value.arrayValue, e);
  }, e);
})(Ft), Kt = /** @class*/
(function (t) {
  function e(e, n) {
    return t.call(this, e, "array-contains-any", /*ARRAY_CONTAINS_ANY*/
    n) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.matches = function (t) {
    var e = this, n = t.field(this.field);
    return !(!Tt(n) || !n.arrayValue.values) && n.arrayValue.values.some(function (t) {
      return mt(e.value.arrayValue, t);
    });
  }, e);
})(Ft), Xt = function (t, e) {
  (this.position = t, this.before = e);
};
/** A Filter that implements the IN operator.*/
function Wt(t) {
  // TODO(b/29183165): Make this collision robust.
  return (t.before ? "b" : "a") + ":" + t.position.map(function (t) {
    return bt(t);
  }).join(",");
}
/**
* An ordering on a field, in some Direction. Direction defaults to ASCENDING.
*/
var Zt = function (t, e) /*ASCENDING*/
{
  (void 0 === e && (e = "asc"), this.field = t, this.dir = e);
};
function Jt(t, e) {
  return t.dir === e.dir && t.field.isEqual(e.field);
}
/**
* Returns true if a document sorts before a bound using the provided sort
* order.
*/
function $t(t, e, n) {
  for (var r = 0, i = 0; i < t.position.length; i++) {
    var o = e[i], u = t.position[i];
    if ((r = o.field.ut() ? tt.H(tt.ft(u.referenceValue), n.key) : gt(u, n.field(o.field)), "desc" === /*DESCENDING*/
    o.dir && (r *= -1), 0 !== r)) break;
  }
  return t.before ? r <= 0 : r < 0;
}
function te(t, e) {
  if (null === t) return null === e;
  if (null === e) return !1;
  if (t.before !== e.before || t.position.length !== e.position.length) return !1;
  for (var n = 0; n < t.position.length; n++) if (!yt(t.position[n], e.position[n])) return !1;
  return !0;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Query encapsulates all the query attributes we support in the SDK. It can
* be run against the LocalStore, as well as be converted to a `Target` to
* query the RemoteStore results.
*
* Visible for testing.
*/
var ee = /**
* Initializes a Query with a path and optional additional query constraints.
* Path must currently be empty if this is a collection group query.
*/
function (t, e, n, r, i, o, /*First*/
u, s) {
  (void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), void 0 === i && (i = null), void 0 === o && (o = "F"), void 0 === u && (u = null), void 0 === s && (s = null), this.path = t, this.collectionGroup = e, this.xt = n, this.filters = r, this.limit = i, this.limitType = o, this.startAt = u, this.endAt = s, this.Nt = null, // The corresponding `Target` of this `Query` instance.
  this.$t = null, this.startAt, this.endAt);
};
/** Creates a new Query instance with the options provided.*/
function ne(t, e, n, r, i, o, u, s) {
  return new ee(t, e, n, r, i, o, u, s);
}
/** Creates a new Query for a query that matches all documents at `path`*/
function re(t) {
  return new ee(t);
}
/**
* Helper to convert a collection group query into a collection query at a
* specific path. This is used when executing collection group queries, since
* we have to split the query into a set of collection queries at multiple
* paths.
*/
function ie(t) {
  return !lt(t.limit) && "F" === /*First*/
  t.limitType;
}
function oe(t) {
  return !lt(t.limit) && "L" === /*Last*/
  t.limitType;
}
function ue(t) {
  return t.xt.length > 0 ? t.xt[0].field : null;
}
function se(t) {
  for (var e = 0, n = t.filters; e < n.length; e++) {
    var r = n[e];
    if (r.Ct()) return r.field;
  }
  return null;
}
/**
* Checks if any of the provided Operators are included in the query and
* returns the first one that is, or null if none are.
*/
/**
* Returns whether the query matches a collection group rather than a specific
* collection.
*/
function ae(t) {
  return null !== t.collectionGroup;
}
/**
* Returns the implicit order by constraint that is used to execute the Query,
* which can be different from the order by constraints the user provided (e.g.
* the SDK and backend always orders by `__name__`).
*/
function ce(t) {
  var e = O(t);
  if (null === e.Nt) {
    e.Nt = [];
    var n = se(e), r = ue(e);
    if (null !== n && null === r) // In order to implicitly add key ordering, we must also add the
    // inequality filter field for it to be a valid query.
    // Note that the default inequality field and key ordering is ascending.
    (n.ut() || e.Nt.push(new Zt(n)), e.Nt.push(new Zt($.ht(), "asc"))); else {
      for (var i = !1, o = 0, u = e.xt; o < u.length; o++) {
        var s = u[o];
        (e.Nt.push(s), s.field.ut() && (i = !0));
      }
      if (!i) {
        // The order of the implicit key ordering always matches the last
        // explicit order by
        var a = e.xt.length > 0 ? e.xt[e.xt.length - 1].dir : "asc";
        e.Nt.push(new Zt($.ht(), a));
      }
    }
  }
  return e.Nt;
}
/**
* Converts this `Query` instance to it's corresponding `Target` representation.
*/
function he(t) {
  var e = O(t);
  if (!e.$t) if ("F" === /*First*/
  e.limitType) e.$t = Rt(e.path, e.collectionGroup, ce(e), e.filters, e.limit, e.startAt, e.endAt); else {
    for (var n = [], r = 0, i = ce(e); r < i.length; r++) {
      var o = i[r], u = "desc" === /*DESCENDING*/
      o.dir ? "asc" : /*ASCENDING*/
      "desc";
      n.push(new Zt(o.field, u));
    }
    // We need to swap the cursors to match the now-flipped query ordering.
    var s = e.endAt ? new Xt(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new Xt(e.startAt.position, !e.startAt.before) : null;
    // Now return as a LimitType.First query.
    e.$t = Rt(e.path, e.collectionGroup, n, e.filters, e.limit, s, a);
  }
  return e.$t;
}
function fe(t, e, n) {
  return new ee(t.path, t.collectionGroup, t.xt.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
}
function le(t, e) {
  return Mt(he(t), he(e)) && t.limitType === e.limitType;
}
// TODO(b/29183165): This is used to get a unique string from a query to, for
// example, use as a dictionary key, but the implementation is subject to
// collisions. Make it collision-free.
function pe(t) {
  return Ut(he(t)) + "|lt:" + t.limitType;
}
function de(t) {
  return "Query(target=" + (function (t) {
    var e = t.path.rt();
    return (null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), t.filters.length > 0 && (e += ", filters: [" + t.filters.map(function (t) {
      return (e = t).field.rt() + " " + e.op + " " + bt(e.value);
      /** Returns a debug description for `filter`.*/
      var e;
    }).join(", ") + "]"), lt(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += ", orderBy: [" + t.orderBy.map(function (t) {
      return (function (t) {
        return t.field.rt() + " (" + t.dir + ")";
      })(t);
    }).join(", ") + "]"), t.startAt && (e += ", startAt: " + Wt(t.startAt)), t.endAt && (e += ", endAt: " + Wt(t.endAt)), "Target(" + e + ")");
  })(he(t)) + "; limitType=" + t.limitType + ")";
}
/** Returns whether `doc` matches the constraints of `query`.*/
function ve(t, e) {
  return (function (t, e) {
    var n = e.key.path;
    return null !== t.collectionGroup ? e.key.dt(t.collectionGroup) && t.path.nt(n) : tt.wt(t.path) ? t.path.isEqual(n) : t.path.st(n);
  })(t, e) && (function (t, e) {
    for (var n = 0, r = t.xt; n < r.length; n++) {
      var i = r[n];
      // order by key always matches
      if (!i.field.ut() && null === e.field(i.field)) return !1;
    }
    return !0;
  })(t, e) && (function (t, e) {
    for (var n = 0, r = t.filters; n < r.length; n++) {
      if (!r[n].matches(e)) return !1;
    }
    return !0;
  })(t, e) && (function (t, e) {
    return !(t.startAt && !$t(t.startAt, ce(t), e)) && (!t.endAt || !$t(t.endAt, ce(t), e));
  })(t, e);
}
function ye(t) {
  return function (e, n) {
    for (var r = !1, i = 0, o = ce(t); i < o.length; i++) {
      var u = o[i], s = me(u, e, n);
      if (0 !== s) return s;
      r = r || u.field.ut();
    }
    return 0;
  };
}
function me(t, e, n) {
  var r = t.field.ut() ? tt.H(e.key, n.key) : (function (t, e, n) {
    var r = e.field(t), i = n.field(t);
    return null !== r && null !== i ? gt(r, i) : x();
  })(t.field, e, n);
  switch (t.dir) {
    case "asc":
      /*ASCENDING*/
      return r;
    case "desc":
      /*DESCENDING*/
      return -1 * r;
    default:
      return x();
  }
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An immutable set of metadata that the local store tracks for each target.
*/
var ge = /** @class*/
(function () {
  function t(/** The target being listened to.*/
  t, /**
  * The target ID to which the target corresponds; Assigned by the
  * LocalStore for user listens and by the SyncEngine for limbo watches.
  */
  e, /** The purpose of the target.*/
  n, /**
  * The sequence number of the last transaction during which this target data
  * was modified.
  */
  r, /** The latest snapshot version seen for this target.*/
  i, /** The latest snapshot version seen for this target.*/
  /**
  * The maximum snapshot version at which the associated view
  * contained no limbo documents.
  */
  o, /**
  * An opaque, server-assigned token that allows watching a target to be
  * resumed after disconnecting without retransmitting all the data that
  * matches the target. The resume token essentially identifies a point in
  * time from which the server should resume sending results.
  */
  u) {
    (void 0 === i && (i = X.min()), void 0 === o && (o = X.min()), void 0 === u && (u = U.T), this.target = t, this.targetId = e, this.Ft = n, this.sequenceNumber = r, this.Ot = i, this.lastLimboFreeSnapshotVersion = o, this.resumeToken = u);
  }
  /** Creates a new target data instance with an updated sequence number.*/
  return (t.prototype.kt = function (e) {
    return new t(this.target, this.targetId, this.Ft, e, this.Ot, this.lastLimboFreeSnapshotVersion, this.resumeToken);
  }, /**
  * Creates a new target data instance with an updated resume token and
  * snapshot version.
  */
  t.prototype.Mt = function (e, n) {
    return new t(this.target, this.targetId, this.Ft, this.sequenceNumber, n, this.lastLimboFreeSnapshotVersion, e);
  }, /**
  * Creates a new target data instance with an updated last limbo free
  * snapshot version number.
  */
  t.prototype.Lt = function (e) {
    return new t(this.target, this.targetId, this.Ft, this.sequenceNumber, this.Ot, e, this.resumeToken);
  }, t);
})();
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Returns an DoubleValue for `value` that is encoded based the serializer's
* `useProto3Json` setting.
*/
function we(t, e) {
  if (t.Bt) {
    if (isNaN(e)) return {
      doubleValue: "NaN"
    };
    if (e === 1 / 0) return {
      doubleValue: "Infinity"
    };
    if (e === -1 / 0) return {
      doubleValue: "-Infinity"
    };
  }
  return {
    doubleValue: pt(e) ? "-0" : e
  };
}
/**
* Returns an IntegerValue for `value`.
*/
function be(t) {
  return {
    integerValue: "" + t
  };
}
/**
* Returns a value for a number that's appropriate to put into a proto.
* The return value is an IntegerValue if it can safely represent the value,
* otherwise a DoubleValue is returned.
*/
function _e(t, e) {
  return dt(e) ? be(e) : we(t, e);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Used to represent a field transform on a mutation.*/
var Ie = function () {
  // Make sure that the structural type of `TransformOperation` is unique.
  // See https://github.com/microsoft/TypeScript/issues/5451
  this.qt = void 0;
};
/**
* Computes the local transform result against the provided `previousValue`,
* optionally using the provided localWriteTime.
*/
function Ee(t, e, n) {
  return t instanceof Ae ? (function (t, e) {
    var n = {
      fields: {
        __type__: {
          stringValue: "server_timestamp"
        },
        __local_write_time__: {
          timestampValue: {
            seconds: t.seconds,
            nanos: t.nanoseconds
          }
        }
      }
    };
    return (e && (n.fields.__previous_value__ = e), {
      mapValue: n
    });
  })(n, e) : t instanceof De ? Se(t, e) : t instanceof xe ? ke(t, e) : (function (t, e) {
    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
    // precision and resolves overflows by reducing precision, we do not
    // manually cap overflows at 2^63.
    var n = Ne(t, e), r = Pe(n) + Pe(t.Ut);
    return Et(n) && Et(t.Ut) ? be(r) : we(t.Qt, r);
  })(t, e);
}
/**
* Computes a final transform result after the transform has been acknowledged
* by the server, potentially using the server-provided transformResult.
*/
function Te(t, e, n) {
  // The server just sends null as the transform result for array operations,
  // so we have to calculate a result the same as we do for local
  // applications.
  return t instanceof De ? Se(t, e) : t instanceof xe ? ke(t, e) : n;
}
/**
* If this transform operation is not idempotent, returns the base value to
* persist for this transform. If a base value is returned, the transform
* operation is always applied to this base value, even if document has
* already been updated.
*
* Base values provide consistent behavior for non-idempotent transforms and
* allow us to return the same latency-compensated value even if the backend
* has already applied the transform operation. The base value is null for
* idempotent transforms, as they can be re-played even if the backend has
* already applied them.
*
* @returns a base value to store along with the mutation, or null for
* idempotent transforms.
*/
function Ne(t, e) {
  return t instanceof Oe ? Et(n = e) || (function (t) {
    return !!t && ("doubleValue" in t);
  })(n) ? e : {
    integerValue: 0
  } : null;
  var n;
}
/** Transforms a value into a server-generated timestamp.*/
var Ae = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e);
})(Ie), De = /** @class*/
(function (t) {
  function e(e) {
    var n = this;
    return ((n = t.call(this) || this).elements = e, n);
  }
  return (_tslib.__extends(e, t), e);
})(Ie);
/** Transforms an array value via a union operation.*/
function Se(t, e) {
  for (var n = Ve(e), r = function (t) {
    n.some(function (e) {
      return yt(e, t);
    }) || n.push(t);
  }, i = 0, o = t.elements; i < o.length; i++) {
    r(o[i]);
  }
  return {
    arrayValue: {
      values: n
    }
  };
}
/** Transforms an array value via a remove operation.*/
var xe = /** @class*/
(function (t) {
  function e(e) {
    var n = this;
    return ((n = t.call(this) || this).elements = e, n);
  }
  return (_tslib.__extends(e, t), e);
})(Ie);
function ke(t, e) {
  for (var n = Ve(e), r = function (t) {
    n = n.filter(function (e) {
      return !yt(e, t);
    });
  }, i = 0, o = t.elements; i < o.length; i++) {
    r(o[i]);
  }
  return {
    arrayValue: {
      values: n
    }
  };
}
/**
* Implements the backend semantics for locally computed NUMERIC_ADD (increment)
* transforms. Converts all field values to integers or doubles, but unlike the
* backend does not cap integer values at 2^63. Instead, JavaScript number
* arithmetic is used and precision loss can occur for values greater than 2^53.
*/
var Oe = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this) || this).Qt = e, r.Ut = n, r);
  }
  return (_tslib.__extends(e, t), e);
})(Ie);
function Pe(t) {
  return st(t.integerValue || t.doubleValue);
}
function Ve(t) {
  return Tt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** A field path and the TransformOperation to perform upon it.*/
var Ce = function (t, e) {
  (this.field = t, this.transform = e);
};
/** The result of successfully applying a mutation to the backend.*/
var Le = function (/**
* The version at which the mutation was committed:
*
* - For most operations, this is the updateTime in the WriteResult.
* - For deletes, the commitTime of the WriteResponse (because deletes are
*   not stored and have no updateTime).
*
* Note that these versions can be different: No-op writes will not change
* the updateTime even though the commitTime advances.
*/
t, /**
* The resulting fields returned from the backend after a mutation
* containing field transforms has been committed. Contains one FieldValue
* for each FieldTransform that was in the mutation.
*
* Will be null if the mutation did not contain any field transforms.
*/
e) {
  (this.version = t, this.transformResults = e);
}, Re = /** @class*/
(function () {
  function t(t, e) {
    (this.updateTime = t, this.exists = e);
  }
  return (t.Kt = function () {
    return new t();
  }, /** Creates a new Precondition with an exists flag.*/
  t.exists = function (e) {
    return new t(void 0, e);
  }, /** Creates a new Precondition based on a version a document exists at.*/
  t.updateTime = function (e) {
    return new t(e);
  }, Object.defineProperty(t.prototype, "Wt", {
    /** Returns whether this Precondition is empty.*/
    get: function () {
      return void 0 === this.updateTime && void 0 === this.exists;
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.isEqual = function (t) {
    return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
  }, t);
})();
/**
* Encodes a precondition for a mutation. This follows the model that the
* backend accepts with the special case of an explicit "empty" precondition
* (meaning no precondition).
*/
/**
* Returns true if the preconditions is valid for the given document
* (or null if no document is available).
*/
function Ue(t, e) {
  return void 0 !== t.updateTime ? e instanceof Pt && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e instanceof Pt;
}
/**
* A mutation describes a self-contained change to a document. Mutations can
* create, replace, delete, and update subsets of documents.
*
* Mutations not only act on the value of the document but also its version.
*
* For local mutations (mutations that haven't been committed yet), we preserve
* the existing version for Set and Patch mutations. For Delete mutations, we
* reset the version to 0.
*
* Here's the expected transition table.
*
* MUTATION           APPLIED TO            RESULTS IN
*
* SetMutation        Document(v3)          Document(v3)
* SetMutation        NoDocument(v3)        Document(v0)
* SetMutation        null                  Document(v0)
* PatchMutation      Document(v3)          Document(v3)
* PatchMutation      NoDocument(v3)        NoDocument(v3)
* PatchMutation      null                  null
* DeleteMutation     Document(v3)          NoDocument(v0)
* DeleteMutation     NoDocument(v3)        NoDocument(v0)
* DeleteMutation     null                  NoDocument(v0)
*
* For acknowledged mutations, we use the updateTime of the WriteResponse as
* the resulting version for Set and Patch mutations. As deletes have no
* explicit update time, we use the commitTime of the WriteResponse for
* Delete mutations.
*
* If a mutation is acknowledged by the backend but fails the precondition check
* locally, we return an `UnknownDocument` and rely on Watch to send us the
* updated version.
*
* Field transforms are used only with Patch and Set Mutations. We use the
* `updateTransforms` message to store transforms, rather than the `transforms`s
* messages.
*
* ## Subclassing Notes
*
* Subclasses of Mutation need to implement applyToRemoteDocument() and
* applyToLocalView() to implement the actual behavior of applying the mutation
* to some source document.
*/
var Me = function () {};
/**
* Applies this mutation to the given MaybeDocument or null for the purposes
* of computing a new remote document. If the input document doesn't match the
* expected state (e.g. it is null or outdated), an `UnknownDocument` can be
* returned.
*
* @param mutation - The mutation to apply.
* @param maybeDoc - The document to mutate. The input document can be null if
*     the client has no knowledge of the pre-mutation state of the document.
* @param mutationResult - The result of applying the mutation from the backend.
* @returns The mutated document. The returned document may be an
*     UnknownDocument if the mutation could not be applied to the locally
*     cached base document.
*/
function qe(t, e, n) {
  return t instanceof Be ? (function (t, e, n) {
    // Unlike applySetMutationToLocalView, if we're applying a mutation to a
    // remote document the server has accepted the mutation so the precondition
    // must have held.
    var r = t.value;
    if (n.transformResults) {
      var i = He(t.fieldTransforms, e, n.transformResults);
      r = Xe(t.fieldTransforms, r, i);
    }
    return new Pt(t.key, n.version, r, {
      hasCommittedMutations: !0
    });
  })(t, e, n) : t instanceof Qe ? (function (t, e, n) {
    if (!Ue(t.jt, e)) // Since the mutation was not rejected, we know that the precondition
    // matched on the backend. We therefore must not have the expected version
    // of the document in our cache and return an UnknownDocument with the
    // known updateTime.
    return new Ct(t.key, n.version);
    var r = Ye(t, e, n.transformResults ? He(t.fieldTransforms, e, n.transformResults) : []);
    return new Pt(t.key, n.version, r, {
      hasCommittedMutations: !0
    });
  })(t, e, n) : (function (t, e, n) {
    // Unlike applyToLocalView, if we're applying a mutation to a remote
    // document the server has accepted the mutation so the precondition must
    // have held.
    return new Vt(t.key, n.version, {
      hasCommittedMutations: !0
    });
  })(t, 0, n);
}
/**
* Applies this mutation to the given MaybeDocument or null for the purposes
* of computing the new local view of a document. Both the input and returned
* documents can be null.
*
* @param mutation - The mutation to apply.
* @param maybeDoc - The document to mutate. The input document can be null if
*     the client has no knowledge of the pre-mutation state of the document.
* @param localWriteTime - A timestamp indicating the local write time of the
*     batch this mutation is a part of.
* @returns The mutated document. The returned document may be null, but only
*     if maybeDoc was null and the mutation would not create a new document.
*/
function Fe(t, e, n) {
  return t instanceof Be ? (function (t, e, n) {
    if (!Ue(t.jt, e)) return e;
    var r = t.value, i = Ke(t.fieldTransforms, n, e);
    r = Xe(t.fieldTransforms, r, i);
    var o = Ge(e);
    return new Pt(t.key, o, r, {
      Vt: !0
    });
  })(t, e, n) : t instanceof Qe ? (function (t, e, n) {
    if (!Ue(t.jt, e)) return e;
    var r = Ge(e), i = Ye(t, e, Ke(t.fieldTransforms, n, e));
    return new Pt(t.key, r, i, {
      Vt: !0
    });
  })(t, e, n) : (function (t, e) {
    return Ue(t.jt, e) ? new Vt(t.key, X.min()) : e;
  })(t, e);
}
/**
* If this mutation is not idempotent, returns the base value to persist with
* this mutation. If a base value is returned, the mutation is always applied
* to this base value, even if document has already been updated.
*
* The base value is a sparse object that consists of only the document
* fields for which this mutation contains a non-idempotent transformation
* (e.g. a numeric increment). The provided value guarantees consistent
* behavior for non-idempotent transforms and allow us to return the same
* latency-compensated value even if the backend has already applied the
* mutation. The base value is null for idempotent mutations, as they can be
* re-played even if the backend has already applied them.
*
* @returns a base value to store along with the mutation, or null for
* idempotent mutations.
*/
function je(t, e) {
  return (function (t, e) {
    for (var n = null, r = 0, i = t; r < i.length; r++) {
      var o = i[r], u = e instanceof Pt ? e.field(o.field) : void 0, s = Ne(o.transform, u || null);
      null != s && (n = null == n ? new xt().set(o.field, s) : n.set(o.field, s));
    }
    return n ? n.Pt() : null;
  })(t.fieldTransforms, e);
}
function ze(t, e) {
  return t.type === e.type && !!t.key.isEqual(e.key) && !!t.jt.isEqual(e.jt) && !!(function (t, e) {
    return void 0 === t && void 0 === e || !(!t || !e) && L(t, e, function (t, e) {
      return (function (t, e) {
        return t.field.isEqual(e.field) && (function (t, e) {
          return t instanceof De && e instanceof De || t instanceof xe && e instanceof xe ? L(t.elements, e.elements, yt) : t instanceof Oe && e instanceof Oe ? yt(t.Ut, e.Ut) : t instanceof Ae && e instanceof Ae;
        })(t.transform, e.transform);
      })(t, e);
    });
  })(t.fieldTransforms, e.fieldTransforms) && (0 === /*Set*/
  t.type ? t.value.isEqual(e.value) : 1 !== /*Patch*/
  t.type || t.data.isEqual(e.data) && t.Gt.isEqual(e.Gt));
}
/**
* Returns the version from the given document for use as the result of a
* mutation. Mutations are defined to return the version of the base document
* only if it is an existing document. Deleted and unknown documents have a
* post-mutation version of SnapshotVersion.min().
*/
function Ge(t) {
  return t instanceof Pt ? t.version : X.min();
}
/**
* A mutation that creates or replaces the document at the given key with the
* object value contents.
*/
var Be = /** @class*/
(function (t) {
  function e(e, n, r, i) {
    void 0 === i && (i = []);
    var o = this;
    return ((o = t.call(this) || this).key = e, o.value = n, o.jt = r, o.fieldTransforms = i, o.type = 0, /*Set*/
    o);
  }
  return (_tslib.__extends(e, t), e);
})(Me), Qe = /** @class*/
(function (t) {
  function e(e, n, r, i, o) {
    void 0 === o && (o = []);
    var u = this;
    return ((u = t.call(this) || this).key = e, u.data = n, u.Gt = r, u.jt = i, u.fieldTransforms = o, u.type = 1, /*Patch*/
    u);
  }
  return (_tslib.__extends(e, t), e);
})(Me);
function Ye(t, e, n) {
  var r;
  return (r = (function (t, e) {
    var n = new xt(e);
    return (t.Gt.fields.forEach(function (e) {
      if (!e.et()) {
        var r = t.data.field(e);
        null !== r ? n.set(e, r) : n.delete(e);
      }
    }), n.Pt());
  })(t, r = e instanceof Pt ? e.data() : St.empty()), r = Xe(t.fieldTransforms, r, n));
}
function He(t, e, n) {
  var r = [];
  k(t.length === n.length);
  for (var i = 0; i < n.length; i++) {
    var o = t[i], u = o.transform, s = null;
    (e instanceof Pt && (s = e.field(o.field)), r.push(Te(u, s, n[i])));
  }
  return r;
}
/**
* Creates a list of "transform results" (a transform result is a field value
* representing the result of applying a transform) for use when applying a
* transform locally.
*
* @param fieldTransforms - The field transforms to apply the result to.
* @param localWriteTime - The local time of the mutation (used to
*     generate ServerTimestampValues).
* @param maybeDoc - The current state of the document after applying all
*     previous mutations.
* @returns The transform results list.
*/
function Ke(t, e, n) {
  for (var r = [], i = 0, o = t; i < o.length; i++) {
    var u = o[i], s = u.transform, a = null;
    (n instanceof Pt && (a = n.field(u.field)), r.push(Ee(s, a, e)));
  }
  return r;
}
function Xe(t, e, n) {
  for (var r = new xt(e), i = 0; i < t.length; i++) {
    var o = t[i];
    r.set(o.field, n[i]);
  }
  return r.Pt();
}
/** A mutation that deletes the document at the given key.*/
var We, Ze, Je = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this) || this).key = e, r.jt = n, r.type = 2, /*Delete*/
    r.fieldTransforms = [], r);
  }
  return (_tslib.__extends(e, t), e);
})(Me), $e = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this) || this).key = e, r.jt = n, r.type = 3, /*Verify*/
    r.fieldTransforms = [], r);
  }
  return (_tslib.__extends(e, t), e);
})(Me), tn = // TODO(b/33078163): just use simplest form of existence filter for now
function (t) {
  this.count = t;
};
/**
* Determines whether an error code represents a permanent error when received
* in response to a non-write operation.
*
* See isPermanentWriteError for classifying write errors.
*/
function en(t) {
  switch (t) {
    case M.OK:
      return x();
    case M.CANCELLED:
    case M.UNKNOWN:
    case M.DEADLINE_EXCEEDED:
    case M.RESOURCE_EXHAUSTED:
    case M.INTERNAL:
    case M.UNAVAILABLE:
    case M.UNAUTHENTICATED:
      return !1;
    case M.INVALID_ARGUMENT:
    case M.NOT_FOUND:
    case M.ALREADY_EXISTS:
    case M.PERMISSION_DENIED:
    case M.FAILED_PRECONDITION:
    case M.ABORTED:
    case M.OUT_OF_RANGE:
    case M.UNIMPLEMENTED:
    case M.DATA_LOSS:
      return !0;
    default:
      return x();
  }
}
/**
* Determines whether an error code represents a permanent error when received
* in response to a write operation.
*
* Write operations must be handled specially because as of b/119437764, ABORTED
* errors on the write stream should be retried too (even though ABORTED errors
* are not generally retryable).
*
* Note that during the initial handshake on the write stream an ABORTED error
* signals that we should discard our stream token (i.e. it is permanent). This
* means a handshake error should be classified with isPermanentError, above.
*/
/**
* Maps an error Code from GRPC status code number, like 0, 1, or 14. These
* are not the same as HTTP status codes.
*
* @returns The Code equivalent to the given GRPC status code. Fails if there
*     is no match.
*/
function nn(t) {
  if (void 0 === t) // This shouldn't normally happen, but in certain error cases (like trying
  // to send invalid proto messages) we may get an error with no GRPC code.
  return (A("GRPC error has no .code"), M.UNKNOWN);
  switch (t) {
    case We.OK:
      return M.OK;
    case We.CANCELLED:
      return M.CANCELLED;
    case We.UNKNOWN:
      return M.UNKNOWN;
    case We.DEADLINE_EXCEEDED:
      return M.DEADLINE_EXCEEDED;
    case We.RESOURCE_EXHAUSTED:
      return M.RESOURCE_EXHAUSTED;
    case We.INTERNAL:
      return M.INTERNAL;
    case We.UNAVAILABLE:
      return M.UNAVAILABLE;
    case We.UNAUTHENTICATED:
      return M.UNAUTHENTICATED;
    case We.INVALID_ARGUMENT:
      return M.INVALID_ARGUMENT;
    case We.NOT_FOUND:
      return M.NOT_FOUND;
    case We.ALREADY_EXISTS:
      return M.ALREADY_EXISTS;
    case We.PERMISSION_DENIED:
      return M.PERMISSION_DENIED;
    case We.FAILED_PRECONDITION:
      return M.FAILED_PRECONDITION;
    case We.ABORTED:
      return M.ABORTED;
    case We.OUT_OF_RANGE:
      return M.OUT_OF_RANGE;
    case We.UNIMPLEMENTED:
      return M.UNIMPLEMENTED;
    case We.DATA_LOSS:
      return M.DATA_LOSS;
    default:
      return x();
  }
}
/**
* Converts an HTTP response's error status to the equivalent error code.
*
* @param status - An HTTP error response status ("FAILED_PRECONDITION",
* "UNKNOWN", etc.)
* @returns The equivalent Code. Non-matching responses are mapped to
*     Code.UNKNOWN.
*/
((Ze = We || (We = {}))[Ze.OK = 0] = "OK", Ze[Ze.CANCELLED = 1] = "CANCELLED", Ze[Ze.UNKNOWN = 2] = "UNKNOWN", Ze[Ze.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", Ze[Ze.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Ze[Ze.NOT_FOUND = 5] = "NOT_FOUND", Ze[Ze.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Ze[Ze.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", Ze[Ze.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Ze[Ze.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", Ze[Ze.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Ze[Ze.ABORTED = 10] = "ABORTED", Ze[Ze.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Ze[Ze.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", Ze[Ze.INTERNAL = 13] = "INTERNAL", Ze[Ze.UNAVAILABLE = 14] = "UNAVAILABLE", Ze[Ze.DATA_LOSS = 15] = "DATA_LOSS");
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
// An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.
var rn = /** @class*/
(function () {
  function t(t, e) {
    (this.H = t, this.root = e || un.EMPTY);
  }
  // Returns a copy of the map, with the specified key/value added or replaced.
  return (t.prototype.zt = function (e, n) {
    return new t(this.H, this.root.zt(e, n, this.H).copy(null, null, un.Ht, null, null));
  }, // Returns a copy of the map, with the specified key removed.
  t.prototype.remove = function (e) {
    return new t(this.H, this.root.remove(e, this.H).copy(null, null, un.Ht, null, null));
  }, // Returns the value of the node with the given key, or null.
  t.prototype.get = function (t) {
    for (var e = this.root; !e.et(); ) {
      var n = this.H(t, e.key);
      if (0 === n) return e.value;
      n < 0 ? e = e.left : n > 0 && (e = e.right);
    }
    return null;
  }, // Returns the index of the element in this sorted map, or -1 if it doesn't
  // exist.
  t.prototype.indexOf = function (t) {
    for (var e = 0, n = this.root; !n.et(); ) {
      var r = this.H(t, n.key);
      if (0 === r) return e + n.left.size;
      r < 0 ? n = n.left : // Count all nodes left of the node plus the node itself
      (e += n.left.size + 1, n = n.right);
    }
    // Node not found
    return -1;
  }, t.prototype.et = function () {
    return this.root.et();
  }, Object.defineProperty(t.prototype, "size", {
    // Returns the total number of nodes in the map.
    get: function () {
      return this.root.size;
    },
    enumerable: !1,
    configurable: !0
  }), // Returns the minimum key in the map.
  t.prototype.Jt = function () {
    return this.root.Jt();
  }, // Returns the maximum key in the map.
  t.prototype.Yt = function () {
    return this.root.Yt();
  }, // Traverses the map in key order and calls the specified action function
  // for each key/value pair. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  t.prototype.Xt = function (t) {
    return this.root.Xt(t);
  }, t.prototype.forEach = function (t) {
    this.Xt(function (e, n) {
      return (t(e, n), !1);
    });
  }, t.prototype.toString = function () {
    var t = [];
    return (this.Xt(function (e, n) {
      return (t.push(e + ":" + n), !1);
    }), "{" + t.join(", ") + "}");
  }, // Traverses the map in reverse key order and calls the specified action
  // function for each key/value pair. If action returns true, traversal is
  // aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  t.prototype.Zt = function (t) {
    return this.root.Zt(t);
  }, // Returns an iterator over the SortedMap.
  t.prototype.te = function () {
    return new on(this.root, null, this.H, !1);
  }, t.prototype.ee = function (t) {
    return new on(this.root, t, this.H, !1);
  }, t.prototype.ne = function () {
    return new on(this.root, null, this.H, !0);
  }, t.prototype.se = function (t) {
    return new on(this.root, t, this.H, !0);
  }, t);
})(), on = /** @class*/
(function () {
  function t(t, e, n, r) {
    (this.ie = r, this.re = []);
    for (var i = 1; !t.et(); ) if ((i = e ? n(t.key, e) : 1, // flip the comparison if we're going in reverse
    r && (i *= -1), i < 0)) // This node is less than our start key. ignore it
    t = this.ie ? t.left : t.right; else {
      if (0 === i) {
        // This node is exactly equal to our start key. Push it on the stack,
        // but stop iterating;
        this.re.push(t);
        break;
      }
      // This node is greater than our start key, add it to the stack and move
      // to the next one
      (this.re.push(t), t = this.ie ? t.right : t.left);
    }
  }
  return (t.prototype.oe = function () {
    var t = this.re.pop(), e = {
      key: t.key,
      value: t.value
    };
    if (this.ie) for (t = t.left; !t.et(); ) (this.re.push(t), t = t.right); else for (t = t.right; !t.et(); ) (this.re.push(t), t = t.left);
    return e;
  }, t.prototype.ce = function () {
    return this.re.length > 0;
  }, t.prototype.ae = function () {
    if (0 === this.re.length) return null;
    var t = this.re[this.re.length - 1];
    return {
      key: t.key,
      value: t.value
    };
  }, t);
})(), un = /** @class*/
(function () {
  function t(e, n, r, i, o) {
    (this.key = e, this.value = n, this.color = null != r ? r : t.RED, this.left = null != i ? i : t.EMPTY, this.right = null != o ? o : t.EMPTY, this.size = this.left.size + 1 + this.right.size);
  }
  // Returns a copy of the current node, optionally replacing pieces of it.
  return (t.prototype.copy = function (e, n, r, i, o) {
    return new t(null != e ? e : this.key, null != n ? n : this.value, null != r ? r : this.color, null != i ? i : this.left, null != o ? o : this.right);
  }, t.prototype.et = function () {
    return !1;
  }, // Traverses the tree in key order and calls the specified action function
  // for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  t.prototype.Xt = function (t) {
    return this.left.Xt(t) || t(this.key, this.value) || this.right.Xt(t);
  }, // Traverses the tree in reverse key order and calls the specified action
  // function for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  t.prototype.Zt = function (t) {
    return this.right.Zt(t) || t(this.key, this.value) || this.left.Zt(t);
  }, // Returns the minimum node in the tree.
  t.prototype.min = function () {
    return this.left.et() ? this : this.left.min();
  }, // Returns the maximum key in the tree.
  t.prototype.Jt = function () {
    return this.min().key;
  }, // Returns the maximum key in the tree.
  t.prototype.Yt = function () {
    return this.right.et() ? this.key : this.right.Yt();
  }, // Returns new tree, with the key/value added.
  t.prototype.zt = function (t, e, n) {
    var r = this, i = n(t, r.key);
    return (r = i < 0 ? r.copy(null, null, null, r.left.zt(t, e, n), null) : 0 === i ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.zt(t, e, n))).ue();
  }, t.prototype.he = function () {
    if (this.left.et()) return t.EMPTY;
    var e = this;
    return (e.left.le() || e.left.left.le() || (e = e._e()), (e = e.copy(null, null, null, e.left.he(), null)).ue());
  }, // Returns new tree, with the specified item removed.
  t.prototype.remove = function (e, n) {
    var r, i = this;
    if (n(e, i.key) < 0) (i.left.et() || i.left.le() || i.left.left.le() || (i = i._e()), i = i.copy(null, null, null, i.left.remove(e, n), null)); else {
      if ((i.left.le() && (i = i.fe()), i.right.et() || i.right.le() || i.right.left.le() || (i = i.de()), 0 === n(e, i.key))) {
        if (i.right.et()) return t.EMPTY;
        (r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.he()));
      }
      i = i.copy(null, null, null, null, i.right.remove(e, n));
    }
    return i.ue();
  }, t.prototype.le = function () {
    return this.color;
  }, // Returns new tree after performing any needed rotations.
  t.prototype.ue = function () {
    var t = this;
    return (t.right.le() && !t.left.le() && (t = t.we()), t.left.le() && t.left.left.le() && (t = t.fe()), t.left.le() && t.right.le() && (t = t.Ee()), t);
  }, t.prototype._e = function () {
    var t = this.Ee();
    return (t.right.left.le() && (t = (t = (t = t.copy(null, null, null, null, t.right.fe())).we()).Ee()), t);
  }, t.prototype.de = function () {
    var t = this.Ee();
    return (t.left.left.le() && (t = (t = t.fe()).Ee()), t);
  }, t.prototype.we = function () {
    var e = this.copy(null, null, t.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, e, null);
  }, t.prototype.fe = function () {
    var e = this.copy(null, null, t.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, e);
  }, t.prototype.Ee = function () {
    var t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, t, e);
  }, // For testing.
  t.prototype.Te = function () {
    var t = this.Ie();
    return Math.pow(2, t) <= this.size + 1;
  }, // In a balanced RB tree, the black-depth (number of black nodes) from root to
  // leaves is equal on both sides.  This function verifies that or asserts.
  t.prototype.Ie = function () {
    if (this.le() && this.left.le()) throw x();
    if (this.right.le()) throw x();
    var t = this.left.Ie();
    if (t !== this.right.Ie()) throw x();
    return t + (this.le() ? 0 : 1);
  }, t);
})();
// end SortedMap
// An iterator over an LLRBNode.
// end LLRBNode
// Empty node is shared between all LLRB trees.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
(un.EMPTY = null, un.RED = !0, un.Ht = !1, // end LLRBEmptyNode
un.EMPTY = new (/** @class*/
(function () {
  function t() {
    this.size = 0;
  }
  return (Object.defineProperty(t.prototype, "key", {
    get: function () {
      throw x();
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "value", {
    get: function () {
      throw x();
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "color", {
    get: function () {
      throw x();
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "left", {
    get: function () {
      throw x();
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "right", {
    get: function () {
      throw x();
    },
    enumerable: !1,
    configurable: !0
  }), // Returns a copy of the current node.
  t.prototype.copy = function (t, e, n, r, i) {
    return this;
  }, // Returns a copy of the tree, with the specified key/value added.
  t.prototype.zt = function (t, e, n) {
    return new un(t, e);
  }, // Returns a copy of the tree, with the specified key removed.
  t.prototype.remove = function (t, e) {
    return this;
  }, t.prototype.et = function () {
    return !0;
  }, t.prototype.Xt = function (t) {
    return !1;
  }, t.prototype.Zt = function (t) {
    return !1;
  }, t.prototype.Jt = function () {
    return null;
  }, t.prototype.Yt = function () {
    return null;
  }, t.prototype.le = function () {
    return !1;
  }, // For testing.
  t.prototype.Te = function () {
    return !0;
  }, t.prototype.Ie = function () {
    return 0;
  }, t);
})())());
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* SortedSet is an immutable (copy-on-write) collection that holds elements
* in order specified by the provided comparator.
*
* NOTE: if provided comparator returns 0 for two elements, we consider them to
* be equal!
*/
var sn = /** @class*/
(function () {
  function t(t) {
    (this.H = t, this.data = new rn(this.H));
  }
  return (t.prototype.has = function (t) {
    return null !== this.data.get(t);
  }, t.prototype.first = function () {
    return this.data.Jt();
  }, t.prototype.last = function () {
    return this.data.Yt();
  }, Object.defineProperty(t.prototype, "size", {
    get: function () {
      return this.data.size;
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.indexOf = function (t) {
    return this.data.indexOf(t);
  }, /** Iterates elements in order defined by "comparator"*/
  t.prototype.forEach = function (t) {
    this.data.Xt(function (e, n) {
      return (t(e), !1);
    });
  }, /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1].*/
  t.prototype.me = function (t, e) {
    for (var n = this.data.ee(t[0]); n.ce(); ) {
      var r = n.oe();
      if (this.H(r.key, t[1]) >= 0) return;
      e(r.key);
    }
  }, /**
  * Iterates over `elem`s such that: start &lt;= elem until false is returned.
  */
  t.prototype.Ae = function (t, e) {
    var n;
    for (n = void 0 !== e ? this.data.ee(e) : this.data.te(); n.ce(); ) if (!t(n.oe().key)) return;
  }, /** Finds the least element greater than or equal to `elem`.*/
  t.prototype.Re = function (t) {
    var e = this.data.ee(t);
    return e.ce() ? e.oe().key : null;
  }, t.prototype.te = function () {
    return new an(this.data.te());
  }, t.prototype.ee = function (t) {
    return new an(this.data.ee(t));
  }, /** Inserts or updates an element*/
  t.prototype.add = function (t) {
    return this.copy(this.data.remove(t).zt(t, !0));
  }, /** Deletes an element*/
  t.prototype.delete = function (t) {
    return this.has(t) ? this.copy(this.data.remove(t)) : this;
  }, t.prototype.et = function () {
    return this.data.et();
  }, t.prototype.Pe = function (t) {
    var e = this;
    // Make sure `result` always refers to the larger one of the two sets.
    return (e.size < t.size && (e = t, t = this), t.forEach(function (t) {
      e = e.add(t);
    }), e);
  }, t.prototype.isEqual = function (e) {
    if (!(e instanceof t)) return !1;
    if (this.size !== e.size) return !1;
    for (var n = this.data.te(), r = e.data.te(); n.ce(); ) {
      var i = n.oe().key, o = r.oe().key;
      if (0 !== this.H(i, o)) return !1;
    }
    return !0;
  }, t.prototype.it = function () {
    var t = [];
    return (this.forEach(function (e) {
      t.push(e);
    }), t);
  }, t.prototype.toString = function () {
    var t = [];
    return (this.forEach(function (e) {
      return t.push(e);
    }), "SortedSet(" + t.toString() + ")");
  }, t.prototype.copy = function (e) {
    var n = new t(this.H);
    return (n.data = e, n);
  }, t);
})(), an = /** @class*/
(function () {
  function t(t) {
    this.ye = t;
  }
  return (t.prototype.oe = function () {
    return this.ye.oe().key;
  }, t.prototype.ce = function () {
    return this.ye.ce();
  }, t);
})(), cn = new rn(tt.H);
function hn() {
  return cn;
}
function fn() {
  return hn();
}
var ln = new rn(tt.H);
function pn() {
  return ln;
}
var dn = new rn(tt.H);
function vn() {
  return dn;
}
var yn = new sn(tt.H);
function mn() {
  for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
  for (var n = yn, r = 0, i = t; r < i.length; r++) {
    var o = i[r];
    n = n.add(o);
  }
  return n;
}
var gn = new sn(C);
function wn() {
  return gn;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* DocumentSet is an immutable (copy-on-write) collection that holds documents
* in order specified by the provided comparator. We always add a document key
* comparator on top of what is provided to guarantee document equality based on
* the key.
*/
var bn = /** @class*/
(function () {
  /** The default ordering is by key if the comparator is omitted*/
  function t(t) {
    // We are adding document key comparator to the end as it's the only
    // guaranteed unique property of a document.
    (this.H = t ? function (e, n) {
      return t(e, n) || tt.H(e.key, n.key);
    } : function (t, e) {
      return tt.H(t.key, e.key);
    }, this.ge = pn(), this.Ve = new rn(this.H));
  }
  return (t.pe = function (e) {
    return new t(e.H);
  }, t.prototype.has = function (t) {
    return null != this.ge.get(t);
  }, t.prototype.get = function (t) {
    return this.ge.get(t);
  }, t.prototype.first = function () {
    return this.Ve.Jt();
  }, t.prototype.last = function () {
    return this.Ve.Yt();
  }, t.prototype.et = function () {
    return this.Ve.et();
  }, /**
  * Returns the index of the provided key in the document set, or -1 if the
  * document key is not present in the set;
  */
  t.prototype.indexOf = function (t) {
    var e = this.ge.get(t);
    return e ? this.Ve.indexOf(e) : -1;
  }, Object.defineProperty(t.prototype, "size", {
    get: function () {
      return this.Ve.size;
    },
    enumerable: !1,
    configurable: !0
  }), /** Iterates documents in order defined by "comparator"*/
  t.prototype.forEach = function (t) {
    this.Ve.Xt(function (e, n) {
      return (t(e), !1);
    });
  }, /** Inserts or updates a document with the same key*/
  t.prototype.add = function (t) {
    // First remove the element if we have it.
    var e = this.delete(t.key);
    return e.copy(e.ge.zt(t.key, t), e.Ve.zt(t, null));
  }, /** Deletes a document with a given key*/
  t.prototype.delete = function (t) {
    var e = this.get(t);
    return e ? this.copy(this.ge.remove(t), this.Ve.remove(e)) : this;
  }, t.prototype.isEqual = function (e) {
    if (!(e instanceof t)) return !1;
    if (this.size !== e.size) return !1;
    for (var n = this.Ve.te(), r = e.Ve.te(); n.ce(); ) {
      var i = n.oe().key, o = r.oe().key;
      if (!i.isEqual(o)) return !1;
    }
    return !0;
  }, t.prototype.toString = function () {
    var t = [];
    return (this.forEach(function (e) {
      t.push(e.toString());
    }), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)");
  }, t.prototype.copy = function (e, n) {
    var r = new t();
    return (r.H = this.H, r.ge = e, r.Ve = n, r);
  }, t);
})(), _n = /** @class*/
(function () {
  function t() {
    this.be = new rn(tt.H);
  }
  return (t.prototype.track = function (t) {
    var e = t.doc.key, n = this.be.get(e);
    n ? // Merge the new change with the existing change.
    0 !== /*Added*/
    t.type && 3 === /*Metadata*/
    n.type ? this.be = this.be.zt(e, t) : 3 === /*Metadata*/
    t.type && 1 !== /*Removed*/
    n.type ? this.be = this.be.zt(e, {
      type: n.type,
      doc: t.doc
    }) : 2 === /*Modified*/
    t.type && 2 === /*Modified*/
    n.type ? this.be = this.be.zt(e, {
      type: 2,
      /*Modified*/
      doc: t.doc
    }) : 2 === /*Modified*/
    t.type && 0 === /*Added*/
    n.type ? this.be = this.be.zt(e, {
      type: 0,
      /*Added*/
      doc: t.doc
    }) : 1 === /*Removed*/
    t.type && 0 === /*Added*/
    n.type ? this.be = this.be.remove(e) : 1 === /*Removed*/
    t.type && 2 === /*Modified*/
    n.type ? this.be = this.be.zt(e, {
      type: 1,
      /*Removed*/
      doc: n.doc
    }) : 0 === /*Added*/
    t.type && 1 === /*Removed*/
    n.type ? this.be = this.be.zt(e, {
      type: 2,
      /*Modified*/
      doc: t.doc
    }) : // This includes these cases, which don't make sense:
    // Added->Added
    // Removed->Removed
    // Modified->Added
    // Removed->Modified
    // Metadata->Added
    // Removed->Metadata
    x() : this.be = this.be.zt(e, t);
  }, t.prototype.ve = function () {
    var t = [];
    return (this.be.Xt(function (e, n) {
      t.push(n);
    }), t);
  }, t);
})(), In = /** @class*/
(function () {
  function t(t, e, n, r, i, o, u, s) {
    (this.query = t, this.docs = e, this.Se = n, this.docChanges = r, this.De = i, this.fromCache = o, this.Ce = u, this.xe = s);
  }
  return (t.Ne = function (e, n, r, i) {
    var o = [];
    return (n.forEach(function (t) {
      o.push({
        type: 0,
        /*Added*/
        doc: t
      });
    }), new t(e, n, bn.pe(n), o, r, i, /*syncStateChanged=*/
    !0, /*excludesMetadataChanges=*/
    !1));
  }, Object.defineProperty(t.prototype, "hasPendingWrites", {
    get: function () {
      return !this.De.et();
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.isEqual = function (t) {
    if (!(this.fromCache === t.fromCache && this.Ce === t.Ce && this.De.isEqual(t.De) && le(this.query, t.query) && this.docs.isEqual(t.docs) && this.Se.isEqual(t.Se))) return !1;
    var e = this.docChanges, n = t.docChanges;
    if (e.length !== n.length) return !1;
    for (var r = 0; r < e.length; r++) if (e[r].type !== n[r].type || !e[r].doc.isEqual(n[r].doc)) return !1;
    return !0;
  }, t);
})(), En = /** @class*/
(function () {
  function t(/**
  * The snapshot version this event brings us up to, or MIN if not set.
  */
  t, /**
  * A map from target to changes to the target. See TargetChange.
  */
  e, /**
  * A set of targets that is known to be inconsistent. Listens for these
  * targets should be re-established without resume tokens.
  */
  n, /**
  * A set of which documents have changed or been deleted, along with the
  * doc's new values (if not deleted).
  */
  r, /**
  * A set of which document updates are due only to limbo resolution targets.
  */
  i) {
    (this.Ot = t, this.$e = e, this.Fe = n, this.Oe = r, this.ke = i);
  }
  /**
  * HACK: Views require RemoteEvents in order to determine whether the view is
  * CURRENT, but secondary tabs don't receive remote events. So this method is
  * used to create a synthesized RemoteEvent that can be used to apply a
  * CURRENT status change to a View, for queries executed in a different tab.
  */
  // PORTING NOTE: Multi-tab only
  return (t.Me = function (e, n) {
    var r = new Map();
    return (r.set(e, Tn.Le(e, n)), new t(X.min(), r, wn(), hn(), mn()));
  }, t);
})(), Tn = /** @class*/
(function () {
  function t(/**
  * An opaque, server-assigned token that allows watching a query to be resumed
  * after disconnecting without retransmitting all the data that matches the
  * query. The resume token essentially identifies a point in time from which
  * the server should resume sending results.
  */
  t, /**
  * The "current" (synced) status of this target. Note that "current"
  * has special meaning in the RPC protocol that implies that a target is
  * both up-to-date and consistent with the rest of the watch stream.
  */
  e, /**
  * The set of documents that were newly assigned to this target as part of
  * this remote event.
  */
  n, /**
  * The set of documents that were already assigned to this target but received
  * an update during this remote event.
  */
  r, /**
  * The set of documents that were removed from this target as part of this
  * remote event.
  */
  i) {
    (this.resumeToken = t, this.Be = e, this.qe = n, this.Ue = r, this.Qe = i);
  }
  return (t.Le = function (e, n) {
    return new t(U.T, n, mn(), mn(), mn());
  }, t);
})(), Nn = function (/** The new document applies to all of these targets.*/
t, /** The new document is removed from all of these targets.*/
e, /** The key of the document for this change.*/
n, /**
* The new document or NoDocument if it was deleted. Is null if the
* document went out of view without the server sending a new document.
*/
r) {
  (this.Ke = t, this.removedTargetIds = e, this.key = n, this.We = r);
}, An = function (t, e) {
  (this.targetId = t, this.je = e);
}, Dn = function (/** What kind of change occurred to the watch target.*/
t, /** The target IDs that were added/removed/set.*/
e, /**
* An opaque, server-assigned token that allows watching a target to be
* resumed after disconnecting without retransmitting all the data that
* matches the target. The resume token essentially identifies a point in
* time from which the server should resume sending results.
*/
n, /** An RPC error indicating why the watch failed.*/
r) {
  (void 0 === n && (n = U.T), void 0 === r && (r = null), this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = r);
}, Sn = /** @class*/
(function () {
  function t() {
    /**
    * The number of pending responses (adds or removes) that we are waiting on.
    * We only consider targets active that have no pending responses.
    */
    (this.Ge = 0, /**
    * Keeps track of the document changes since the last raised snapshot.
    *
    * These changes are continuously updated as we receive document updates and
    * always reflect the current set of changes against the last issued snapshot.
    */
    this.ze = On(), /** See public getters for explanations of these fields.*/
    this.He = U.T, this.Je = !1, /**
    * Whether this target state should be included in the next snapshot. We
    * initialize to true so that newly-added targets are included in the next
    * RemoteEvent.
    */
    this.Ye = !0);
  }
  return (Object.defineProperty(t.prototype, "Be", {
    /**
    * Whether this target has been marked 'current'.
    *
    * 'Current' has special meaning in the RPC protocol: It implies that the
    * Watch backend has sent us all changes up to the point at which the target
    * was added and that the target is consistent with the rest of the watch
    * stream.
    */
    get: function () {
      return this.Je;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "resumeToken", {
    /** The last resume token sent to us for this target.*/
    get: function () {
      return this.He;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "Xe", {
    /** Whether this target has pending target adds or target removes.*/
    get: function () {
      return 0 !== this.Ge;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "Ze", {
    /** Whether we have modified any state that should trigger a snapshot.*/
    get: function () {
      return this.Ye;
    },
    enumerable: !1,
    configurable: !0
  }), /**
  * Applies the resume token to the TargetChange, but only when it has a new
  * value. Empty resumeTokens are discarded.
  */
  t.prototype.tn = function (t) {
    t.l() > 0 && (this.Ye = !0, this.He = t);
  }, /**
  * Creates a target change from the current set of changes.
  *
  * To reset the document changes after raising this snapshot, call
  * `clearPendingChanges()`.
  */
  t.prototype.en = function () {
    var t = mn(), e = mn(), n = mn();
    return (this.ze.forEach(function (r, i) {
      switch (i) {
        case 0:
          /*Added*/
          t = t.add(r);
          break;
        case 2:
          /*Modified*/
          e = e.add(r);
          break;
        case 1:
          /*Removed*/
          n = n.add(r);
          break;
        default:
          x();
      }
    }), new Tn(this.He, this.Je, t, e, n));
  }, /**
  * Resets the document changes and sets `hasPendingChanges` to false.
  */
  t.prototype.nn = function () {
    (this.Ye = !1, this.ze = On());
  }, t.prototype.sn = function (t, e) {
    (this.Ye = !0, this.ze = this.ze.zt(t, e));
  }, t.prototype.rn = function (t) {
    (this.Ye = !0, this.ze = this.ze.remove(t));
  }, t.prototype.on = function () {
    this.Ge += 1;
  }, t.prototype.cn = function () {
    this.Ge -= 1;
  }, t.prototype.an = function () {
    (this.Ye = !0, this.Je = !0);
  }, t);
})(), xn = /** @class*/
(function () {
  function t(t) {
    (this.un = t, /** The internal state of all tracked targets.*/
    this.hn = new Map(), /** Keeps track of the documents to update since the last raised snapshot.*/
    this.ln = hn(), /** A mapping of document keys to their set of target IDs.*/
    this._n = kn(), /**
    * A list of targets with existence filter mismatches. These targets are
    * known to be inconsistent and their listens needs to be re-established by
    * RemoteStore.
    */
    this.fn = new sn(C));
  }
  return (t.prototype.dn = function (t) {
    for (var e = 0, n = t.Ke; e < n.length; e++) {
      var r = n[e];
      t.We instanceof Pt ? this.wn(r, t.We) : t.We instanceof Vt && this.En(r, t.key, t.We);
    }
    for (var i = 0, o = t.removedTargetIds; i < o.length; i++) {
      r = o[i];
      this.En(r, t.key, t.We);
    }
  }, /** Processes and adds the WatchTargetChange to the current set of changes.*/
  t.prototype.Tn = function (t) {
    var e = this;
    this.In(t, function (n) {
      var r = e.mn(n);
      switch (t.state) {
        case 0:
          /*NoChange*/
          e.An(n) && r.tn(t.resumeToken);
          break;
        case 1:
          /*Added*/
          // We need to decrement the number of pending acks needed from watch
          // for this targetId.
          (r.cn(), r.Xe || // We have a freshly added target, so we need to reset any state
          // that we had previously. This can happen e.g. when remove and add
          // back a target for existence filter mismatches.
          r.nn(), r.tn(t.resumeToken));
          break;
        case 2:
          /*Removed*/
          // We need to keep track of removed targets to we can post-filter and
          // remove any target changes.
          // We need to decrement the number of pending acks needed from watch
          // for this targetId.
          (r.cn(), r.Xe || e.removeTarget(n));
          break;
        case 3:
          /*Current*/
          e.An(n) && (r.an(), r.tn(t.resumeToken));
          break;
        case 4:
          /*Reset*/
          e.An(n) && // Reset the target and synthesizes removes for all existing
          // documents. The backend will re-add any documents that still
          // match the target before it sends the next global snapshot.
          (e.Rn(n), r.tn(t.resumeToken));
          break;
        default:
          x();
      }
    });
  }, /**
  * Iterates over all targetIds that the watch change applies to: either the
  * targetIds explicitly listed in the change or the targetIds of all currently
  * active targets.
  */
  t.prototype.In = function (t, e) {
    var n = this;
    t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.hn.forEach(function (t, r) {
      n.An(r) && e(r);
    });
  }, /**
  * Handles existence filters and synthesizes deletes for filter mismatches.
  * Targets that are invalidated by filter mismatches are added to
  * `pendingTargetResets`.
  */
  t.prototype.Pn = function (t) {
    var e = t.targetId, n = t.je.count, r = this.yn(e);
    if (r) {
      var i = r.target;
      if (qt(i)) if (0 === n) {
        // The existence filter told us the document does not exist. We deduce
        // that this document does not exist and apply a deleted document to
        // our updates. Without applying this deleted document there might be
        // another query that will raise this document as part of a snapshot
        // until it is resolved, essentially exposing inconsistency between
        // queries.
        var o = new tt(i.path);
        this.En(e, o, new Vt(o, X.min()));
      } else k(1 === n); else this.gn(e) !== n && // Existence filter mismatch: We reset the mapping and raise a new
      // snapshot with `isFromCache:true`.
      (this.Rn(e), this.fn = this.fn.add(e));
    }
  }, /**
  * Converts the currently accumulated state into a remote event at the
  * provided snapshot version. Resets the accumulated changes before returning.
  */
  t.prototype.Vn = function (t) {
    var e = this, n = new Map();
    this.hn.forEach(function (r, i) {
      var o = e.yn(i);
      if (o) {
        if (r.Be && qt(o.target)) {
          // Document queries for document that don't exist can produce an empty
          // result set. To update our local cache, we synthesize a document
          // delete if we have not previously received the document. This
          // resolves the limbo state of the document, removing it from
          // limboDocumentRefs.
          // TODO(dimond): Ideally we would have an explicit lookup target
          // instead resulting in an explicit delete message and we could
          // remove this special logic.
          var u = new tt(o.target.path);
          null !== e.ln.get(u) || e.pn(i, u) || e.En(i, u, new Vt(u, t));
        }
        r.Ze && (n.set(i, r.en()), r.nn());
      }
    });
    var r = mn();
    // We extract the set of limbo-only document updates as the GC logic
    // special-cases documents that do not appear in the target cache.
    // TODO(gsoltis): Expand on this comment once GC is available in the JS
    // client.
    this._n.forEach(function (t, n) {
      var i = !0;
      (n.Ae(function (t) {
        var n = e.yn(t);
        return !n || 2 === /*LimboResolution*/
        n.Ft || (i = !1, !1);
      }), i && (r = r.add(t)));
    });
    var i = new En(t, n, this.fn, this.ln, r);
    return (this.ln = hn(), this._n = kn(), this.fn = new sn(C), i);
  }, /**
  * Adds the provided document to the internal list of document updates and
  * its document key to the given target's mapping.
  */
  // Visible for testing.
  t.prototype.wn = function (t, e) {
    if (this.An(t)) {
      var n = this.pn(t, e.key) ? 2 : /*Modified*/
      0;
      (this.mn(t).sn(e.key, n), this.ln = this.ln.zt(e.key, e), this._n = this._n.zt(e.key, this.bn(e.key).add(t)));
    }
  }, /**
  * Removes the provided document from the target mapping. If the
  * document no longer matches the target, but the document's state is still
  * known (e.g. we know that the document was deleted or we received the change
  * that caused the filter mismatch), the new document can be provided
  * to update the remote document cache.
  */
  // Visible for testing.
  t.prototype.En = function (t, e, n) {
    if (this.An(t)) {
      var r = this.mn(t);
      (this.pn(t, e) ? r.sn(e, 1) : // The document may have entered and left the target before we raised a
      // snapshot, so we can just ignore the change.
      r.rn(e), this._n = this._n.zt(e, this.bn(e).delete(t)), n && (this.ln = this.ln.zt(e, n)));
    }
  }, t.prototype.removeTarget = function (t) {
    this.hn.delete(t);
  }, /**
  * Returns the current count of documents in the target. This includes both
  * the number of documents that the LocalStore considers to be part of the
  * target as well as any accumulated changes.
  */
  t.prototype.gn = function (t) {
    var e = this.mn(t).en();
    return this.un.vn(t).size + e.qe.size - e.Qe.size;
  }, /**
  * Increment the number of acks needed from watch before we can consider the
  * server to be 'in-sync' with the client's active targets.
  */
  t.prototype.on = function (t) {
    this.mn(t).on();
  }, t.prototype.mn = function (t) {
    var e = this.hn.get(t);
    return (e || (e = new Sn(), this.hn.set(t, e)), e);
  }, t.prototype.bn = function (t) {
    var e = this._n.get(t);
    return (e || (e = new sn(C), this._n = this._n.zt(t, e)), e);
  }, /**
  * Verifies that the user is still interested in this target (by calling
  * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
  * from watch.
  */
  t.prototype.An = function (t) {
    var e = null !== this.yn(t);
    return (e || N("WatchChangeAggregator", "Detected inactive target", t), e);
  }, /**
  * Returns the TargetData for an active target (i.e. a target that the user
  * is still interested in that has no outstanding target change requests).
  */
  t.prototype.yn = function (t) {
    var e = this.hn.get(t);
    return e && e.Xe ? null : this.un.Sn(t);
  }, /**
  * Resets the state of a Watch target to its initial state (e.g. sets
  * 'current' to false, clears the resume token and removes its target mapping
  * from all documents).
  */
  t.prototype.Rn = function (t) {
    var e = this;
    (this.hn.set(t, new Sn()), this.un.vn(t).forEach(function (n) {
      e.En(t, n, /*updatedDocument=*/
      null);
    }));
  }, /**
  * Returns whether the LocalStore considers the document to be part of the
  * specified target.
  */
  t.prototype.pn = function (t, e) {
    return this.un.vn(t).has(e);
  }, t);
})();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* DocumentChangeSet keeps track of a set of changes to docs in a query, merging
* duplicate events for the same doc.
*/
function kn() {
  return new rn(tt.H);
}
function On() {
  return new rn(tt.H);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var Pn = {
  asc: "ASCENDING",
  desc: "DESCENDING"
}, Vn = {
  "<": "LESS_THAN",
  "<=": "LESS_THAN_OR_EQUAL",
  ">": "GREATER_THAN",
  ">=": "GREATER_THAN_OR_EQUAL",
  "==": "EQUAL",
  "!=": "NOT_EQUAL",
  "array-contains": "ARRAY_CONTAINS",
  in: "IN",
  "not-in": "NOT_IN",
  "array-contains-any": "ARRAY_CONTAINS_ANY"
}, Cn = function (t, e) {
  (this.t = t, this.Bt = e);
};
/**
* This class generates JsonObject values for the Datastore API suitable for
* sending to either GRPC stub methods or via the JSON/HTTP REST API.
*
* The serializer supports both Protobuf.js and Proto3 JSON formats. By
* setting `useProto3Json` to true, the serializer will use the Proto3 JSON
* format.
*
* For a description of the Proto3 JSON format check
* https://developers.google.com/protocol-buffers/docs/proto3#json
*
* TODO(klimt): We can remove the databaseId argument if we keep the full
* resource name in documents.
*/
/**
* Returns a value for a Date that's appropriate to put into a proto.
*/
function Ln(t, e) {
  return t.Bt ? new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
/**
* Returns a value for bytes that's appropriate to put in a proto.
*
* Visible for testing.
*/
function Rn(t, e) {
  return t.Bt ? e.toBase64() : e.toUint8Array();
}
/**
* Returns a ByteString based on the proto string value.
*/
function Un(t, e) {
  return Ln(t, e.j());
}
function Mn(t) {
  return (k(!!t), X.K((function (t) {
    var e = ut(t);
    return new K(e.seconds, e.nanos);
  })(t)));
}
function qn(t, e) {
  return (function (t) {
    return new Z(["projects", t.projectId, "databases", t.database]);
  })(t).child("documents").child(e).rt();
}
function Fn(t) {
  var e = Z.ot(t);
  return (k(hr(e)), e);
}
function jn(t, e) {
  return qn(t.t, e.path);
}
function zn(t, e) {
  var n = Fn(e);
  if (n.get(1) !== t.t.projectId) throw new q(M.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.t.projectId);
  if (n.get(3) !== t.t.database) throw new q(M.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.t.database);
  return new tt(Yn(n));
}
function Gn(t, e) {
  return qn(t.t, e);
}
function Bn(t) {
  var e = Fn(t);
  // In v1beta1 queries for collections at the root did not have a trailing
  // "/documents". In v1 all resource paths contain "/documents". Preserve the
  // ability to read the v1beta1 form for compatibility with queries persisted
  // in the local target cache.
  return 4 === e.length ? Z.ct() : Yn(e);
}
function Qn(t) {
  return new Z(["projects", t.t.projectId, "databases", t.t.database]).rt();
}
function Yn(t) {
  return (k(t.length > 4 && "documents" === t.get(4)), t.Y(5));
}
function Hn(t, e, n) {
  return {
    name: jn(t, e),
    fields: n.proto.mapValue.fields
  };
}
function Kn(t, e, n) {
  var r = zn(t, e.name), i = Mn(e.updateTime), o = new St({
    mapValue: {
      fields: e.fields
    }
  });
  return new Pt(r, i, o, {
    hasCommittedMutations: !!n
  });
}
function Xn(t, e) {
  var n;
  if (e instanceof Be) n = {
    update: Hn(t, e.key, e.value)
  }; else if (e instanceof Je) n = {
    delete: jn(t, e.key)
  }; else if (e instanceof Qe) n = {
    update: Hn(t, e.key, e.data),
    updateMask: cr(e.Gt)
  }; else {
    if (!(e instanceof $e)) return x();
    n = {
      verify: jn(t, e.key)
    };
  }
  return (e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map(function (t) {
    return (function (t, e) {
      var n = e.transform;
      if (n instanceof Ae) return {
        fieldPath: e.field.rt(),
        setToServerValue: "REQUEST_TIME"
      };
      if (n instanceof De) return {
        fieldPath: e.field.rt(),
        appendMissingElements: {
          values: n.elements
        }
      };
      if (n instanceof xe) return {
        fieldPath: e.field.rt(),
        removeAllFromArray: {
          values: n.elements
        }
      };
      if (n instanceof Oe) return {
        fieldPath: e.field.rt(),
        increment: n.Ut
      };
      throw x();
    })(0, t);
  })), e.jt.Wt || (n.currentDocument = (function (t, e) {
    return void 0 !== e.updateTime ? {
      updateTime: Un(t, e.updateTime)
    } : void 0 !== e.exists ? {
      exists: e.exists
    } : x();
  })(t, e.jt)), n);
}
function Wn(t, e) {
  var n = e.currentDocument ? (function (t) {
    return void 0 !== t.updateTime ? Re.updateTime(Mn(t.updateTime)) : void 0 !== t.exists ? Re.exists(t.exists) : Re.Kt();
  })(e.currentDocument) : Re.Kt(), r = e.updateTransforms ? e.updateTransforms.map(function (e) {
    return (function (t, e) {
      var n = null;
      if (("setToServerValue" in e)) (k("REQUEST_TIME" === e.setToServerValue), n = new Ae()); else if (("appendMissingElements" in e)) {
        var r = e.appendMissingElements.values || [];
        n = new De(r);
      } else if (("removeAllFromArray" in e)) {
        var i = e.removeAllFromArray.values || [];
        n = new xe(i);
      } else ("increment" in e) ? n = new Oe(t, e.increment) : x();
      var o = $.lt(e.fieldPath);
      return new Ce(o, n);
    })(t, e);
  }) : [];
  if (e.update) {
    e.update.name;
    var i = zn(t, e.update.name), o = new St({
      mapValue: {
        fields: e.update.fields
      }
    });
    if (e.updateMask) {
      var u = (function (t) {
        var e = t.fieldPaths || [];
        return new it(e.map(function (t) {
          return $.lt(t);
        }));
      })(e.updateMask);
      return new Qe(i, o, u, n, r);
    }
    return new Be(i, o, n, r);
  }
  if (e.delete) {
    var s = zn(t, e.delete);
    return new Je(s, n);
  }
  if (e.verify) {
    var a = zn(t, e.verify);
    return new $e(a, n);
  }
  return x();
}
function Zn(t, e) {
  return {
    documents: [Gn(t, e.path)]
  };
}
function Jn(t, e) {
  // Dissect the path into parent, collectionId, and optional key filter.
  var n = {
    structuredQuery: {}
  }, r = e.path;
  null !== e.collectionGroup ? (n.parent = Gn(t, r), n.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: !0
  }]) : (n.parent = Gn(t, r.X()), n.structuredQuery.from = [{
    collectionId: r.tt()
  }]);
  var i = (function (t) {
    if (0 !== t.length) {
      var e = t.map(function (t) {
        // visible for testing
        return (function (t) {
          if ("==" === /*EQUAL*/
          t.op) {
            if (At(t.value)) return {
              unaryFilter: {
                field: or(t.field),
                op: "IS_NAN"
              }
            };
            if (Nt(t.value)) return {
              unaryFilter: {
                field: or(t.field),
                op: "IS_NULL"
              }
            };
          } else if ("!=" === /*NOT_EQUAL*/
          t.op) {
            if (At(t.value)) return {
              unaryFilter: {
                field: or(t.field),
                op: "IS_NOT_NAN"
              }
            };
            if (Nt(t.value)) return {
              unaryFilter: {
                field: or(t.field),
                op: "IS_NOT_NULL"
              }
            };
          }
          return {
            fieldFilter: {
              field: or(t.field),
              op: ir(t.op),
              value: t.value
            }
          };
        })(t);
      });
      return 1 === e.length ? e[0] : {
        compositeFilter: {
          op: "AND",
          filters: e
        }
      };
    }
  })(e.filters);
  i && (n.structuredQuery.where = i);
  var o = (function (t) {
    if (0 !== t.length) return t.map(function (t) {
      // visible for testing
      return (function (t) {
        return {
          field: or(t.field),
          direction: rr(t.dir)
        };
      })(t);
    });
  })(e.orderBy);
  o && (n.structuredQuery.orderBy = o);
  var u = (function (t, e) {
    return t.Bt || lt(e) ? e : {
      value: e
    };
  })(t, e.limit);
  return (null !== u && (n.structuredQuery.limit = u), e.startAt && (n.structuredQuery.startAt = er(e.startAt)), e.endAt && (n.structuredQuery.endAt = er(e.endAt)), n);
}
function $n(t) {
  var e = Bn(t.parent), n = t.structuredQuery, r = n.from ? n.from.length : 0, i = null;
  if (r > 0) {
    k(1 === r);
    var o = n.from[0];
    o.allDescendants ? i = o.collectionId : e = e.child(o.collectionId);
  }
  var u = [];
  n.where && (u = tr(n.where));
  var s = [];
  n.orderBy && (s = n.orderBy.map(function (t) {
    return (function (t) {
      return new Zt(ur(t.field), // visible for testing
      (function (t) {
        switch (t) {
          case "ASCENDING":
            return "asc";
          case "DESCENDING":
            return "desc";
          default:
            return;
        }
      })(t.direction));
    })(t);
  }));
  var a = null;
  n.limit && (a = (function (t) {
    var e;
    return lt(e = "object" == typeof t ? t.value : t) ? null : e;
  })(n.limit));
  var c = null;
  n.startAt && (c = nr(n.startAt));
  var h = null;
  return (n.endAt && (h = nr(n.endAt)), ne(e, i, s, u, a, "F", /*First*/
  c, h));
}
function tr(t) {
  return t ? void 0 !== t.unaryFilter ? [ar(t)] : void 0 !== t.fieldFilter ? [sr(t)] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map(function (t) {
    return tr(t);
  }).reduce(function (t, e) {
    return t.concat(e);
  }) : x() : [];
}
function er(t) {
  return {
    before: t.before,
    values: t.position
  };
}
function nr(t) {
  var e = !!t.before, n = t.values || [];
  return new Xt(n, e);
}
// visible for testing
function rr(t) {
  return Pn[t];
}
function ir(t) {
  return Vn[t];
}
function or(t) {
  return {
    fieldPath: t.rt()
  };
}
function ur(t) {
  return $.lt(t.fieldPath);
}
function sr(t) {
  return Ft.create(ur(t.fieldFilter.field), (function (t) {
    switch (t) {
      case "EQUAL":
        return "==";
      case "NOT_EQUAL":
        return "!=";
      case "GREATER_THAN":
        return ">";
      case "GREATER_THAN_OR_EQUAL":
        return ">=";
      case "LESS_THAN":
        return "<";
      case "LESS_THAN_OR_EQUAL":
        return "<=";
      case "ARRAY_CONTAINS":
        return "array-contains";
      case "IN":
        return "in";
      case "NOT_IN":
        return "not-in";
      case "ARRAY_CONTAINS_ANY":
        return "array-contains-any";
      case "OPERATOR_UNSPECIFIED":
      default:
        return x();
    }
  })(t.fieldFilter.op), t.fieldFilter.value);
}
function ar(t) {
  switch (t.unaryFilter.op) {
    case "IS_NAN":
      var e = ur(t.unaryFilter.field);
      return Ft.create(e, "==", /*EQUAL*/
      {
        doubleValue: NaN
      });
    case "IS_NULL":
      var n = ur(t.unaryFilter.field);
      return Ft.create(n, "==", /*EQUAL*/
      {
        nullValue: "NULL_VALUE"
      });
    case "IS_NOT_NAN":
      var r = ur(t.unaryFilter.field);
      return Ft.create(r, "!=", /*NOT_EQUAL*/
      {
        doubleValue: NaN
      });
    case "IS_NOT_NULL":
      var i = ur(t.unaryFilter.field);
      return Ft.create(i, "!=", /*NOT_EQUAL*/
      {
        nullValue: "NULL_VALUE"
      });
    case "OPERATOR_UNSPECIFIED":
    default:
      return x();
  }
}
function cr(t) {
  var e = [];
  return (t.fields.forEach(function (t) {
    return e.push(t.rt());
  }), {
    fieldPaths: e
  });
}
function hr(t) {
  // Resource names have at least 4 components (project ID, database ID)
  return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var fr = function () {
  var t = this;
  this.promise = new Promise(function (e, n) {
    (t.resolve = e, t.reject = n);
  });
}, lr = /** @class*/
(function () {
  function t(t) {
    var e = this;
    // NOTE: next/catchCallback will always point to our own wrapper functions,
    // not the user's raw next() or catch() callbacks.
    (this.Dn = null, this.Cn = null, // When the operation resolves, we'll set result or error and mark isDone.
    this.result = void 0, this.error = void 0, this.xn = !1, // Set to true when .then() or .catch() are called and prevents additional
    // chaining.
    this.Nn = !1, t(function (t) {
      (e.xn = !0, e.result = t, e.Dn && // value should be defined unless T is Void, but we can't express
      // that in the type system.
      e.Dn(t));
    }, function (t) {
      (e.xn = !0, e.error = t, e.Cn && e.Cn(t));
    }));
  }
  return (t.prototype.catch = function (t) {
    return this.next(void 0, t);
  }, t.prototype.next = function (e, n) {
    var r = this;
    return (this.Nn && x(), this.Nn = !0, this.xn ? this.error ? this.$n(n, this.error) : this.Fn(e, this.result) : new t(function (t, i) {
      (r.Dn = function (n) {
        r.Fn(e, n).next(t, i);
      }, r.Cn = function (e) {
        r.$n(n, e).next(t, i);
      });
    }));
  }, t.prototype.On = function () {
    var t = this;
    return new Promise(function (e, n) {
      t.next(e, n);
    });
  }, t.prototype.kn = function (e) {
    try {
      var n = e();
      return n instanceof t ? n : t.resolve(n);
    } catch (e) {
      return t.reject(e);
    }
  }, t.prototype.Fn = function (e, n) {
    return e ? this.kn(function () {
      return e(n);
    }) : t.resolve(n);
  }, t.prototype.$n = function (e, n) {
    return e ? this.kn(function () {
      return e(n);
    }) : t.reject(n);
  }, t.resolve = function (e) {
    return new t(function (t, n) {
      t(e);
    });
  }, t.reject = function (e) {
    return new t(function (t, n) {
      n(e);
    });
  }, t.Mn = function (// Accept all Promise types in waitFor().
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  e) {
    return new t(function (t, n) {
      var r = 0, i = 0, o = !1;
      (e.forEach(function (e) {
        (++r, e.next(function () {
          (++i, o && i === r && t());
        }, function (t) {
          return n(t);
        }));
      }), o = !0, i === r && t());
    });
  }, /**
  * Given an array of predicate functions that asynchronously evaluate to a
  * boolean, implements a short-circuiting `or` between the results. Predicates
  * will be evaluated until one of them returns `true`, then stop. The final
  * result will be whether any of them returned `true`.
  */
  t.Ln = function (e) {
    for (var n = t.resolve(!1), r = function (e) {
      n = n.next(function (n) {
        return n ? t.resolve(n) : e();
      });
    }, i = 0, o = e; i < o.length; i++) {
      r(o[i]);
    }
    return n;
  }, t.forEach = function (t, e) {
    var n = this, r = [];
    return (t.forEach(function (t, i) {
      r.push(e.call(n, t, i));
    }), this.Mn(r));
  }, t);
})(), pr = /** @class*/
(function () {
  function t(t, e) {
    var n = this;
    (this.action = t, this.transaction = e, this.aborted = !1, /**
    * A promise that resolves with the result of the IndexedDb transaction.
    */
    this.Bn = new fr(), this.transaction.oncomplete = function () {
      n.Bn.resolve();
    }, this.transaction.onabort = function () {
      e.error ? n.Bn.reject(new yr(t, e.error)) : n.Bn.resolve();
    }, this.transaction.onerror = function (e) {
      var r = _r(e.target.error);
      n.Bn.reject(new yr(t, r));
    });
  }
  return (t.open = function (e, n, r, i) {
    try {
      return new t(n, e.transaction(i, r));
    } catch (e) {
      throw new yr(n, e);
    }
  }, Object.defineProperty(t.prototype, "qn", {
    get: function () {
      return this.Bn.promise;
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.abort = function (t) {
    (t && this.Bn.reject(t), this.aborted || (N("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), this.aborted = !0, this.transaction.abort()));
  }, /**
  * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
  * operations performed on the SimpleDbStore happen within the context of this
  * transaction and it cannot be used anymore once the transaction is
  * completed.
  *
  * Note that we can't actually enforce that the KeyType and ValueType are
  * correct, but they allow type safety through the rest of the consuming code.
  */
  t.prototype.store = function (t) {
    var e = this.transaction.objectStore(t);
    return new gr(e);
  }, t);
})(), dr = /** @class*/
(function () {
  /*
  * Creates a new SimpleDb wrapper for IndexedDb database `name`.
  *
  * Note that `version` must not be a downgrade. IndexedDB does not support
  * downgrading the schema version. We currently do not support any way to do
  * versioning outside of IndexedDB's versioning mechanism, as only
  * version-upgrade transactions are allowed to do things like create
  * objectstores.
  */
  function t(e, r, i) {
    (this.name = e, this.version = r, this.Un = i, // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
    // whatever reason it's much harder to hit after 12.2 so we only proactively
    // log on 12.2.
    12.2 === t.Qn(_firebaseUtil.getUA()) && A("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround."));
  }
  /** Deletes the specified database.*/
  return (t.delete = function (t) {
    return (N("SimpleDb", "Removing database:", t), wr(window.indexedDB.deleteDatabase(t)).On());
  }, /** Returns true if IndexedDB is available in the current environment.*/
  t.Kn = function () {
    if ("undefined" == typeof indexedDB) return !1;
    if (t.Wn()) return !0;
    // We extensively use indexed array values and compound keys,
    // which IE and Edge do not support. However, they still have indexedDB
    // defined on the window, so we need to check for them here and make sure
    // to return that persistence is not enabled for those browsers.
    // For tracking support of this feature, see here:
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
    // Check the UA string to find out the browser.
    var e = _firebaseUtil.getUA(), r = t.Qn(e), i = 0 < r && r < 10, o = t.jn(e), u = 0 < o && o < 4.5;
    // IE 10
    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
    // IE 11
    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
    // Edge
    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
    // iOS Safari: Disable for users running iOS version < 10.
    return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || i || u);
  }, /**
  * Returns true if the backing IndexedDB store is the Node IndexedDBShim
  * (see https://github.com/axemclion/IndexedDBShim).
  */
  t.Wn = function () {
    var t;
    return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Gn);
  }, /** Helper to get a typed SimpleDbStore from a transaction.*/
  t.zn = function (t, e) {
    return t.store(e);
  }, // visible for testing
  /** Parse User Agent to determine iOS version. Returns -1 if not found.*/
  t.Qn = function (t) {
    var e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
    return Number(n);
  }, // visible for testing
  /** Parse User Agent to determine Android version. Returns -1 if not found.*/
  t.jn = function (t) {
    var e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
    return Number(n);
  }, /**
  * Opens the specified database, creating or upgrading it if necessary.
  */
  t.prototype.Hn = function (t) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var e, n = this;
      return _tslib.__generator(this, function (r) {
        switch (r.label) {
          case 0:
            return this.db ? [3, /*break*/
            2] : (N("SimpleDb", "Opening database:", this.name), e = this, [4, /*yield*/
            new Promise(function (e, r) {
              // TODO(mikelehen): Investigate browser compatibility.
              // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
              // suggests IE9 and older WebKit browsers handle upgrade
              // differently. They expect setVersion, as described here:
              // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
              var i = indexedDB.open(n.name, n.version);
              (i.onsuccess = function (t) {
                var n = t.target.result;
                e(n);
              }, i.onblocked = function () {
                r(new yr(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
              }, i.onerror = function (e) {
                var n = e.target.error;
                "VersionError" === n.name ? r(new q(M.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : r(new yr(t, n));
              }, i.onupgradeneeded = function (t) {
                N("SimpleDb", 'Database "' + n.name + '" requires upgrade from version:', t.oldVersion);
                var e = t.target.result;
                n.Un.Jn(e, i.transaction, t.oldVersion, n.version).next(function () {
                  N("SimpleDb", "Database upgrade to version " + n.version + " complete");
                });
              });
            })]);
          case 1:
            (e.db = r.sent(), r.label = 2);
          case 2:
            return [2, /*return*/
            (this.Yn && (this.db.onversionchange = function (t) {
              return n.Yn(t);
            }), this.db)];
        }
      });
    });
  }, t.prototype.Xn = function (t) {
    (this.Yn = t, this.db && (this.db.onversionchange = function (e) {
      return t(e);
    }));
  }, t.prototype.runTransaction = function (t, e, n, r) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var i, o, u, s, a;
      return _tslib.__generator(this, function (c) {
        switch (c.label) {
          case 0:
            (i = "readonly" === e, o = 0, u = function () {
              var e, u, a, c, h;
              return _tslib.__generator(this, function (f) {
                switch (f.label) {
                  case 0:
                    (++o, f.label = 1);
                  case 1:
                    return (f.trys.push([1, 4, , 5]), [4, /*yield*/
                    s.Hn(t)]);
                  case 2:
                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                    // fire), but still return the original transactionFnResult back to the
                    // caller.
                    return (s.db = f.sent(), e = pr.open(s.db, t, i ? "readonly" : "readwrite", n), u = r(e).catch(function (t) {
                      // Abort the transaction if there was an error.
                      return (e.abort(t), lr.reject(t));
                    }).On(), a = {}, u.catch(function () {}), [4, /*yield*/
                    e.qn]);
                  case 3:
                    return [2, /*return*/
                    (a.value = // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                    // fire), but still return the original transactionFnResult back to the
                    // caller.
                    (f.sent(), u), a)];
                  case 4:
                    return (c = f.sent(), h = "FirebaseError" !== c.name && o < 3, N("SimpleDb", "Transaction failed with error:", c.message, "Retrying:", h), s.close(), h ? [3, /*break*/
                    5] : [2, /*return*/
                    {
                      value: Promise.reject(c)
                    }]);
                  case 5:
                    return [2];
                }
              });
            }, s = this, c.label = 1);
          case 1:
            return [5, /*yield**/
            u()];
          case 2:
            if ("object" == typeof (a = c.sent())) return [2, /*return*/
            a.value];
            c.label = 3;
          case 3:
            return [3, /*break*/
            1];
          case 4:
            return [2];
        }
      });
    });
  }, t.prototype.close = function () {
    (this.db && this.db.close(), this.db = void 0);
  }, t);
})(), vr = /** @class*/
(function () {
  function t(t) {
    (this.Zn = t, this.ts = !1, this.es = null);
  }
  return (Object.defineProperty(t.prototype, "xn", {
    get: function () {
      return this.ts;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "ns", {
    get: function () {
      return this.es;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "cursor", {
    set: function (t) {
      this.Zn = t;
    },
    enumerable: !1,
    configurable: !0
  }), /**
  * This function can be called to stop iteration at any point.
  */
  t.prototype.done = function () {
    this.ts = !0;
  }, /**
  * This function can be called to skip to that next key, which could be
  * an index or a primary key.
  */
  t.prototype.ss = function (t) {
    this.es = t;
  }, /**
  * Delete the current cursor value from the object store.
  *
  * NOTE: You CANNOT do this with a keysOnly query.
  */
  t.prototype.delete = function () {
    return wr(this.Zn.delete());
  }, t);
})(), yr = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, M.UNAVAILABLE, "IndexedDB transaction '" + e + "' failed: " + n) || this).name = "IndexedDbTransactionError", r);
  }
  return (_tslib.__extends(e, t), e);
})(q);
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* PersistencePromise is essentially a re-implementation of Promise except
* it has a .next() method instead of .then() and .next() and .catch() callbacks
* are executed synchronously when a PersistencePromise resolves rather than
* asynchronously (Promise implementations use setImmediate() or similar).
*
* This is necessary to interoperate with IndexedDB which will automatically
* commit transactions if control is returned to the event loop without
* synchronously initiating another operation on the transaction.
*
* NOTE: .then() and .catch() only allow a single consumer, unlike normal
* Promises.
*/
/** Verifies whether `e` is an IndexedDbTransactionError.*/
function mr(t) {
  // Use name equality, as instanceof checks on errors don't work with errors
  // that wrap other errors.
  return "IndexedDbTransactionError" === t.name;
}
/**
* A wrapper around an IDBObjectStore providing an API that:
*
* 1) Has generic KeyType / ValueType parameters to provide strongly-typed
* methods for acting against the object store.
* 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
* method return a PersistencePromise instead.
* 3) Provides a higher-level API to avoid needing to do excessive wrapping of
* intermediate IndexedDB types (IDBCursorWithValue, etc.)
*/
var gr = /** @class*/
(function () {
  function t(t) {
    this.store = t;
  }
  return (t.prototype.put = function (t, e) {
    var n;
    return (void 0 !== e ? (N("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (N("SimpleDb", "PUT", this.store.name, "<auto-key>", t), n = this.store.put(t)), wr(n));
  }, /**
  * Adds a new value into an Object Store and returns the new key. Similar to
  * IndexedDb's `add()`, this method will fail on primary key collisions.
  *
  * @param value - The object to write.
  * @returns The key of the value to add.
  */
  t.prototype.add = function (t) {
    return (N("SimpleDb", "ADD", this.store.name, t, t), wr(this.store.add(t)));
  }, /**
  * Gets the object with the specified key from the specified store, or null
  * if no object exists with the specified key.
  *
  * @key The key of the object to get.
  * @returns The object with the specified key or null if no object exists.
  */
  t.prototype.get = function (t) {
    var e = this;
    // We're doing an unsafe cast to ValueType.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return wr(this.store.get(t)).next(function (n) {
      // Normalize nonexistence to null.
      return (void 0 === n && (n = null), N("SimpleDb", "GET", e.store.name, t, n), n);
    });
  }, t.prototype.delete = function (t) {
    return (N("SimpleDb", "DELETE", this.store.name, t), wr(this.store.delete(t)));
  }, /**
  * If we ever need more of the count variants, we can add overloads. For now,
  * all we need is to count everything in a store.
  *
  * Returns the number of rows in the store.
  */
  t.prototype.count = function () {
    return (N("SimpleDb", "COUNT", this.store.name), wr(this.store.count()));
  }, t.prototype.rs = function (t, e) {
    var n = this.cursor(this.options(t, e)), r = [];
    return this.os(n, function (t, e) {
      r.push(e);
    }).next(function () {
      return r;
    });
  }, t.prototype.cs = function (t, e) {
    N("SimpleDb", "DELETE ALL", this.store.name);
    var n = this.options(t, e);
    n.us = !1;
    var r = this.cursor(n);
    return this.os(r, function (t, e, n) {
      return n.delete();
    });
  }, t.prototype.hs = function (t, e) {
    var n;
    e ? n = t : (n = {}, e = t);
    var r = this.cursor(n);
    return this.os(r, e);
  }, /**
  * Iterates over a store, but waits for the given callback to complete for
  * each entry before iterating the next entry. This allows the callback to do
  * asynchronous work to determine if this iteration should continue.
  *
  * The provided callback should return `true` to continue iteration, and
  * `false` otherwise.
  */
  t.prototype.ls = function (t) {
    var e = this.cursor({});
    return new lr(function (n, r) {
      (e.onerror = function (t) {
        var e = _r(t.target.error);
        r(e);
      }, e.onsuccess = function (e) {
        var r = e.target.result;
        r ? t(r.primaryKey, r.value).next(function (t) {
          t ? r.continue() : n();
        }) : n();
      });
    });
  }, t.prototype.os = function (t, e) {
    var n = [];
    return new lr(function (r, i) {
      (t.onerror = function (t) {
        i(t.target.error);
      }, t.onsuccess = function (t) {
        var i = t.target.result;
        if (i) {
          var o = new vr(i), u = e(i.primaryKey, i.value, o);
          if (u instanceof lr) {
            var s = u.catch(function (t) {
              return (o.done(), lr.reject(t));
            });
            n.push(s);
          }
          o.xn ? r() : null === o.ns ? i.continue() : i.continue(o.ns);
        } else r();
      });
    }).next(function () {
      return lr.Mn(n);
    });
  }, t.prototype.options = function (t, e) {
    var n;
    return (void 0 !== t && ("string" == typeof t ? n = t : e = t), {
      index: n,
      range: e
    });
  }, t.prototype.cursor = function (t) {
    var e = "next";
    if ((t.reverse && (e = "prev"), t.index)) {
      var n = this.store.index(t.index);
      return t.us ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
    }
    return this.store.openCursor(t.range, e);
  }, t);
})();
/**
* Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
* handlers to resolve / reject the PersistencePromise as appropriate.
*/
function wr(t) {
  return new lr(function (e, n) {
    (t.onsuccess = function (t) {
      var n = t.target.result;
      e(n);
    }, t.onerror = function (t) {
      var e = _r(t.target.error);
      n(e);
    });
  });
}
// Guard so we only report the error once.
var br = !1;
function _r(t) {
  var e = dr.Qn(_firebaseUtil.getUA());
  if (e >= 12.2 && e < 13) {
    var r = "An internal error was encountered in the Indexed Database server";
    if (t.message.indexOf(r) >= 0) {
      // Wrap error in a more descriptive one.
      var i = new q("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + r + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
      return (br || (br = !0, // Throw a global exception outside of this promise chain, for the user to
      // potentially catch.
      setTimeout(function () {
        throw i;
      }, 0)), i);
    }
  }
  return t;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents an operation scheduled to be run in the future on an AsyncQueue.
*
* It is created via DelayedOperation.createAndSchedule().
*
* Supports cancellation (via cancel()) and early execution (via skipDelay()).
*
* Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
* in newer versions of TypeScript defines `finally`, which is not available in
* IE.
*/
var Ir = /** @class*/
(function () {
  function t(t, e, n, r, i) {
    (this._s = t, this.fs = e, this.ds = n, this.op = r, this.ws = i, this.Es = new fr(), this.then = this.Es.promise.then.bind(this.Es.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
    // and so we attach a dummy catch callback to avoid
    // 'UnhandledPromiseRejectionWarning' log spam.
    this.Es.promise.catch(function (t) {}));
  }
  return (t.Ts = function (e, n, r, i, o) {
    var u = new t(e, n, Date.now() + r, i, o);
    return (u.start(r), u);
  }, /**
  * Starts the timer. This is called immediately after construction by
  * createAndSchedule().
  */
  t.prototype.start = function (t) {
    var e = this;
    this.Is = setTimeout(function () {
      return e.As();
    }, t);
  }, /**
  * Queues the operation to run immediately (if it hasn't already been run or
  * canceled).
  */
  t.prototype.Rs = function () {
    return this.As();
  }, /**
  * Cancels the operation if it hasn't already been executed or canceled. The
  * promise will be rejected.
  *
  * As long as the operation has not yet been run, calling cancel() provides a
  * guarantee that the operation will not be run.
  */
  t.prototype.cancel = function (t) {
    null !== this.Is && (this.clearTimeout(), this.Es.reject(new q(M.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
  }, t.prototype.As = function () {
    var t = this;
    this._s.Ps(function () {
      return null !== t.Is ? (t.clearTimeout(), t.op().then(function (e) {
        return t.Es.resolve(e);
      })) : Promise.resolve();
    });
  }, t.prototype.clearTimeout = function () {
    null !== this.Is && (this.ws(this), clearTimeout(this.Is), this.Is = null);
  }, t);
})();
/**
* Returns a FirestoreError that can be surfaced to the user if the provided
* error is an IndexedDbTransactionError. Re-throws the error otherwise.
*/
function Er(t, e) {
  if ((A("AsyncQueue", e + ": " + t), mr(t))) return new q(M.UNAVAILABLE, e + ": " + t);
  throw t;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var Tr = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", Nr = /** @class*/
(function () {
  function t() {
    this.ys = [];
  }
  return (t.prototype.gs = function (t) {
    this.ys.push(t);
  }, t.prototype.Vs = function () {
    this.ys.forEach(function (t) {
      return t();
    });
  }, t);
})();
/**
* A base class representing a persistence transaction, encapsulating both the
* transaction's sequence numbers as well as a list of onCommitted listeners.
*
* When you call Persistence.runTransaction(), it will create a transaction and
* pass it to your callback. You then pass it to any method that operates
* on persistence.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Encodes a resource path into a IndexedDb-compatible string form.
*/
function Ar(t) {
  for (var e = "", n = 0; n < t.length; n++) (e.length > 0 && (e = Sr(e)), e = Dr(t.get(n), e));
  return Sr(e);
}
/** Encodes a single segment of a resource path into the given result*/
function Dr(t, e) {
  for (var n = e, r = t.length, i = 0; i < r; i++) {
    var o = t.charAt(i);
    switch (o) {
      case "\0":
        n += "";
        break;
      case "":
        n += "";
        break;
      default:
        n += o;
    }
  }
  return n;
}
/** Encodes a path separator into the given result*/
function Sr(t) {
  return t + "";
}
/**
* Decodes the given IndexedDb-compatible string form of a resource path into
* a ResourcePath instance. Note that this method is not suitable for use with
* decoding resource names from the server; those are One Platform format
* strings.
*/
function xr(t) {
  // Event the empty path must encode as a path of at least length 2. A path
  // with exactly 2 must be the empty path.
  var e = t.length;
  if ((k(e >= 2), 2 === e)) return (k("" === t.charAt(0) && "" === t.charAt(1)), Z.ct());
  // Escape characters cannot exist past the second-to-last position in the
  // source value.
  for (var n = e - 2, r = [], i = "", o = 0; o < e; ) {
    // The last two characters of a valid encoded path must be a separator, so
    // there must be an end to this segment.
    var u = t.indexOf("", o);
    switch (((u < 0 || u > n) && x(), t.charAt(u + 1))) {
      case "":
        var s = t.substring(o, u), a = void 0;
        (0 === i.length ? // Avoid copying for the common case of a segment that excludes \0
        // and \001
        a = s : (a = i += s, i = ""), r.push(a));
        break;
      case "":
        (i += t.substring(o, u), i += "\0");
        break;
      case "":
        // The escape character can be used in the output to encode itself.
        i += t.substring(o, u + 1);
        break;
      default:
        x();
    }
    o = u + 2;
  }
  return new Z(r);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Schema Version for the Web client:
* 1.  Initial version including Mutation Queue, Query Cache, and Remote
*     Document Cache
* 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
*     longer required because migration 3 unconditionally clears it.
* 3.  Dropped and re-created Query Cache to deal with cache corruption related
*     to limbo resolution. Addresses
*     https://github.com/firebase/firebase-ios-sdk/issues/1548
* 4.  Multi-Tab Support.
* 5.  Removal of held write acks.
* 6.  Create document global for tracking document cache size.
* 7.  Ensure every cached document has a sentinel row with a sequence number.
* 8.  Add collection-parent index for Collection Group queries.
* 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
*     an auto-incrementing ID. This is required for Index-Free queries.
* 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
* 11. Add bundles and named_queries for bundle support.
*/
/**
* Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
*/
var kr = function (t, e) {
  (this.seconds = t, this.nanoseconds = e);
}, Or = function (t, /** Whether to allow shared access from multiple tabs.*/
e, n) {
  (this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n);
};
/**
* A singleton object to be stored in the 'owner' store in IndexedDb.
*
* A given database can have a single primary tab assigned at a given time. That
* tab must validate that it is still holding the primary lease before every
* operation that requires locked access. The primary tab should regularly
* write an updated timestamp to this lease to prevent other tabs from
* "stealing" the primary lease
*/
/**
* Name of the IndexedDb object store.
*
* Note that the name 'owner' is chosen to ensure backwards compatibility with
* older clients that only supported single locked access to the persistence
* layer.
*/
(Or.store = "owner", /**
* The key string used for the single object that exists in the
* DbPrimaryClient store.
*/
Or.key = "owner");
/**
* An object to be stored in the 'mutationQueues' store in IndexedDb.
*
* Each user gets a single queue of MutationBatches to apply to the server.
* DbMutationQueue tracks the metadata about the queue.
*/
var Pr = function (/**
* The normalized user ID to which this queue belongs.
*/
t, /**
* An identifier for the highest numbered batch that has been acknowledged
* by the server. All MutationBatches in this queue with batchIds less
* than or equal to this value are considered to have been acknowledged by
* the server.
*
* NOTE: this is deprecated and no longer used by the code.
*/
e, /**
* A stream token that was previously sent by the server.
*
* See StreamingWriteRequest in datastore.proto for more details about
* usage.
*
* After sending this token, earlier tokens may not be used anymore so
* only a single stream token is retained.
*
* NOTE: this is deprecated and no longer used by the code.
*/
n) {
  (this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n);
};
/** Name of the IndexedDb object store.*/
(Pr.store = "mutationQueues", /** Keys are automatically assigned via the userId property.*/
Pr.keyPath = "userId");
/**
* An object to be stored in the 'mutations' store in IndexedDb.
*
* Represents a batch of user-level mutations intended to be sent to the server
* in a single write. Each user-level batch gets a separate DbMutationBatch
* with a new batchId.
*/
var Vr = function (/**
* The normalized user ID to which this batch belongs.
*/
t, /**
* An identifier for this batch, allocated using an auto-generated key.
*/
e, /**
* The local write time of the batch, stored as milliseconds since the
* epoch.
*/
n, /**
* A list of "mutations" that represent a partial base state from when this
* write batch was initially created. During local application of the write
* batch, these baseMutations are applied prior to the real writes in order
* to override certain document fields from the remote document cache. This
* is necessary in the case of non-idempotent writes (e.g. `increment()`
* transforms) to make sure that the local view of the modified documents
* doesn't flicker if the remote document cache receives the result of the
* non-idempotent write before the write is removed from the queue.
*
* These mutations are never sent to the backend.
*/
r, /**
* A list of mutations to apply. All mutations will be applied atomically.
*
* Mutations are serialized via toMutation().
*/
i) {
  (this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = r, this.mutations = i);
};
/** Name of the IndexedDb object store.*/
(Vr.store = "mutations", /** Keys are automatically assigned via the userId, batchId properties.*/
Vr.keyPath = "batchId", /** The index name for lookup of mutations by user.*/
Vr.userMutationsIndex = "userMutationsIndex", /** The user mutations index is keyed by [userId, batchId] pairs.*/
Vr.userMutationsKeyPath = ["userId", "batchId"]);
/**
* An object to be stored in the 'documentMutations' store in IndexedDb.
*
* A manually maintained index of all the mutation batches that affect a given
* document key. The rows in this table are references based on the contents of
* DbMutationBatch.mutations.
*/
var Cr = /** @class*/
(function () {
  function t() {}
  /**
  * Creates a [userId] key for use in the DbDocumentMutations index to iterate
  * over all of a user's document mutations.
  */
  return (t.prefixForUser = function (t) {
    return [t];
  }, /**
  * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
  * index to iterate over all at document mutations for a given path or lower.
  */
  t.prefixForPath = function (t, e) {
    return [t, Ar(e)];
  }, /**
  * Creates a full index key of [userId, encodedPath, batchId] for inserting
  * and deleting into the DbDocumentMutations index.
  */
  t.key = function (t, e, n) {
    return [t, Ar(e), n];
  }, t);
})();
(Cr.store = "documentMutations", /**
* Because we store all the useful information for this store in the key,
* there is no useful information to store as the value. The raw (unencoded)
* path cannot be stored because IndexedDb doesn't store prototype
* information.
*/
Cr.PLACEHOLDER = new Cr());
/**
* Represents the known absence of a document at a particular version.
* Stored in IndexedDb as part of a DbRemoteDocument object.
*/
var Lr = function (t, e) {
  (this.path = t, this.readTime = e);
}, Rr = function (t, e) {
  (this.path = t, this.version = e);
}, Ur = // TODO: We are currently storing full document keys almost three times
// (once as part of the primary key, once - partly - as `parentPath` and once
// inside the encoded documents). During our next migration, we should
// rewrite the primary key as parentPath + document ID which would allow us
// to drop one value.
function (/**
* Set to an instance of DbUnknownDocument if the data for a document is
* not known, but it is known that a document exists at the specified
* version (e.g. it had a successful update applied to it)
*/
t, /**
* Set to an instance of a DbNoDocument if it is known that no document
* exists.
*/
e, /**
* Set to an instance of a Document if there's a cached version of the
* document.
*/
n, /**
* Documents that were written to the remote document store based on
* a write acknowledgment are marked with `hasCommittedMutations`. These
* documents are potentially inconsistent with the backend's copy and use
* the write's commit version as their document version.
*/
r, /**
* When the document was read from the backend. Undefined for data written
* prior to schema version 9.
*/
i, /**
* The path of the collection this document is part of. Undefined for data
* written prior to schema version 9.
*/
o) {
  (this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = r, this.readTime = i, this.parentPath = o);
};
/**
* Represents a document that is known to exist but whose data is unknown.
* Stored in IndexedDb as part of a DbRemoteDocument object.
*/
(Ur.store = "remoteDocuments", /**
* An index that provides access to all entries sorted by read time (which
* corresponds to the last modification time of each row).
*
* This index is used to provide a changelog for Multi-Tab.
*/
Ur.readTimeIndex = "readTimeIndex", Ur.readTimeIndexPath = "readTime", /**
* An index that provides access to documents in a collection sorted by read
* time.
*
* This index is used to allow the RemoteDocumentCache to fetch newly changed
* documents in a collection.
*/
Ur.collectionReadTimeIndex = "collectionReadTimeIndex", Ur.collectionReadTimeIndexPath = ["parentPath", "readTime"]);
/**
* Contains a single entry that has metadata about the remote document cache.
*/
var Mr = /**
* @param byteSize - Approximately the total size in bytes of all the
* documents in the document cache.
*/
function (t) {
  this.byteSize = t;
};
(Mr.store = "remoteDocumentGlobal", Mr.key = "remoteDocumentGlobalKey");
/**
* An object to be stored in the 'targets' store in IndexedDb.
*
* This is based on and should be kept in sync with the proto used in the iOS
* client.
*
* Each query the client listens to against the server is tracked on disk so
* that the query can be efficiently resumed on restart.
*/
var qr = function (/**
* An auto-generated sequential numeric identifier for the query.
*
* Queries are stored using their canonicalId as the key, but these
* canonicalIds can be quite long so we additionally assign a unique
* queryId which can be used by referenced data structures (e.g.
* indexes) to minimize the on-disk cost.
*/
t, /**
* The canonical string representing this query. This is not unique.
*/
e, /**
* The last readTime received from the Watch Service for this query.
*
* This is the same value as TargetChange.read_time in the protos.
*/
n, /**
* An opaque, server-assigned token that allows watching a query to be
* resumed after disconnecting without retransmitting all the data
* that matches the query. The resume token essentially identifies a
* point in time from which the server should resume sending results.
*
* This is related to the snapshotVersion in that the resumeToken
* effectively also encodes that value, but the resumeToken is opaque
* and sometimes encodes additional information.
*
* A consequence of this is that the resumeToken should be used when
* asking the server to reason about where this client is in the watch
* stream, but the client should use the snapshotVersion for its own
* purposes.
*
* This is the same value as TargetChange.resume_token in the protos.
*/
r, /**
* A sequence number representing the last time this query was
* listened to, used for garbage collection purposes.
*
* Conventionally this would be a timestamp value, but device-local
* clocks are unreliable and they must be able to create new listens
* even while disconnected. Instead this should be a monotonically
* increasing number that's incremented on each listen call.
*
* This is different from the queryId since the queryId is an
* immutable identifier assigned to the Query on first use while
* lastListenSequenceNumber is updated every time the query is
* listened to.
*/
i, /**
* Denotes the maximum snapshot version at which the associated query view
* contained no limbo documents.  Undefined for data written prior to
* schema version 9.
*/
o, /**
* The query for this target.
*
* Because canonical ids are not unique we must store the actual query. We
* use the proto to have an object we can persist without having to
* duplicate translation logic to and from a `Query` object.
*/
u) {
  (this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = r, this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = o, this.query = u);
};
(qr.store = "targets", /** Keys are automatically assigned via the targetId property.*/
qr.keyPath = "targetId", /** The name of the queryTargets index.*/
qr.queryTargetsIndexName = "queryTargetsIndex", /**
* The index of all canonicalIds to the targets that they match. This is not
* a unique mapping because canonicalId does not promise a unique name for all
* possible queries, so we append the targetId to make the mapping unique.
*/
qr.queryTargetsKeyPath = ["canonicalId", "targetId"]);
/**
* An object representing an association between a target and a document, or a
* sentinel row marking the last sequence number at which a document was used.
* Each document cached must have a corresponding sentinel row before lru
* garbage collection is enabled.
*
* The target associations and sentinel rows are co-located so that orphaned
* documents and their sequence numbers can be identified efficiently via a scan
* of this store.
*/
var Fr = function (/**
* The targetId identifying a target or 0 for a sentinel row.
*/
t, /**
* The path to the document, as encoded in the key.
*/
e, /**
* If this is a sentinel row, this should be the sequence number of the last
* time the document specified by `path` was used. Otherwise, it should be
* `undefined`.
*/
n) {
  (this.targetId = t, this.path = e, this.sequenceNumber = n);
};
/** Name of the IndexedDb object store.*/
(Fr.store = "targetDocuments", /** Keys are automatically assigned via the targetId, path properties.*/
Fr.keyPath = ["targetId", "path"], /** The index name for the reverse index.*/
Fr.documentTargetsIndex = "documentTargetsIndex", /** We also need to create the reverse index for these properties.*/
Fr.documentTargetsKeyPath = ["path", "targetId"]);
/**
* A record of global state tracked across all Targets, tracked separately
* to avoid the need for extra indexes.
*
* This should be kept in-sync with the proto used in the iOS client.
*/
var jr = function (/**
* The highest numbered target id across all targets.
*
* See DbTarget.targetId.
*/
t, /**
* The highest numbered lastListenSequenceNumber across all targets.
*
* See DbTarget.lastListenSequenceNumber.
*/
e, /**
* A global snapshot version representing the last consistent snapshot we
* received from the backend. This is monotonically increasing and any
* snapshots received from the backend prior to this version (e.g. for
* targets resumed with a resumeToken) should be suppressed (buffered)
* until the backend has caught up to this snapshot version again. This
* prevents our cache from ever going backwards in time.
*/
n, /**
* The number of targets persisted.
*/
r) {
  (this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, this.targetCount = r);
};
/**
* The key string used for the single object that exists in the
* DbTargetGlobal store.
*/
(jr.key = "targetGlobalKey", jr.store = "targetGlobal");
/**
* An object representing an association between a Collection id (e.g. 'messages')
* to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
* This is used to efficiently find all collections to query when performing
* a Collection Group query.
*/
var zr = function (/**
* The collectionId (e.g. 'messages')
*/
t, /**
* The path to the parent (either a document location or an empty path for
* a root-level collection).
*/
e) {
  (this.collectionId = t, this.parent = e);
};
/** Name of the IndexedDb object store.*/
(zr.store = "collectionParents", /** Keys are automatically assigned via the collectionId, parent properties.*/
zr.keyPath = ["collectionId", "parent"]);
/**
* A record of the metadata state of each client.
*
* PORTING NOTE: This is used to synchronize multi-tab state and does not need
* to be ported to iOS or Android.
*/
var Gr = function (// Note: Previous schema versions included a field
// "lastProcessedDocumentChangeId". Don't use anymore.
/** The auto-generated client id assigned at client startup.*/
t, /** The last time this state was updated.*/
e, /** Whether the client's network connection is enabled.*/
n, /** Whether this client is running in a foreground tab.*/
r) {
  (this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = r);
};
/** Name of the IndexedDb object store.*/
(Gr.store = "clientMetadata", /** Keys are automatically assigned via the clientId properties.*/
Gr.keyPath = "clientId");
/**
* A object representing a bundle loaded by the SDK.
*/
var Br = function (/** The ID of the loaded bundle.*/
t, /** The create time of the loaded bundle.*/
e, /** The schema version of the loaded bundle.*/
n) {
  (this.bundleId = t, this.createTime = e, this.version = n);
};
/** Name of the IndexedDb object store.*/
(Br.store = "bundles", Br.keyPath = "bundleId");
/**
* A object representing a named query loaded by the SDK via a bundle.
*/
var Qr = function (/** The name of the query.*/
t, /** The read time of the results saved in the bundle from the named query.*/
e, /** The query saved in the bundle.*/
n) {
  (this.name = t, this.readTime = e, this.bundledQuery = n);
};
/** Name of the IndexedDb object store.*/
(Qr.store = "namedQueries", Qr.keyPath = "name");
// Visible for testing
var Yr = _tslib.__spreadArrays(_tslib.__spreadArrays(_tslib.__spreadArrays(_tslib.__spreadArrays([Pr.store, Vr.store, Cr.store, Ur.store, qr.store, Or.store, jr.store, Fr.store], [Gr.store]), [Mr.store]), [zr.store]), [Br.store, Qr.store]), Hr = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this) || this).ps = e, r.bs = n, r);
  }
  return (_tslib.__extends(e, t), e);
})(Nr);
// V2 is no longer usable (see comment at top of file)
// Visible for testing
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function Kr(t, e) {
  var n = O(t);
  return dr.zn(n.ps, e);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A batch of mutations that will be sent as one unit to the backend.
*/
var Xr = /** @class*/
(function () {
  /**
  * @param batchId - The unique ID of this mutation batch.
  * @param localWriteTime - The original write time of this mutation.
  * @param baseMutations - Mutations that are used to populate the base
  * values when this mutation is applied locally. This can be used to locally
  * overwrite values that are persisted in the remote document cache. Base
  * mutations are never sent to the backend.
  * @param mutations - The user-provided mutations in this mutation batch.
  * User-provided mutations are applied both locally and remotely on the
  * backend.
  */
  function t(t, e, n, r) {
    (this.batchId = t, this.vs = e, this.baseMutations = n, this.mutations = r);
  }
  return (t.prototype.Ss = function (t, e, n) {
    for (var r = n.Ds, i = 0; i < this.mutations.length; i++) {
      var o = this.mutations[i];
      o.key.isEqual(t) && (e = qe(o, e, r[i]));
    }
    return e;
  }, /**
  * Computes the local view of a document given all the mutations in this
  * batch.
  *
  * @param docKey - The key of the document to apply mutations to.
  * @param maybeDoc - The document to apply mutations to.
  */
  t.prototype.Cs = function (t, e) {
    // First, apply the base state. This allows us to apply non-idempotent
    // transform against a consistent set of values.
    for (var n = 0, r = this.baseMutations; n < r.length; n++) {
      (u = r[n]).key.isEqual(t) && (e = Fe(u, e, this.vs));
    }
    // Second, apply all user-provided mutations.
    for (var i = 0, o = this.mutations; i < o.length; i++) {
      var u;
      (u = o[i]).key.isEqual(t) && (e = Fe(u, e, this.vs));
    }
    return e;
  }, /**
  * Computes the local view for all provided documents given the mutations in
  * this batch.
  */
  t.prototype.xs = function (t) {
    var e = this, n = t;
    // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
    // directly (as done in `applyToLocalView()`), we can reduce the complexity
    // to O(n).
    return (this.mutations.forEach(function (r) {
      var i = e.Cs(r.key, t.get(r.key));
      i && (n = n.zt(r.key, i));
    }), n);
  }, t.prototype.keys = function () {
    return this.mutations.reduce(function (t, e) {
      return t.add(e.key);
    }, mn());
  }, t.prototype.isEqual = function (t) {
    return this.batchId === t.batchId && L(this.mutations, t.mutations, function (t, e) {
      return ze(t, e);
    }) && L(this.baseMutations, t.baseMutations, function (t, e) {
      return ze(t, e);
    });
  }, t);
})(), Wr = /** @class*/
(function () {
  function t(t, e, n, /**
  * A pre-computed mapping from each mutated document to the resulting
  * version.
  */
  r) {
    (this.batch = t, this.Ns = e, this.Ds = n, this.$s = r);
  }
  return (t.from = function (e, n, r) {
    k(e.mutations.length === r.length);
    for (var i = vn(), o = e.mutations, u = 0; u < o.length; u++) i = i.zt(o[u].key, r[u].version);
    return new t(e, n, r, i);
  }, t);
})(), Zr = function (t) {
  this.Fs = t;
};
/** The result of applying a mutation batch to the backend.*/
/** Decodes a remote document from storage locally to a Document.*/
function Jr(t, e) {
  if (e.document) return Kn(t.Fs, e.document, !!e.hasCommittedMutations);
  if (e.noDocument) {
    var n = tt.Et(e.noDocument.path), r = ri(e.noDocument.readTime);
    return new Vt(n, r, {
      hasCommittedMutations: !!e.hasCommittedMutations
    });
  }
  if (e.unknownDocument) {
    var i = tt.Et(e.unknownDocument.path);
    r = ri(e.unknownDocument.version);
    return new Ct(i, r);
  }
  return x();
}
/** Encodes a document for storage locally.*/
function $r(t, e, n) {
  var r = ti(n), i = e.key.path.X().it();
  if (e instanceof Pt) {
    var o = (function (t, e) {
      return {
        name: jn(t, e.key),
        fields: e.bt().mapValue.fields,
        updateTime: Ln(t, e.version.j())
      };
    })(t.Fs, e), u = e.hasCommittedMutations;
    return new Ur(/*unknownDocument=*/
    null, /*noDocument=*/
    null, o, u, r, i);
  }
  if (e instanceof Vt) {
    var s = e.key.path.it(), a = ni(e.version);
    u = e.hasCommittedMutations;
    return new Ur(/*unknownDocument=*/
    null, new Lr(s, a), /*document=*/
    null, u, r, i);
  }
  if (e instanceof Ct) {
    var c = e.key.path.it(), h = ni(e.version);
    return new Ur(new Rr(c, h), /*noDocument=*/
    null, /*document=*/
    null, /*hasCommittedMutations=*/
    !0, r, i);
  }
  return x();
}
function ti(t) {
  var e = t.j();
  return [e.seconds, e.nanoseconds];
}
function ei(t) {
  var e = new K(t[0], t[1]);
  return X.K(e);
}
function ni(t) {
  var e = t.j();
  return new kr(e.seconds, e.nanoseconds);
}
function ri(t) {
  var e = new K(t.seconds, t.nanoseconds);
  return X.K(e);
}
/** Encodes a batch of mutations into a DbMutationBatch for local storage.*/
/** Decodes a DbMutationBatch into a MutationBatch*/
function ii(t, e) {
  // Squash old transform mutations into existing patch or set mutations.
  // The replacement of representing `transforms` with `update_transforms`
  // on the SDK means that old `transform` mutations stored in IndexedDB need
  // to be updated to `update_transforms`.
  // TODO(b/174608374): Remove this code once we perform a schema migration.
  for (var n = (e.baseMutations || []).map(function (e) {
    return Wn(t.Fs, e);
  }), r = 0; r < e.mutations.length - 1; ++r) {
    var i = e.mutations[r];
    if (r + 1 < e.mutations.length && void 0 !== e.mutations[r + 1].transform) {
      var o = e.mutations[r + 1];
      (i.updateTransforms = o.transform.fieldTransforms, e.mutations.splice(r + 1, 1), ++r);
    }
  }
  var u = e.mutations.map(function (e) {
    return Wn(t.Fs, e);
  }), s = K.fromMillis(e.localWriteTimeMs);
  return new Xr(e.batchId, s, n, u);
}
/** Decodes a DbTarget into TargetData*/
function oi(t) {
  var e, n, r = ri(t.readTime), i = void 0 !== t.lastLimboFreeSnapshotVersion ? ri(t.lastLimboFreeSnapshotVersion) : X.min();
  return (void 0 !== t.query.documents ? (k(1 === (n = t.query).documents.length), e = he(re(Bn(n.documents[0])))) : e = (function (t) {
    return he($n(t));
  })(t.query), new ge(e, t.targetId, 0, /*Listen*/
  t.lastListenSequenceNumber, r, i, U.fromBase64String(t.resumeToken)));
}
function ui(t, e) {
  var n, r = ni(e.Ot), i = ni(e.lastLimboFreeSnapshotVersion);
  n = qt(e.target) ? Zn(t.Fs, e.target) : Jn(t.Fs, e.target);
  // We can't store the resumeToken as a ByteString in IndexedDb, so we
  // convert it to a base64 string for storage.
  var o = e.resumeToken.toBase64();
  // lastListenSequenceNumber is always 0 until we do real GC.
  return new qr(e.targetId, Ut(e.target), r, o, e.sequenceNumber, i, n);
}
/**
* A helper function for figuring out what kind of query has been stored.
*/
/**
* Encodes a `BundledQuery` from bundle proto to a Query object.
*
* This reconstructs the original query used to build the bundle being loaded,
* including features exists only in SDKs (for example: limit-to-last).
*/
function si(t) {
  var e = $n({
    parent: t.parent,
    structuredQuery: t.structuredQuery
  });
  return "LAST" === t.limitType ? fe(e, e.limit, "L") : e;
}
/** Encodes a NamedQuery proto object to a NamedQuery model object.*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var ai = /** @class*/
(function () {
  function t() {}
  return (t.prototype.Os = function (t, e) {
    return ci(t).get(e).next(function (t) {
      if (t) return {
        id: (e = t).bundleId,
        createTime: ri(e.createTime),
        version: e.version
      };
      /** Encodes a DbBundle to a BundleMetadata object.*/
      var e;
    });
  }, t.prototype.ks = function (t, e) {
    return ci(t).put({
      bundleId: (n = e).id,
      createTime: ni(Mn(n.createTime)),
      version: n.version
    });
    var n;
  }, t.prototype.Ms = function (t, e) {
    return hi(t).get(e).next(function (t) {
      if (t) return {
        name: (e = t).name,
        query: si(e.bundledQuery),
        readTime: ri(e.readTime)
      };
      var e;
    });
  }, t.prototype.Ls = function (t, e) {
    return hi(t).put((function (t) {
      return {
        name: t.name,
        readTime: ni(Mn(t.readTime)),
        bundledQuery: t.bundledQuery
      };
    })(e));
  }, t);
})();
/**
* Helper to get a typed SimpleDbStore for the bundles object store.
*/
function ci(t) {
  return Kr(t, Br.store);
}
/**
* Helper to get a typed SimpleDbStore for the namedQueries object store.
*/
function hi(t) {
  return Kr(t, Qr.store);
}
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An in-memory implementation of IndexManager.
*/
var fi = /** @class*/
(function () {
  function t() {
    this.Bs = new li();
  }
  return (t.prototype.qs = function (t, e) {
    return (this.Bs.add(e), lr.resolve());
  }, t.prototype.Us = function (t, e) {
    return lr.resolve(this.Bs.getEntries(e));
  }, t);
})(), li = /** @class*/
(function () {
  function t() {
    this.index = {};
  }
  // Returns false if the entry already existed.
  return (t.prototype.add = function (t) {
    var e = t.tt(), n = t.X(), r = this.index[e] || new sn(Z.H), i = !r.has(n);
    return (this.index[e] = r.add(n), i);
  }, t.prototype.has = function (t) {
    var e = t.tt(), n = t.X(), r = this.index[e];
    return r && r.has(n);
  }, t.prototype.getEntries = function (t) {
    return (this.index[t] || new sn(Z.H)).it();
  }, t);
})(), pi = /** @class*/
(function () {
  function t() {
    /**
    * An in-memory copy of the index entries we've already written since the SDK
    * launched. Used to avoid re-writing the same entry repeatedly.
    *
    * This is *NOT* a complete cache of what's in persistence and so can never be used to
    * satisfy reads.
    */
    this.Qs = new li();
  }
  /**
  * Adds a new entry to the collection parent index.
  *
  * Repeated calls for the same collectionPath should be avoided within a
  * transaction as IndexedDbIndexManager only caches writes once a transaction
  * has been committed.
  */
  return (t.prototype.qs = function (t, e) {
    var n = this;
    if (!this.Qs.has(e)) {
      var r = e.tt(), i = e.X();
      t.gs(function () {
        // Add the collection to the in memory cache only if the transaction was
        // successfully committed.
        n.Qs.add(e);
      });
      var o = {
        collectionId: r,
        parent: Ar(i)
      };
      return di(t).put(o);
    }
    return lr.resolve();
  }, t.prototype.Us = function (t, e) {
    var n = [], r = IDBKeyRange.bound([e, ""], [R(e), ""], /*lowerOpen=*/
    !1, /*upperOpen=*/
    !0);
    return di(t).rs(r).next(function (t) {
      for (var r = 0, i = t; r < i.length; r++) {
        var o = i[r];
        // This collectionId guard shouldn't be necessary (and isn't as long
        // as we're running in a real browser), but there's a bug in
        // indexeddbshim that breaks our range in our tests running in node:
        // https://github.com/axemclion/IndexedDBShim/issues/334
        if (o.collectionId !== e) break;
        n.push(xr(o.parent));
      }
      return n;
    });
  }, t);
})();
/**
* Internal implementation of the collection-parent index exposed by MemoryIndexManager.
* Also used for in-memory caching by IndexedDbIndexManager and initial index population
* in indexeddb_schema.ts
*/
/**
* Helper to get a typed SimpleDbStore for the collectionParents
* document store.
*/
function di(t) {
  return Kr(t, zr.store);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var vi = {
  Ks: !1,
  Ws: 0,
  js: 0,
  Gs: 0
}, yi = /** @class*/
(function () {
  function t(// When we attempt to collect, we will only do so if the cache size is greater than this
  // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
  t, // The percentage of sequence numbers that we will attempt to collect
  e, // A cap on the total number of sequence numbers that will be collected. This prevents
  // us from collecting a huge number of sequence numbers if the cache has grown very large.
  n) {
    (this.zs = t, this.Hs = e, this.Js = n);
  }
  return (t.Ys = function (e) {
    return new t(e, t.Xs, t.Zs);
  }, t);
})();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Verifies the error thrown by a LocalStore operation. If a LocalStore
* operation fails because the primary lease has been taken by another client,
* we ignore the error (the persistence layer will immediately call
* `applyPrimaryLease` to propagate the primary state change). All other errors
* are re-thrown.
*
* @param err - An error returned by a LocalStore operation.
* @returns A Promise that resolves after we recovered, or the original error.
*/
function mi(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    return _tslib.__generator(this, function (e) {
      if (t.code !== M.FAILED_PRECONDITION || t.message !== Tr) throw t;
      return (N("LocalStore", "Unexpectedly lost primary lease"), [2]);
    });
  });
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A map implementation that uses objects as keys. Objects must have an
* associated equals function and must be immutable. Entries in the map are
* stored together with the key being produced from the mapKeyFn. This map
* automatically handles collisions of keys.
*/
(yi.Xs = 10, yi.Zs = 1e3, yi.ti = new yi(41943040, yi.Xs, yi.Zs), yi.ei = new yi(-1, 0, 0));
var gi = /** @class*/
(function () {
  function t(t, e) {
    (this.ni = t, this.si = e, /**
    * The inner map for a key/value pair. Due to the possibility of collisions we
    * keep a list of entries that we do a linear search through to find an actual
    * match. Note that collisions should be rare, so we still expect near
    * constant time lookups in practice.
    */
    this.ii = {});
  }
  return (t.prototype.get = function (t) {
    var e = this.ni(t), n = this.ii[e];
    if (void 0 !== n) for (var r = 0, i = n; r < i.length; r++) {
      var o = i[r], u = o[0], s = o[1];
      if (this.si(u, t)) return s;
    }
  }, t.prototype.has = function (t) {
    return void 0 !== this.get(t);
  }, /** Put this key and value in the map.*/
  t.prototype.set = function (t, e) {
    var n = this.ni(t), r = this.ii[n];
    if (void 0 !== r) {
      for (var i = 0; i < r.length; i++) if (this.si(r[i][0], t)) return void (r[i] = [t, e]);
      r.push([t, e]);
    } else this.ii[n] = [[t, e]];
  }, /**
  * Remove this key from the map. Returns a boolean if anything was deleted.
  */
  t.prototype.delete = function (t) {
    var e = this.ni(t), n = this.ii[e];
    if (void 0 === n) return !1;
    for (var r = 0; r < n.length; r++) if (this.si(n[r][0], t)) return (1 === n.length ? delete this.ii[e] : n.splice(r, 1), !0);
    return !1;
  }, t.prototype.forEach = function (t) {
    nt(this.ii, function (e, n) {
      for (var r = 0, i = n; r < i.length; r++) {
        var o = i[r], u = o[0], s = o[1];
        t(u, s);
      }
    });
  }, t.prototype.et = function () {
    return rt(this.ii);
  }, t);
})(), wi = /** @class*/
(function () {
  function t() {
    // A mapping of document key to the new cache entry that should be written (or null if any
    // existing cache entry should be removed).
    (this.ri = new gi(function (t) {
      return t.toString();
    }, function (t, e) {
      return t.isEqual(e);
    }), this.oi = !1);
  }
  return (t.prototype.ci = function (t) {
    var e = this.ri.get(t);
    return e ? e.readTime : X.min();
  }, /**
  * Buffers a `RemoteDocumentCache.addEntry()` call.
  *
  * You can only modify documents that have already been retrieved via
  * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
  */
  t.prototype.ai = function (t, e) {
    (this.ui(), this.ri.set(t.key, {
      hi: t,
      readTime: e
    }));
  }, /**
  * Buffers a `RemoteDocumentCache.removeEntry()` call.
  *
  * You can only remove documents that have already been retrieved via
  * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
  */
  t.prototype.li = function (t, e) {
    (void 0 === e && (e = null), this.ui(), this.ri.set(t, {
      hi: null,
      readTime: e
    }));
  }, /**
  * Looks up an entry in the cache. The buffered changes will first be checked,
  * and if no buffered change applies, this will forward to
  * `RemoteDocumentCache.getEntry()`.
  *
  * @param transaction - The transaction in which to perform any persistence
  *     operations.
  * @param documentKey - The key of the entry to look up.
  * @returns The cached Document or NoDocument entry, or null if we have
  *     nothing cached.
  */
  t.prototype._i = function (t, e) {
    this.ui();
    var n = this.ri.get(e);
    return void 0 !== n ? lr.resolve(n.hi) : this.fi(t, e);
  }, /**
  * Looks up several entries in the cache, forwarding to
  * `RemoteDocumentCache.getEntry()`.
  *
  * @param transaction - The transaction in which to perform any persistence
  *     operations.
  * @param documentKeys - The keys of the entries to look up.
  * @returns A map of cached `Document`s or `NoDocument`s, indexed by key. If
  *     an entry cannot be found, the corresponding key will be mapped to a
  *     null value.
  */
  t.prototype.getEntries = function (t, e) {
    return this.di(t, e);
  }, /**
  * Applies buffered changes to the underlying RemoteDocumentCache, using
  * the provided transaction.
  */
  t.prototype.apply = function (t) {
    return (this.ui(), this.oi = !0, this.wi(t));
  }, /** Helper to assert this.changes is not null*/
  t.prototype.ui = function () {}, t);
})();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An in-memory buffer of entries to be written to a RemoteDocumentCache.
* It can be used to batch up a set of changes to be written to the cache, but
* additionally supports reading entries back with the `getEntry()` method,
* falling back to the underlying RemoteDocumentCache if no entry is
* buffered.
*
* Entries added to the cache *must* be read first. This is to facilitate
* calculating the size delta of the pending changes.
*
* PORTING NOTE: This class was implemented then removed from other platforms.
* If byte-counting ends up being needed on the other platforms, consider
* porting this class as part of that implementation work.
*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Delete a mutation batch and the associated document mutations.
* @returns A PersistencePromise of the document mutations that were removed.
*/
function bi(t, e, n) {
  var r = t.store(Vr.store), i = t.store(Cr.store), o = [], u = IDBKeyRange.only(n.batchId), s = 0, a = r.hs({
    range: u
  }, function (t, e, n) {
    return (s++, n.delete());
  });
  o.push(a.next(function () {
    k(1 === s);
  }));
  for (var c = [], h = 0, f = n.mutations; h < f.length; h++) {
    var l = f[h], p = Cr.key(e, l.key.path, n.batchId);
    (o.push(i.delete(p)), c.push(l.key));
  }
  return lr.Mn(o).next(function () {
    return c;
  });
}
/**
* Returns an approximate size for the given document.
*/
function _i(t) {
  var e;
  if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
    if (!t.noDocument) throw x();
    e = t.noDocument;
  }
  return JSON.stringify(e).length;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** A mutation queue for a specific user, backed by IndexedDB.*/
var Ii = /** @class*/
(function () {
  function t(/**
  * The normalized userId (e.g. null UID => "" userId) used to store /
  * retrieve mutations.
  */
  t, e, n, r) {
    (this.userId = t, this.Qt = e, this.Ei = n, this.Ti = r, /**
    * Caches the document keys for pending mutation batches. If the mutation
    * has been removed from IndexedDb, the cached value may continue to
    * be used to retrieve the batch's document keys. To remove a cached value
    * locally, `removeCachedMutationKeys()` should be invoked either directly
    * or through `removeMutationBatches()`.
    *
    * With multi-tab, when the primary client acknowledges or rejects a mutation,
    * this cache is used by secondary clients to invalidate the local
    * view of the documents that were previously affected by the mutation.
    */
    // PORTING NOTE: Multi-tab only.
    this.Ii = {});
  }
  return (t.mi = function (e, n, r, i) {
    // TODO(mcg): Figure out what constraints there are on userIDs
    // In particular, are there any reserved characters? are empty ids allowed?
    // For the moment store these together in the same mutations table assuming
    // that empty userIDs aren't allowed.
    return (k("" !== e.uid), new t(e.m() ? e.uid : "", n, r, i));
  }, t.prototype.Ai = function (t) {
    var e = !0, n = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
    return Ti(t).hs({
      index: Vr.userMutationsIndex,
      range: n
    }, function (t, n, r) {
      (e = !1, r.done());
    }).next(function () {
      return e;
    });
  }, t.prototype.Ri = function (t, e, n, r) {
    var i = this, o = Ni(t), u = Ti(t);
    // The IndexedDb implementation in Chrome (and Firefox) does not handle
    // compound indices that include auto-generated keys correctly. To ensure
    // that the index entry is added correctly in all browsers, we perform two
    // writes: The first write is used to retrieve the next auto-generated Batch
    // ID, and the second write populates the index and stores the actual
    // mutation batch.
    // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
    // We write an empty object to obtain key
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return u.add({}).next(function (s) {
      k("number" == typeof s);
      for (var a = new Xr(s, e, n, r), c = (function (t, e, n) {
        var r = n.baseMutations.map(function (e) {
          return Xn(t.Fs, e);
        }), i = n.mutations.map(function (e) {
          return Xn(t.Fs, e);
        });
        return new Vr(e, n.batchId, n.vs.toMillis(), r, i);
      })(i.Qt, i.userId, a), h = [], f = new sn(function (t, e) {
        return C(t.rt(), e.rt());
      }), l = 0, p = r; l < p.length; l++) {
        var d = p[l], v = Cr.key(i.userId, d.key.path, s);
        (f = f.add(d.key.path.X()), h.push(u.put(c)), h.push(o.put(v, Cr.PLACEHOLDER)));
      }
      return (f.forEach(function (e) {
        h.push(i.Ei.qs(t, e));
      }), t.gs(function () {
        i.Ii[s] = a.keys();
      }), lr.Mn(h).next(function () {
        return a;
      }));
    });
  }, t.prototype.Pi = function (t, e) {
    var n = this;
    return Ti(t).get(e).next(function (t) {
      return t ? (k(t.userId === n.userId), ii(n.Qt, t)) : null;
    });
  }, /**
  * Returns the document keys for the mutation batch with the given batchId.
  * For primary clients, this method returns `null` after
  * `removeMutationBatches()` has been called. Secondary clients return a
  * cached result until `removeCachedMutationKeys()` is invoked.
  */
  // PORTING NOTE: Multi-tab only.
  t.prototype.yi = function (t, e) {
    var n = this;
    return this.Ii[e] ? lr.resolve(this.Ii[e]) : this.Pi(t, e).next(function (t) {
      if (t) {
        var r = t.keys();
        return (n.Ii[e] = r, r);
      }
      return null;
    });
  }, t.prototype.gi = function (t, e) {
    var n = this, r = e + 1, i = IDBKeyRange.lowerBound([this.userId, r]), o = null;
    return Ti(t).hs({
      index: Vr.userMutationsIndex,
      range: i
    }, function (t, e, i) {
      (e.userId === n.userId && (k(e.batchId >= r), o = ii(n.Qt, e)), i.done());
    }).next(function () {
      return o;
    });
  }, t.prototype.Vi = function (t) {
    var e = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]), n = -1;
    return Ti(t).hs({
      index: Vr.userMutationsIndex,
      range: e,
      reverse: !0
    }, function (t, e, r) {
      (n = e.batchId, r.done());
    }).next(function () {
      return n;
    });
  }, t.prototype.pi = function (t) {
    var e = this, n = IDBKeyRange.bound([this.userId, -1], [this.userId, Number.POSITIVE_INFINITY]);
    return Ti(t).rs(Vr.userMutationsIndex, n).next(function (t) {
      return t.map(function (t) {
        return ii(e.Qt, t);
      });
    });
  }, t.prototype.bi = function (t, e) {
    var n = this, r = Cr.prefixForPath(this.userId, e.path), i = IDBKeyRange.lowerBound(r), o = [];
    // Scan the document-mutation index starting with a prefix starting with
    // the given documentKey.
    return Ni(t).hs({
      range: i
    }, function (r, i, u) {
      var s = r[0], a = r[1], c = r[2], h = xr(a);
      // Only consider rows matching exactly the specific key of
      // interest. Note that because we order by path first, and we
      // order terminators before path separators, we'll encounter all
      // the index rows for documentKey contiguously. In particular, all
      // the rows for documentKey will occur before any rows for
      // documents nested in a subcollection beneath documentKey so we
      // can stop as soon as we hit any such row.
      if (s === n.userId && e.path.isEqual(h)) // Look up the mutation batch in the store.
      return Ti(t).get(c).next(function (t) {
        if (!t) throw x();
        (k(t.userId === n.userId), o.push(ii(n.Qt, t)));
      });
      u.done();
    }).next(function () {
      return o;
    });
  }, t.prototype.vi = function (t, e) {
    var n = this, r = new sn(C), i = [];
    return (e.forEach(function (e) {
      var o = Cr.prefixForPath(n.userId, e.path), u = IDBKeyRange.lowerBound(o), s = Ni(t).hs({
        range: u
      }, function (t, i, o) {
        var u = t[0], s = t[1], a = t[2], c = xr(s);
        // Only consider rows matching exactly the specific key of
        // interest. Note that because we order by path first, and we
        // order terminators before path separators, we'll encounter all
        // the index rows for documentKey contiguously. In particular, all
        // the rows for documentKey will occur before any rows for
        // documents nested in a subcollection beneath documentKey so we
        // can stop as soon as we hit any such row.
        u === n.userId && e.path.isEqual(c) ? r = r.add(a) : o.done();
      });
      i.push(s);
    }), lr.Mn(i).next(function () {
      return n.Si(t, r);
    }));
  }, t.prototype.Di = function (t, e) {
    var n = this, r = e.path, i = r.length + 1, o = Cr.prefixForPath(this.userId, r), u = IDBKeyRange.lowerBound(o), s = new sn(C);
    return Ni(t).hs({
      range: u
    }, function (t, e, o) {
      var u = t[0], a = t[1], c = t[2], h = xr(a);
      u === n.userId && r.nt(h) ? // Rows with document keys more than one segment longer than the
      // query path can't be matches. For example, a query on 'rooms'
      // can't match the document /rooms/abc/messages/xyx.
      // TODO(mcg): we'll need a different scanner when we implement
      // ancestor queries.
      h.length === i && (s = s.add(c)) : o.done();
    }).next(function () {
      return n.Si(t, s);
    });
  }, t.prototype.Si = function (t, e) {
    var n = this, r = [], i = [];
    // TODO(rockwood): Implement this using iterate.
    return (e.forEach(function (e) {
      i.push(Ti(t).get(e).next(function (t) {
        if (null === t) throw x();
        (k(t.userId === n.userId), r.push(ii(n.Qt, t)));
      }));
    }), lr.Mn(i).next(function () {
      return r;
    }));
  }, t.prototype.Ci = function (t, e) {
    var n = this;
    return bi(t.ps, this.userId, e).next(function (r) {
      return (t.gs(function () {
        n.xi(e.batchId);
      }), lr.forEach(r, function (e) {
        return n.Ti.Ni(t, e);
      }));
    });
  }, /**
  * Clears the cached keys for a mutation batch. This method should be
  * called by secondary clients after they process mutation updates.
  *
  * Note that this method does not have to be called from primary clients as
  * the corresponding cache entries are cleared when an acknowledged or
  * rejected batch is removed from the mutation queue.
  */
  // PORTING NOTE: Multi-tab only
  t.prototype.xi = function (t) {
    delete this.Ii[t];
  }, t.prototype.$i = function (t) {
    var e = this;
    return this.Ai(t).next(function (n) {
      if (!n) return lr.resolve();
      // Verify that there are no entries in the documentMutations index if
      // the queue is empty.
      var r = IDBKeyRange.lowerBound(Cr.prefixForUser(e.userId)), i = [];
      return Ni(t).hs({
        range: r
      }, function (t, n, r) {
        if (t[0] === e.userId) {
          var o = xr(t[1]);
          i.push(o);
        } else r.done();
      }).next(function () {
        k(0 === i.length);
      });
    });
  }, t.prototype.Fi = function (t, e) {
    return Ei(t, this.userId, e);
  }, // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
  /** Returns the mutation queue's metadata from IndexedDb.*/
  t.prototype.Oi = function (t) {
    var e = this;
    return Ai(t).get(this.userId).next(function (t) {
      return t || new Pr(e.userId, -1, /*lastStreamToken=*/
      "");
    });
  }, t);
})();
/**
* @returns true if the mutation queue for the given user contains a pending
*         mutation for the given key.
*/
function Ei(t, e, n) {
  var r = Cr.prefixForPath(e, n.path), i = r[1], o = IDBKeyRange.lowerBound(r), u = !1;
  return Ni(t).hs({
    range: o,
    us: !0
  }, function (t, n, r) {
    var o = t[0], s = t[1];
    t[2];
    (o === e && s === i && (u = !0), r.done());
  }).next(function () {
    return u;
  });
}
/** Returns true if any mutation queue contains the given document.*/
/**
* Helper to get a typed SimpleDbStore for the mutations object store.
*/
function Ti(t) {
  return Kr(t, Vr.store);
}
/**
* Helper to get a typed SimpleDbStore for the mutationQueues object store.
*/
function Ni(t) {
  return Kr(t, Cr.store);
}
/**
* Helper to get a typed SimpleDbStore for the mutationQueues object store.
*/
function Ai(t) {
  return Kr(t, Pr.store);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Offset to ensure non-overlapping target ids.*/
/**
* Generates monotonically increasing target IDs for sending targets to the
* watch stream.
*
* The client constructs two generators, one for the target cache, and one for
* for the sync engine (to generate limbo documents targets). These
* generators produce non-overlapping IDs (by using even and odd IDs
* respectively).
*
* By separating the target ID space, the query cache can generate target IDs
* that persist across client restarts, while sync engine can independently
* generate in-memory target IDs that are transient and can be reused after a
* restart.
*/
var Di = /** @class*/
(function () {
  function t(t) {
    this.ki = t;
  }
  return (t.prototype.next = function () {
    return (this.ki += 2, this.ki);
  }, t.Mi = function () {
    // The target cache generator must return '2' in its first call to `next()`
    // as there is no differentiation in the protocol layer between an unset
    // number and the number '0'. If we were to sent a target with target ID
    // '0', the backend would consider it unset and replace it with its own ID.
    return new t(0);
  }, t.Li = function () {
    // Sync engine assigns target IDs for limbo document detection.
    return new t(-1);
  }, t);
})(), Si = /** @class*/
(function () {
  function t(t, e) {
    (this.Ti = t, this.Qt = e);
  }
  // PORTING NOTE: We don't cache global metadata for the target cache, since
  // some of it (in particular `highestTargetId`) can be modified by secondary
  // tabs. We could perhaps be more granular (and e.g. still cache
  // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
  // to IndexedDb whenever we need to read metadata. We can revisit if it turns
  // out to have a meaningful performance impact.
  return (t.prototype.Bi = function (t) {
    var e = this;
    return this.qi(t).next(function (n) {
      var r = new Di(n.highestTargetId);
      return (n.highestTargetId = r.next(), e.Ui(t, n).next(function () {
        return n.highestTargetId;
      }));
    });
  }, t.prototype.Qi = function (t) {
    return this.qi(t).next(function (t) {
      return X.K(new K(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
    });
  }, t.prototype.Ki = function (t) {
    return this.qi(t).next(function (t) {
      return t.highestListenSequenceNumber;
    });
  }, t.prototype.Wi = function (t, e, n) {
    var r = this;
    return this.qi(t).next(function (i) {
      return (i.highestListenSequenceNumber = e, n && (i.lastRemoteSnapshotVersion = n.j()), e > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e), r.Ui(t, i));
    });
  }, t.prototype.ji = function (t, e) {
    var n = this;
    return this.Gi(t, e).next(function () {
      return n.qi(t).next(function (r) {
        return (r.targetCount += 1, n.zi(e, r), n.Ui(t, r));
      });
    });
  }, t.prototype.Hi = function (t, e) {
    return this.Gi(t, e);
  }, t.prototype.Ji = function (t, e) {
    var n = this;
    return this.Yi(t, e.targetId).next(function () {
      return xi(t).delete(e.targetId);
    }).next(function () {
      return n.qi(t);
    }).next(function (e) {
      return (k(e.targetCount > 0), e.targetCount -= 1, n.Ui(t, e));
    });
  }, /**
  * Drops any targets with sequence number less than or equal to the upper bound, excepting those
  * present in `activeTargetIds`. Document associations for the removed targets are also removed.
  * Returns the number of targets removed.
  */
  t.prototype.Xi = function (t, e, n) {
    var r = this, i = 0, o = [];
    return xi(t).hs(function (u, s) {
      var a = oi(s);
      a.sequenceNumber <= e && null === n.get(a.targetId) && (i++, o.push(r.Ji(t, a)));
    }).next(function () {
      return lr.Mn(o);
    }).next(function () {
      return i;
    });
  }, /**
  * Call provided function with each `TargetData` that we have cached.
  */
  t.prototype.In = function (t, e) {
    return xi(t).hs(function (t, n) {
      var r = oi(n);
      e(r);
    });
  }, t.prototype.qi = function (t) {
    return ki(t).get(jr.key).next(function (t) {
      return (k(null !== t), t);
    });
  }, t.prototype.Ui = function (t, e) {
    return ki(t).put(jr.key, e);
  }, t.prototype.Gi = function (t, e) {
    return xi(t).put(ui(this.Qt, e));
  }, /**
  * In-place updates the provided metadata to account for values in the given
  * TargetData. Saving is done separately. Returns true if there were any
  * changes to the metadata.
  */
  t.prototype.zi = function (t, e) {
    var n = !1;
    return (t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, n = !0), n);
  }, t.prototype.Zi = function (t) {
    return this.qi(t).next(function (t) {
      return t.targetCount;
    });
  }, t.prototype.tr = function (t, e) {
    // Iterating by the canonicalId may yield more than one result because
    // canonicalId values are not required to be unique per target. This query
    // depends on the queryTargets index to be efficient.
    var n = Ut(e), r = IDBKeyRange.bound([n, Number.NEGATIVE_INFINITY], [n, Number.POSITIVE_INFINITY]), i = null;
    return xi(t).hs({
      range: r,
      index: qr.queryTargetsIndexName
    }, function (t, n, r) {
      var o = oi(n);
      // After finding a potential match, check that the target is
      // actually equal to the requested target.
      Mt(e, o.target) && (i = o, r.done());
    }).next(function () {
      return i;
    });
  }, t.prototype.er = function (t, e, n) {
    var r = this, i = [], o = Oi(t);
    // PORTING NOTE: The reverse index (documentsTargets) is maintained by
    // IndexedDb.
    return (e.forEach(function (e) {
      var u = Ar(e.path);
      (i.push(o.put(new Fr(n, u))), i.push(r.Ti.nr(t, n, e)));
    }), lr.Mn(i));
  }, t.prototype.sr = function (t, e, n) {
    var r = this, i = Oi(t);
    // PORTING NOTE: The reverse index (documentsTargets) is maintained by
    // IndexedDb.
    return lr.forEach(e, function (e) {
      var o = Ar(e.path);
      return lr.Mn([i.delete([n, o]), r.Ti.ir(t, n, e)]);
    });
  }, t.prototype.Yi = function (t, e) {
    var n = Oi(t), r = IDBKeyRange.bound([e], [e + 1], /*lowerOpen=*/
    !1, /*upperOpen=*/
    !0);
    return n.delete(r);
  }, t.prototype.rr = function (t, e) {
    var n = IDBKeyRange.bound([e], [e + 1], /*lowerOpen=*/
    !1, /*upperOpen=*/
    !0), r = Oi(t), i = mn();
    return r.hs({
      range: n,
      us: !0
    }, function (t, e, n) {
      var r = xr(t[1]), o = new tt(r);
      i = i.add(o);
    }).next(function () {
      return i;
    });
  }, t.prototype.Fi = function (t, e) {
    var n = Ar(e.path), r = IDBKeyRange.bound([n], [R(n)], /*lowerOpen=*/
    !1, /*upperOpen=*/
    !0), i = 0;
    return Oi(t).hs({
      index: Fr.documentTargetsIndex,
      us: !0,
      range: r
    }, function (t, e, n) {
      var r = t[0];
      // Having a sentinel row for a document does not count as containing that document;
      // For the target cache, containing the document means the document is part of some
      // target.
      t[1];
      0 !== r && (i++, n.done());
    }).next(function () {
      return i > 0;
    });
  }, /**
  * Looks up a TargetData entry by target ID.
  *
  * @param targetId - The target ID of the TargetData entry to look up.
  * @returns The cached TargetData entry, or null if the cache has no entry for
  * the target.
  */
  // PORTING NOTE: Multi-tab only.
  t.prototype.Sn = function (t, e) {
    return xi(t).get(e).next(function (t) {
      return t ? oi(t) : null;
    });
  }, t);
})();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Helper to get a typed SimpleDbStore for the queries object store.
*/
function xi(t) {
  return Kr(t, qr.store);
}
/**
* Helper to get a typed SimpleDbStore for the target globals object store.
*/
function ki(t) {
  return Kr(t, jr.store);
}
/**
* Helper to get a typed SimpleDbStore for the document target object store.
*/
function Oi(t) {
  return Kr(t, Fr.store);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function Pi(t, e) {
  var n = t[0], r = t[1], i = e[0], o = e[1], u = C(n, i);
  return 0 === u ? C(r, o) : u;
}
/**
* Used to calculate the nth sequence number. Keeps a rolling buffer of the
* lowest n values passed to `addElement`, and finally reports the largest of
* them in `maxValue`.
*/
var Vi = /** @class*/
(function () {
  function t(t) {
    (this.cr = t, this.buffer = new sn(Pi), this.ar = 0);
  }
  return (t.prototype.ur = function () {
    return ++this.ar;
  }, t.prototype.hr = function (t) {
    var e = [t, this.ur()];
    if (this.buffer.size < this.cr) this.buffer = this.buffer.add(e); else {
      var n = this.buffer.last();
      Pi(e, n) < 0 && (this.buffer = this.buffer.delete(n).add(e));
    }
  }, Object.defineProperty(t.prototype, "maxValue", {
    get: function () {
      // Guaranteed to be non-empty. If we decide we are not collecting any
      // sequence numbers, nthSequenceNumber below short-circuits. If we have
      // decided that we are collecting n sequence numbers, it's because n is some
      // percentage of the existing sequence numbers. That means we should never
      // be in a situation where we are collecting sequence numbers but don't
      // actually have any.
      return this.buffer.last()[0];
    },
    enumerable: !1,
    configurable: !0
  }), t);
})(), Ci = /** @class*/
(function () {
  function t(t, e) {
    (this.lr = t, this._s = e, this._r = !1, this.dr = null);
  }
  return (t.prototype.start = function (t) {
    -1 !== this.lr.params.zs && this.wr(t);
  }, t.prototype.stop = function () {
    this.dr && (this.dr.cancel(), this.dr = null);
  }, Object.defineProperty(t.prototype, "Er", {
    get: function () {
      return null !== this.dr;
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.wr = function (t) {
    var e = this, n = this._r ? 3e5 : 6e4;
    (N("LruGarbageCollector", "Garbage collection scheduled in " + n + "ms"), this.dr = this._s.Tr("lru_garbage_collection", /*LruGarbageCollection*/
    n, function () {
      return _tslib.__awaiter(e, void 0, void 0, function () {
        var e;
        return _tslib.__generator(this, function (n) {
          switch (n.label) {
            case 0:
              (this.dr = null, this._r = !0, n.label = 1);
            case 1:
              return (n.trys.push([1, 3, , 7]), [4, /*yield*/
              t.Ir(this.lr)]);
            case 2:
              return (n.sent(), [3, /*break*/
              7]);
            case 3:
              return mr(e = n.sent()) ? (N("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e), [3, /*break*/
              6]) : [3, /*break*/
              4];
            case 4:
              return [4, /*yield*/
              mi(e)];
            case 5:
              (n.sent(), n.label = 6);
            case 6:
              return [3, /*break*/
              7];
            case 7:
              return [4, /*yield*/
              this.wr(t)];
            case 8:
              return (n.sent(), [2]);
          }
        });
      });
    }));
  }, t);
})(), Li = /** @class*/
(function () {
  function t(t, e) {
    (this.mr = t, this.params = e);
  }
  return (t.prototype.Ar = function (t, e) {
    return this.mr.Rr(t).next(function (t) {
      return Math.floor(e / 100 * t);
    });
  }, t.prototype.Pr = function (t, e) {
    var n = this;
    if (0 === e) return lr.resolve(H.q);
    var r = new Vi(e);
    return this.mr.In(t, function (t) {
      return r.hr(t.sequenceNumber);
    }).next(function () {
      return n.mr.yr(t, function (t) {
        return r.hr(t);
      });
    }).next(function () {
      return r.maxValue;
    });
  }, t.prototype.Xi = function (t, e, n) {
    return this.mr.Xi(t, e, n);
  }, t.prototype.gr = function (t, e) {
    return this.mr.gr(t, e);
  }, t.prototype.Vr = function (t, e) {
    var n = this;
    return -1 === this.params.zs ? (N("LruGarbageCollector", "Garbage collection skipped; disabled"), lr.resolve(vi)) : this.pr(t).next(function (r) {
      return r < n.params.zs ? (N("LruGarbageCollector", "Garbage collection skipped; Cache size " + r + " is lower than threshold " + n.params.zs), vi) : n.br(t, e);
    });
  }, t.prototype.pr = function (t) {
    return this.mr.pr(t);
  }, t.prototype.br = function (t, n) {
    var r, i, o, u, s, a, c, h = this, f = Date.now();
    return this.Ar(t, this.params.Hs).next(function (e) {
      // Cap at the configured max
      return (e > h.params.Js ? (N("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + h.params.Js + " from " + e), i = h.params.Js) : i = e, u = Date.now(), h.Pr(t, i));
    }).next(function (e) {
      return (r = e, s = Date.now(), h.Xi(t, r, n));
    }).next(function (e) {
      return (o = e, a = Date.now(), h.gr(t, r));
    }).next(function (t) {
      return (c = Date.now(), T() <= _firebaseLogger.LogLevel.DEBUG && N("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (u - f) + "ms\n\tDetermined least recently used " + i + " in " + (s - u) + "ms\n\tRemoved " + o + " targets in " + (a - s) + "ms\n\tRemoved " + t + " documents in " + (c - a) + "ms\nTotal Duration: " + (c - f) + "ms"), lr.resolve({
        Ks: !0,
        Ws: i,
        js: o,
        Gs: t
      }));
    });
  }, t);
})(), Ri = /** @class*/
(function () {
  function t(t, e) {
    (this.db = t, this.lr = (function (t, e) {
      return new Li(t, e);
    })(this, e));
  }
  return (t.prototype.Rr = function (t) {
    var e = this.vr(t);
    return this.db.Sr().Zi(t).next(function (t) {
      return e.next(function (e) {
        return t + e;
      });
    });
  }, t.prototype.vr = function (t) {
    var e = 0;
    return this.yr(t, function (t) {
      e++;
    }).next(function () {
      return e;
    });
  }, t.prototype.In = function (t, e) {
    return this.db.Sr().In(t, e);
  }, t.prototype.yr = function (t, e) {
    return this.Dr(t, function (t, n) {
      return e(n);
    });
  }, t.prototype.nr = function (t, e, n) {
    return Ui(t, n);
  }, t.prototype.ir = function (t, e, n) {
    return Ui(t, n);
  }, t.prototype.Xi = function (t, e, n) {
    return this.db.Sr().Xi(t, e, n);
  }, t.prototype.Ni = function (t, e) {
    return Ui(t, e);
  }, /**
  * Returns true if anything would prevent this document from being garbage
  * collected, given that the document in question is not present in any
  * targets and has a sequence number less than or equal to the upper bound for
  * the collection run.
  */
  t.prototype.Cr = function (t, e) {
    return (function (t, e) {
      var n = !1;
      return Ai(t).ls(function (r) {
        return Ei(t, r, e).next(function (t) {
          return (t && (n = !0), lr.resolve(!t));
        });
      }).next(function () {
        return n;
      });
    })(t, e);
  }, t.prototype.gr = function (t, e) {
    var n = this, r = this.db.$r().Nr(), i = [], o = 0;
    return this.Dr(t, function (u, s) {
      if (s <= e) {
        var a = n.Cr(t, u).next(function (e) {
          if (!e) // Our size accounting requires us to read all documents before
          // removing them.
          return (o++, r._i(t, u).next(function () {
            return (r.li(u), Oi(t).delete([0, Ar(u.path)]));
          }));
        });
        i.push(a);
      }
    }).next(function () {
      return lr.Mn(i);
    }).next(function () {
      return r.apply(t);
    }).next(function () {
      return o;
    });
  }, t.prototype.removeTarget = function (t, e) {
    var n = e.kt(t.bs);
    return this.db.Sr().Hi(t, n);
  }, t.prototype.Fr = function (t, e) {
    return Ui(t, e);
  }, /**
  * Call provided function for each document in the cache that is 'orphaned'. Orphaned
  * means not a part of any target, so the only entry in the target-document index for
  * that document will be the sentinel row (targetId 0), which will also have the sequence
  * number for the last time the document was accessed.
  */
  t.prototype.Dr = function (t, e) {
    var n, r = Oi(t), i = H.q;
    return r.hs({
      index: Fr.documentTargetsIndex
    }, function (t, r) {
      var o = t[0], u = (t[1], r.path), s = r.sequenceNumber;
      0 === o ? // if nextToReport is valid, report it, this is a new key so the
      // last one must not be a member of any targets.
      (i !== H.q && e(new tt(xr(n)), i), // set nextToReport to be this sequence number. It's the next one we
      // might report, if we don't find any targets for this document.
      // Note that the sequence number must be defined when the targetId
      // is 0.
      i = s, n = u) : // set nextToReport to be invalid, we know we don't need to report
      // this one since we found a target for it.
      i = H.q;
    }).next(function () {
      // Since we report sequence numbers after getting to the next key, we
      // need to check if the last key we iterated over was an orphaned
      // document and report it.
      i !== H.q && e(new tt(xr(n)), i);
    });
  }, t.prototype.pr = function (t) {
    return this.db.$r().Or(t);
  }, t);
})();
/**
* This class is responsible for the scheduling of LRU garbage collection. It handles checking
* whether or not GC is enabled, as well as which delay to use before the next run.
*/
function Ui(t, e) {
  return Oi(t).put(/**
  * @returns A value suitable for writing a sentinel row in the target-document
  * store.
  */
  (function (t, e) {
    return new Fr(0, Ar(t.path), e);
  })(e, t.bs));
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* The RemoteDocumentCache for IndexedDb. To construct, invoke
* `newIndexedDbRemoteDocumentCache()`.
*/
var Mi = /** @class*/
(function () {
  /**
  * @param serializer - The document serializer.
  * @param indexManager - The query indexes that need to be maintained.
  */
  function t(t, e) {
    (this.Qt = t, this.Ei = e);
  }
  return (t.prototype.ai = function (t, e, n) {
    return ji(t).put(zi(e), n);
  }, /**
  * Removes a document from the cache.
  *
  * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
  * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
  */
  t.prototype.li = function (t, e) {
    var n = ji(t), r = zi(e);
    return n.delete(r);
  }, /**
  * Updates the current cache size.
  *
  * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
  * cache's metadata.
  */
  t.prototype.updateMetadata = function (t, e) {
    var n = this;
    return this.getMetadata(t).next(function (r) {
      return (r.byteSize += e, n.kr(t, r));
    });
  }, t.prototype._i = function (t, e) {
    var n = this;
    return ji(t).get(zi(e)).next(function (t) {
      return n.Mr(t);
    });
  }, /**
  * Looks up an entry in the cache.
  *
  * @param documentKey - The key of the entry to look up.
  * @returns The cached MaybeDocument entry and its size, or null if we have
  * nothing cached.
  */
  t.prototype.Lr = function (t, e) {
    var n = this;
    return ji(t).get(zi(e)).next(function (t) {
      var e = n.Mr(t);
      return e ? {
        hi: e,
        size: _i(t)
      } : null;
    });
  }, t.prototype.getEntries = function (t, e) {
    var n = this, r = fn();
    return this.Br(t, e, function (t, e) {
      var i = n.Mr(e);
      r = r.zt(t, i);
    }).next(function () {
      return r;
    });
  }, /**
  * Looks up several entries in the cache.
  *
  * @param documentKeys - The set of keys entries to look up.
  * @returns A map of MaybeDocuments indexed by key (if a document cannot be
  *     found, the key will be mapped to null) and a map of sizes indexed by
  *     key (zero if the key cannot be found).
  */
  t.prototype.qr = function (t, e) {
    var n = this, r = fn(), i = new rn(tt.H);
    return this.Br(t, e, function (t, e) {
      var o = n.Mr(e);
      o ? (r = r.zt(t, o), i = i.zt(t, _i(e))) : (r = r.zt(t, null), i = i.zt(t, 0));
    }).next(function () {
      return {
        Ur: r,
        Qr: i
      };
    });
  }, t.prototype.Br = function (t, e, n) {
    if (e.et()) return lr.resolve();
    var r = IDBKeyRange.bound(e.first().path.it(), e.last().path.it()), i = e.te(), o = i.oe();
    return ji(t).hs({
      range: r
    }, function (t, e, r) {
      // Go through keys not found in cache.
      for (var u = tt.Et(t); o && tt.H(o, u) < 0; ) (n(o, null), o = i.oe());
      (o && o.isEqual(u) && // Key found in cache.
      (n(o, e), o = i.ce() ? i.oe() : null), // Skip to the next key (if there is one).
      o ? r.ss(o.path.it()) : r.done());
    }).next(function () {
      // The rest of the keys are not in the cache. One case where `iterate`
      // above won't go through them is when the cache is empty.
      for (; o; ) (n(o, null), o = i.ce() ? i.oe() : null);
    });
  }, t.prototype.Kr = function (t, e, n) {
    var r = this, i = pn(), o = e.path.length + 1, u = {};
    if (n.isEqual(X.min())) {
      // Documents are ordered by key, so we can use a prefix scan to narrow
      // down the documents we need to match the query against.
      var s = e.path.it();
      u.range = IDBKeyRange.lowerBound(s);
    } else {
      // Execute an index-free query and filter by read time. This is safe
      // since all document changes to queries that have a
      // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
      var a = e.path.it(), c = ti(n);
      (u.range = IDBKeyRange.lowerBound([a, c], /*open=*/
      !0), u.index = Ur.collectionReadTimeIndex);
    }
    return ji(t).hs(u, function (t, n, u) {
      // The query is actually returning any path that starts with the query
      // path prefix which may include documents in subcollections. For
      // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
      // shouldn't match it. Fix this by discarding rows with document keys
      // more than one segment longer than the query path.
      if (t.length === o) {
        var s = Jr(r.Qt, n);
        e.path.nt(s.key.path) ? s instanceof Pt && ve(e, s) && (i = i.zt(s.key, s)) : u.done();
      }
    }).next(function () {
      return i;
    });
  }, t.prototype.Nr = function (t) {
    return new qi(this, !!t && t.Wr);
  }, t.prototype.Or = function (t) {
    return this.getMetadata(t).next(function (t) {
      return t.byteSize;
    });
  }, t.prototype.getMetadata = function (t) {
    return Fi(t).get(Mr.key).next(function (t) {
      return (k(!!t), t);
    });
  }, t.prototype.kr = function (t, e) {
    return Fi(t).put(Mr.key, e);
  }, /**
  * Decodes `remoteDoc` and returns the document (or null, if the document
  * corresponds to the format used for sentinel deletes).
  */
  t.prototype.Mr = function (t) {
    if (t) {
      var e = Jr(this.Qt, t);
      return e instanceof Vt && e.version.isEqual(X.min()) ? null : e;
    }
    return null;
  }, t);
})(), qi = /** @class*/
(function (t) {
  /**
  * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
  * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
  * `getNewDocumentChanges()`.
  */
  function e(e, n) {
    var r = this;
    return ((r = t.call(this) || this).jr = e, r.Wr = n, // A map of document sizes prior to applying the changes in this buffer.
    r.Gr = new gi(function (t) {
      return t.toString();
    }, function (t, e) {
      return t.isEqual(e);
    }), r);
  }
  return (_tslib.__extends(e, t), e.prototype.wi = function (t) {
    var e = this, n = [], r = 0, i = new sn(function (t, e) {
      return C(t.rt(), e.rt());
    });
    return (this.ri.forEach(function (o, u) {
      var s = e.Gr.get(o);
      if (u.hi) {
        var a = $r(e.jr.Qt, u.hi, e.ci(o));
        i = i.add(o.path.X());
        var c = _i(a);
        (r += c - s, n.push(e.jr.ai(t, o, a)));
      } else if ((r -= s, e.Wr)) {
        // In order to track removals, we store a "sentinel delete" in the
        // RemoteDocumentCache. This entry is represented by a NoDocument
        // with a version of 0 and ignored by `maybeDecodeDocument()` but
        // preserved in `getNewDocumentChanges()`.
        var h = $r(e.jr.Qt, new Vt(o, X.min()), e.ci(o));
        n.push(e.jr.ai(t, o, h));
      } else n.push(e.jr.li(t, o));
    }), i.forEach(function (r) {
      n.push(e.jr.Ei.qs(t, r));
    }), n.push(this.jr.updateMetadata(t, r)), lr.Mn(n));
  }, e.prototype.fi = function (t, e) {
    var n = this;
    // Record the size of everything we load from the cache so we can compute a delta later.
    return this.jr.Lr(t, e).next(function (t) {
      return null === t ? (n.Gr.set(e, 0), null) : (n.Gr.set(e, t.size), t.hi);
    });
  }, e.prototype.di = function (t, e) {
    var n = this;
    // Record the size of everything we load from the cache so we can compute
    // a delta later.
    return this.jr.qr(t, e).next(function (t) {
      var e = t.Ur;
      // Note: `getAllFromCache` returns two maps instead of a single map from
      // keys to `DocumentSizeEntry`s. This is to allow returning the
      // `NullableMaybeDocumentMap` directly, without a conversion.
      return (t.Qr.forEach(function (t, e) {
        n.Gr.set(t, e);
      }), e);
    });
  }, e);
})(wi);
/**
* Creates a new IndexedDbRemoteDocumentCache.
*
* @param serializer - The document serializer.
* @param indexManager - The query indexes that need to be maintained.
*/
/**
* Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
*
* Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
* delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
* when we apply the changes.
*/
function Fi(t) {
  return Kr(t, Mr.store);
}
/**
* Helper to get a typed SimpleDbStore for the remoteDocuments object store.
*/
function ji(t) {
  return Kr(t, Ur.store);
}
function zi(t) {
  return t.path.it();
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Performs database creation and schema upgrades.*/
var Gi = /** @class*/
(function () {
  function t(t) {
    this.Qt = t;
  }
  /**
  * Performs database creation and schema upgrades.
  *
  * Note that in production, this method is only ever used to upgrade the schema
  * to SCHEMA_VERSION. Different values of toVersion are only used for testing
  * and local feature development.
  */
  return (t.prototype.Jn = function (t, e, n, r) {
    var i = this;
    k(n < r && n >= 0 && r <= 11);
    var o = new pr("createOrUpgrade", e);
    n < 1 && r >= 1 && ((function (t) {
      t.createObjectStore(Or.store);
    })(t), (function (t) {
      (t.createObjectStore(Pr.store, {
        keyPath: Pr.keyPath
      }), t.createObjectStore(Vr.store, {
        keyPath: Vr.keyPath,
        autoIncrement: !0
      }).createIndex(Vr.userMutationsIndex, Vr.userMutationsKeyPath, {
        unique: !0
      }), t.createObjectStore(Cr.store));
    })(t), Bi(t), (function (t) {
      t.createObjectStore(Ur.store);
    })(t));
    // Migration 2 to populate the targetGlobal object no longer needed since
    // migration 3 unconditionally clears it.
    var u = lr.resolve();
    return (n < 3 && r >= 3 && // Brand new clients don't need to drop and recreate--only clients that
    // potentially have corrupt data.
    (0 !== n && ((function (t) {
      (t.deleteObjectStore(Fr.store), t.deleteObjectStore(qr.store), t.deleteObjectStore(jr.store));
    })(t), Bi(t)), u = u.next(function () {
      /**
      * Creates the target global singleton row.
      *
      * @param txn - The version upgrade transaction for indexeddb
      */
      return (function (t) {
        var e = t.store(jr.store), n = new jr(/*highestTargetId=*/
        0, /*lastListenSequenceNumber=*/
        0, X.min().j(), /*targetCount=*/
        0);
        return e.put(jr.key, n);
      })(o);
    })), n < 4 && r >= 4 && (0 !== n && (// Schema version 3 uses auto-generated keys to generate globally unique
    // mutation batch IDs (this was previously ensured internally by the
    // client). To migrate to the new schema, we have to read all mutations
    // and write them back out. We preserve the existing batch IDs to guarantee
    // consistency with other object stores. Any further mutation batch IDs will
    // be auto-generated.
    u = u.next(function () {
      return (function (t, e) {
        return e.store(Vr.store).rs().next(function (n) {
          (t.deleteObjectStore(Vr.store), t.createObjectStore(Vr.store, {
            keyPath: Vr.keyPath,
            autoIncrement: !0
          }).createIndex(Vr.userMutationsIndex, Vr.userMutationsKeyPath, {
            unique: !0
          }));
          var r = e.store(Vr.store), i = n.map(function (t) {
            return r.put(t);
          });
          return lr.Mn(i);
        });
      })(t, o);
    })), u = u.next(function () {
      !(function (t) {
        t.createObjectStore(Gr.store, {
          keyPath: Gr.keyPath
        });
      })(t);
    })), n < 5 && r >= 5 && (u = u.next(function () {
      return i.zr(o);
    })), n < 6 && r >= 6 && (u = u.next(function () {
      return ((function (t) {
        t.createObjectStore(Mr.store);
      })(t), i.Hr(o));
    })), n < 7 && r >= 7 && (u = u.next(function () {
      return i.Jr(o);
    })), n < 8 && r >= 8 && (u = u.next(function () {
      return i.Yr(t, o);
    })), n < 9 && r >= 9 && (u = u.next(function () {
      // Multi-Tab used to manage its own changelog, but this has been moved
      // to the DbRemoteDocument object store itself. Since the previous change
      // log only contained transient data, we can drop its object store.
      (!(function (t) {
        t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
      })(t), (function (t) {
        var e = t.objectStore(Ur.store);
        (e.createIndex(Ur.readTimeIndex, Ur.readTimeIndexPath, {
          unique: !1
        }), e.createIndex(Ur.collectionReadTimeIndex, Ur.collectionReadTimeIndexPath, {
          unique: !1
        }));
      })(e));
    })), n < 10 && r >= 10 && (u = u.next(function () {
      return i.Xr(o);
    })), n < 11 && r >= 11 && (u = u.next(function () {
      (!(function (t) {
        t.createObjectStore(Br.store, {
          keyPath: Br.keyPath
        });
      })(t), (function (t) {
        t.createObjectStore(Qr.store, {
          keyPath: Qr.keyPath
        });
      })(t));
    })), u);
  }, t.prototype.Hr = function (t) {
    var e = 0;
    return t.store(Ur.store).hs(function (t, n) {
      e += _i(n);
    }).next(function () {
      var n = new Mr(e);
      return t.store(Mr.store).put(Mr.key, n);
    });
  }, t.prototype.zr = function (t) {
    var e = this, n = t.store(Pr.store), r = t.store(Vr.store);
    return n.rs().next(function (n) {
      return lr.forEach(n, function (n) {
        var i = IDBKeyRange.bound([n.userId, -1], [n.userId, n.lastAcknowledgedBatchId]);
        return r.rs(Vr.userMutationsIndex, i).next(function (r) {
          return lr.forEach(r, function (r) {
            k(r.userId === n.userId);
            var i = ii(e.Qt, r);
            return bi(t, n.userId, i).next(function () {});
          });
        });
      });
    });
  }, /**
  * Ensures that every document in the remote document cache has a corresponding sentinel row
  * with a sequence number. Missing rows are given the most recently used sequence number.
  */
  t.prototype.Jr = function (t) {
    var e = t.store(Fr.store), n = t.store(Ur.store);
    return t.store(jr.store).get(jr.key).next(function (t) {
      var r = [];
      return n.hs(function (n, i) {
        var o = new Z(n), u = (function (t) {
          return [0, Ar(t)];
        })(o);
        r.push(e.get(u).next(function (n) {
          return n ? lr.resolve() : (function (n) {
            return e.put(new Fr(0, Ar(n), t.highestListenSequenceNumber));
          })(o);
        }));
      }).next(function () {
        return lr.Mn(r);
      });
    });
  }, t.prototype.Yr = function (t, e) {
    // Create the index.
    t.createObjectStore(zr.store, {
      keyPath: zr.keyPath
    });
    var n = e.store(zr.store), r = new li(), i = function (t) {
      if (r.add(t)) {
        var e = t.tt(), i = t.X();
        return n.put({
          collectionId: e,
          parent: Ar(i)
        });
      }
    };
    // Helper to add an index entry iff we haven't already written it.
    // Index existing remote documents.
    return e.store(Ur.store).hs({
      us: !0
    }, function (t, e) {
      var n = new Z(t);
      return i(n.X());
    }).next(function () {
      return e.store(Cr.store).hs({
        us: !0
      }, function (t, e) {
        t[0];
        var n = t[1], r = (t[2], xr(n));
        return i(r.X());
      });
    });
  }, t.prototype.Xr = function (t) {
    var e = this, n = t.store(qr.store);
    return n.hs(function (t, r) {
      var i = oi(r), o = ui(e.Qt, i);
      return n.put(o);
    });
  }, t);
})();
function Bi(t) {
  (t.createObjectStore(Fr.store, {
    keyPath: Fr.keyPath
  }).createIndex(Fr.documentTargetsIndex, Fr.documentTargetsKeyPath, {
    unique: !0
  }), // NOTE: This is unique only because the TargetId is the suffix.
  t.createObjectStore(qr.store, {
    keyPath: qr.keyPath
  }).createIndex(qr.queryTargetsIndexName, qr.queryTargetsKeyPath, {
    unique: !0
  }), t.createObjectStore(jr.store));
}
var Qi = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.", Yi = /** @class*/
(function () {
  function t(/**
  * Whether to synchronize the in-memory state of multiple tabs and share
  * access to local persistence.
  */
  e, n, r, i, o, u, s, a, c, /**
  * If set to true, forcefully obtains database access. Existing tabs will
  * no longer be able to access IndexedDB.
  */
  h) {
    if ((this.allowTabSynchronization = e, this.persistenceKey = n, this.clientId = r, this.Zr = o, this.window = u, this.document = s, this.eo = c, this.no = h, this.so = null, this.io = !1, this.isPrimary = !1, this.networkEnabled = !0, /** Our window.unload handler, if registered.*/
    this.ro = null, this.inForeground = !1, /** Our 'visibilitychange' listener if registered.*/
    this.oo = null, /** The client metadata refresh task.*/
    this.co = null, /** The last time we garbage collected the client metadata object store.*/
    this.ao = Number.NEGATIVE_INFINITY, /** A listener to notify on primary state changes.*/
    this.uo = function (t) {
      return Promise.resolve();
    }, !t.Kn())) throw new q(M.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
    (this.Ti = new Ri(this, i), this.ho = n + "main", this.Qt = new Zr(a), this.lo = new dr(this.ho, 11, new Gi(this.Qt)), this._o = new Si(this.Ti, this.Qt), this.Ei = new pi(), this.fo = (function (t, e) {
      return new Mi(t, e);
    })(this.Qt, this.Ei), this.wo = new ai(), this.window && this.window.localStorage ? this.Eo = this.window.localStorage : (this.Eo = null, !1 === h && A("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page.")));
  }
  /**
  * Attempt to start IndexedDb persistence.
  *
  * @returns Whether persistence was enabled.
  */
  return (t.prototype.start = function () {
    var t = this;
    // NOTE: This is expected to fail sometimes (in the case of another tab
    // already having the persistence lock), so it's the first thing we should
    // do.
    return this.To().then(function () {
      if (!t.isPrimary && !t.allowTabSynchronization) // Fail `start()` if `synchronizeTabs` is disabled and we cannot
      // obtain the primary lease.
      throw new q(M.FAILED_PRECONDITION, Qi);
      return (t.Io(), t.mo(), t.Ao(), t.runTransaction("getHighestListenSequenceNumber", "readonly", function (e) {
        return t._o.Ki(e);
      }));
    }).then(function (e) {
      t.so = new H(e, t.eo);
    }).then(function () {
      t.io = !0;
    }).catch(function (e) {
      return (t.lo && t.lo.close(), Promise.reject(e));
    });
  }, /**
  * Registers a listener that gets called when the primary state of the
  * instance changes. Upon registering, this listener is invoked immediately
  * with the current primary state.
  *
  * PORTING NOTE: This is only used for Web multi-tab.
  */
  t.prototype.Ro = function (t) {
    var e = this;
    return (this.uo = function (n) {
      return _tslib.__awaiter(e, void 0, void 0, function () {
        return _tslib.__generator(this, function (e) {
          return this.Er ? [2, /*return*/
          t(n)] : [2];
        });
      });
    }, t(this.isPrimary));
  }, /**
  * Registers a listener that gets called when the database receives a
  * version change event indicating that it has deleted.
  *
  * PORTING NOTE: This is only used for Web multi-tab.
  */
  t.prototype.Po = function (t) {
    var e = this;
    this.lo.Xn(function (n) {
      return _tslib.__awaiter(e, void 0, void 0, function () {
        return _tslib.__generator(this, function (e) {
          switch (e.label) {
            case 0:
              return null === n.newVersion ? [4, /*yield*/
              t()] : [3, /*break*/
              2];
            case 1:
              (e.sent(), e.label = 2);
            case 2:
              return [2];
          }
        });
      });
    });
  }, /**
  * Adjusts the current network state in the client's metadata, potentially
  * affecting the primary lease.
  *
  * PORTING NOTE: This is only used for Web multi-tab.
  */
  t.prototype.yo = function (t) {
    var e = this;
    this.networkEnabled !== t && (this.networkEnabled = t, // Schedule a primary lease refresh for immediate execution. The eventual
    // lease update will be propagated via `primaryStateListener`.
    this.Zr.Ps(function () {
      return _tslib.__awaiter(e, void 0, void 0, function () {
        return _tslib.__generator(this, function (t) {
          switch (t.label) {
            case 0:
              return this.Er ? [4, /*yield*/
              this.To()] : [3, /*break*/
              2];
            case 1:
              (t.sent(), t.label = 2);
            case 2:
              return [2];
          }
        });
      });
    }));
  }, /**
  * Updates the client metadata in IndexedDb and attempts to either obtain or
  * extend the primary lease for the local client. Asynchronously notifies the
  * primary state listener if the client either newly obtained or released its
  * primary lease.
  */
  t.prototype.To = function () {
    var t = this;
    return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function (e) {
      return Ki(e).put(new Gr(t.clientId, Date.now(), t.networkEnabled, t.inForeground)).next(function () {
        if (t.isPrimary) return t.Vo(e).next(function (e) {
          e || (t.isPrimary = !1, t.Zr.po(function () {
            return t.uo(!1);
          }));
        });
      }).next(function () {
        return t.bo(e);
      }).next(function (n) {
        return t.isPrimary && !n ? t.vo(e).next(function () {
          return !1;
        }) : !!n && t.So(e).next(function () {
          return !0;
        });
      });
    }).catch(function (e) {
      if (mr(e)) // Proceed with the existing state. Any subsequent access to
      // IndexedDB will verify the lease.
      return (N("IndexedDbPersistence", "Failed to extend owner lease: ", e), t.isPrimary);
      if (!t.allowTabSynchronization) throw e;
      return (N("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e), /*isPrimary=*/
      !1);
    }).then(function (e) {
      (t.isPrimary !== e && t.Zr.po(function () {
        return t.uo(e);
      }), t.isPrimary = e);
    });
  }, t.prototype.Vo = function (t) {
    var e = this;
    return Hi(t).get(Or.key).next(function (t) {
      return lr.resolve(e.Do(t));
    });
  }, t.prototype.Co = function (t) {
    return Ki(t).delete(this.clientId);
  }, /**
  * If the garbage collection threshold has passed, prunes the
  * RemoteDocumentChanges and the ClientMetadata store based on the last update
  * time of all clients.
  */
  t.prototype.xo = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t, e, n, r, i = this;
      return _tslib.__generator(this, function (o) {
        switch (o.label) {
          case 0:
            return !this.isPrimary || this.No(this.ao, 18e5) ? [3, /*break*/
            2] : (this.ao = Date.now(), [4, /*yield*/
            this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function (t) {
              var e = Kr(t, Gr.store);
              return e.rs().next(function (t) {
                var n = i.$o(t, 18e5), r = t.filter(function (t) {
                  return -1 === n.indexOf(t);
                });
                // Delete metadata for clients that are no longer considered active.
                return lr.forEach(r, function (t) {
                  return e.delete(t.clientId);
                }).next(function () {
                  return r;
                });
              });
            }).catch(function () {
              return [];
            })]);
          case 1:
            // Delete potential leftover entries that may continue to mark the
            // inactive clients as zombied in LocalStorage.
            // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
            // the client atomically, but we can't. So we opt to delete the IndexedDb
            // entries first to avoid potentially reviving a zombied client.
            if ((t = o.sent(), this.Eo)) for ((e = 0, n = t); e < n.length; e++) (r = n[e], this.Eo.removeItem(this.Fo(r.clientId)));
            o.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, /**
  * Schedules a recurring timer to update the client metadata and to either
  * extend or acquire the primary lease if the client is eligible.
  */
  t.prototype.Ao = function () {
    var t = this;
    this.co = this.Zr.Tr("client_metadata_refresh", /*ClientMetadataRefresh*/
    4e3, function () {
      return t.To().then(function () {
        return t.xo();
      }).then(function () {
        return t.Ao();
      });
    });
  }, /** Checks whether `client` is the local client.*/
  t.prototype.Do = function (t) {
    return !!t && t.ownerId === this.clientId;
  }, /**
  * Evaluate the state of all active clients and determine whether the local
  * client is or can act as the holder of the primary lease. Returns whether
  * the client is eligible for the lease, but does not actually acquire it.
  * May return 'false' even if there is no active leaseholder and another
  * (foreground) client should become leaseholder instead.
  */
  t.prototype.bo = function (t) {
    var e = this;
    return this.no ? lr.resolve(!0) : Hi(t).get(Or.key).next(function (n) {
      // A client is eligible for the primary lease if:
      // - its network is enabled and the client's tab is in the foreground.
      // - its network is enabled and no other client's tab is in the
      // foreground.
      // - every clients network is disabled and the client's tab is in the
      // foreground.
      // - every clients network is disabled and no other client's tab is in
      // the foreground.
      // - the `forceOwningTab` setting was passed in.
      if (null !== n && e.No(n.leaseTimestampMs, 5e3) && !e.Oo(n.ownerId)) {
        if (e.Do(n) && e.networkEnabled) return !0;
        if (!e.Do(n)) {
          if (!n.allowTabSynchronization) // Fail the `canActAsPrimary` check if the current leaseholder has
          // not opted into multi-tab synchronization. If this happens at
          // client startup, we reject the Promise returned by
          // `enablePersistence()` and the user can continue to use Firestore
          // with in-memory persistence.
          // If this fails during a lease refresh, we will instead block the
          // AsyncQueue from executing further operations. Note that this is
          // acceptable since mixing & matching different `synchronizeTabs`
          // settings is not supported.
          // TODO(b/114226234): Remove this check when `synchronizeTabs` can
          // no longer be turned off.
          throw new q(M.FAILED_PRECONDITION, Qi);
          return !1;
        }
      }
      return !(!e.networkEnabled || !e.inForeground) || Ki(t).rs().next(function (t) {
        return void 0 === e.$o(t, 5e3).find(function (t) {
          if (e.clientId !== t.clientId) {
            var n = !e.networkEnabled && t.networkEnabled, r = !e.inForeground && t.inForeground, i = e.networkEnabled === t.networkEnabled;
            if (n || r && i) return !0;
          }
          return !1;
        });
      });
    }).next(function (t) {
      return (e.isPrimary !== t && N("IndexedDbPersistence", "Client " + (t ? "is" : "is not") + " eligible for a primary lease."), t);
    });
  }, t.prototype.ko = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t = this;
      return _tslib.__generator(this, function (e) {
        switch (e.label) {
          case 0:
            // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
            // has obtained the primary lease.
            // The shutdown() operations are idempotent and can be called even when
            // start() aborted (e.g. because it couldn't acquire the persistence lease).
            return (this.io = !1, this.Mo(), this.co && (this.co.cancel(), this.co = null), this.Lo(), this.Bo(), [4, /*yield*/
            this.lo.runTransaction("shutdown", "readwrite", [Or.store, Gr.store], function (e) {
              var n = new Hr(e, H.q);
              return t.vo(n).next(function () {
                return t.Co(n);
              });
            })]);
          case 1:
            // The shutdown() operations are idempotent and can be called even when
            // start() aborted (e.g. because it couldn't acquire the persistence lease).
            // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
            // has obtained the primary lease.
            return (e.sent(), this.lo.close(), // Remove the entry marking the client as zombied from LocalStorage since
            // we successfully deleted its metadata from IndexedDb.
            this.qo(), [2]);
        }
      });
    });
  }, /**
  * Returns clients that are not zombied and have an updateTime within the
  * provided threshold.
  */
  t.prototype.$o = function (t, e) {
    var n = this;
    return t.filter(function (t) {
      return n.No(t.updateTimeMs, e) && !n.Oo(t.clientId);
    });
  }, /**
  * Returns the IDs of the clients that are currently active. If multi-tab
  * is not supported, returns an array that only contains the local client's
  * ID.
  *
  * PORTING NOTE: This is only used for Web multi-tab.
  */
  t.prototype.Uo = function () {
    var t = this;
    return this.runTransaction("getActiveClients", "readonly", function (e) {
      return Ki(e).rs().next(function (e) {
        return t.$o(e, 18e5).map(function (t) {
          return t.clientId;
        });
      });
    });
  }, Object.defineProperty(t.prototype, "Er", {
    get: function () {
      return this.io;
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.Qo = function (t) {
    return Ii.mi(t, this.Qt, this.Ei, this.Ti);
  }, t.prototype.Sr = function () {
    return this._o;
  }, t.prototype.$r = function () {
    return this.fo;
  }, t.prototype.Ko = function () {
    return this.Ei;
  }, t.prototype.Wo = function () {
    return this.wo;
  }, t.prototype.runTransaction = function (t, e, n) {
    var r = this;
    N("IndexedDbPersistence", "Starting transaction:", t);
    var i, o = "readonly" === e ? "readonly" : "readwrite";
    // Do all transactions as readwrite against all object stores, since we
    // are the only reader/writer.
    return this.lo.runTransaction(t, o, Yr, function (o) {
      return (i = new Hr(o, r.so ? r.so.next() : H.q), "readwrite-primary" === e ? r.Vo(i).next(function (t) {
        return !!t || r.bo(i);
      }).next(function (e) {
        if (!e) throw (A("Failed to obtain primary lease for action '" + t + "'."), r.isPrimary = !1, r.Zr.po(function () {
          return r.uo(!1);
        }), new q(M.FAILED_PRECONDITION, Tr));
        return n(i);
      }).next(function (t) {
        return r.So(i).next(function () {
          return t;
        });
      }) : r.jo(i).next(function () {
        return n(i);
      }));
    }).then(function (t) {
      return (i.Vs(), t);
    });
  }, /**
  * Verifies that the current tab is the primary leaseholder or alternatively
  * that the leaseholder has opted into multi-tab synchronization.
  */
  // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
  // be turned off.
  t.prototype.jo = function (t) {
    var e = this;
    return Hi(t).get(Or.key).next(function (t) {
      if (null !== t && e.No(t.leaseTimestampMs, 5e3) && !e.Oo(t.ownerId) && !e.Do(t) && !(e.no || e.allowTabSynchronization && t.allowTabSynchronization)) throw new q(M.FAILED_PRECONDITION, Qi);
    });
  }, /**
  * Obtains or extends the new primary lease for the local client. This
  * method does not verify that the client is eligible for this lease.
  */
  t.prototype.So = function (t) {
    var e = new Or(this.clientId, this.allowTabSynchronization, Date.now());
    return Hi(t).put(Or.key, e);
  }, t.Kn = function () {
    return dr.Kn();
  }, /** Checks the primary lease and removes it if we are the current primary.*/
  t.prototype.vo = function (t) {
    var e = this, n = Hi(t);
    return n.get(Or.key).next(function (t) {
      return e.Do(t) ? (N("IndexedDbPersistence", "Releasing primary lease."), n.delete(Or.key)) : lr.resolve();
    });
  }, /** Verifies that `updateTimeMs` is within `maxAgeMs`.*/
  t.prototype.No = function (t, e) {
    var n = Date.now();
    return !(t < n - e || t > n && (A("Detected an update time that is in the future: " + t + " > " + n), 1));
  }, t.prototype.Io = function () {
    var t = this;
    null !== this.document && "function" == typeof this.document.addEventListener && (this.oo = function () {
      t.Zr.Ps(function () {
        return (t.inForeground = "visible" === t.document.visibilityState, t.To());
      });
    }, this.document.addEventListener("visibilitychange", this.oo), this.inForeground = "visible" === this.document.visibilityState);
  }, t.prototype.Lo = function () {
    this.oo && (this.document.removeEventListener("visibilitychange", this.oo), this.oo = null);
  }, /**
  * Attaches a window.unload handler that will synchronously write our
  * clientId to a "zombie client id" location in LocalStorage. This can be used
  * by tabs trying to acquire the primary lease to determine that the lease
  * is no longer valid even if the timestamp is recent. This is particularly
  * important for the refresh case (so the tab correctly re-acquires the
  * primary lease). LocalStorage is used for this rather than IndexedDb because
  * it is a synchronous API and so can be used reliably from  an unload
  * handler.
  */
  t.prototype.mo = function () {
    var t, e = this;
    "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.ro = function () {
      // Note: In theory, this should be scheduled on the AsyncQueue since it
      // accesses internal state. We execute this code directly during shutdown
      // to make sure it gets a chance to run.
      (e.Mo(), e.Zr.Ps(function () {
        return e.ko();
      }));
    }, this.window.addEventListener("unload", this.ro));
  }, t.prototype.Bo = function () {
    this.ro && (this.window.removeEventListener("unload", this.ro), this.ro = null);
  }, /**
  * Returns whether a client is "zombied" based on its LocalStorage entry.
  * Clients become zombied when their tab closes without running all of the
  * cleanup logic in `shutdown()`.
  */
  t.prototype.Oo = function (t) {
    var e;
    try {
      var n = null !== (null === (e = this.Eo) || void 0 === e ? void 0 : e.getItem(this.Fo(t)));
      return (N("IndexedDbPersistence", "Client '" + t + "' " + (n ? "is" : "is not") + " zombied in LocalStorage"), n);
    } catch (t) {
      // Gracefully handle if LocalStorage isn't working.
      return (A("IndexedDbPersistence", "Failed to get zombied client id.", t), !1);
    }
  }, /**
  * Record client as zombied (a client that had its tab closed). Zombied
  * clients are ignored during primary tab selection.
  */
  t.prototype.Mo = function () {
    if (this.Eo) try {
      this.Eo.setItem(this.Fo(this.clientId), String(Date.now()));
    } catch (t) {
      // Gracefully handle if LocalStorage isn't available / working.
      A("Failed to set zombie client id.", t);
    }
  }, /** Removes the zombied client entry if it exists.*/
  t.prototype.qo = function () {
    if (this.Eo) try {
      this.Eo.removeItem(this.Fo(this.clientId));
    } catch (t) {}
  }, t.prototype.Fo = function (t) {
    return "firestore_zombie_" + this.persistenceKey + "_" + t;
  }, t);
})();
/**
* Oldest acceptable age in milliseconds for client metadata before the client
* is considered inactive and its associated data is garbage collected.
*/
/**
* An IndexedDB-backed instance of Persistence. Data is stored persistently
* across sessions.
*
* On Web only, the Firestore SDKs support shared access to its persistence
* layer. This allows multiple browser tabs to read and write to IndexedDb and
* to synchronize state even without network connectivity. Shared access is
* currently optional and not enabled unless all clients invoke
* `enablePersistence()` with `{synchronizeTabs:true}`.
*
* In multi-tab mode, if multiple clients are active at the same time, the SDK
* will designate one client as the “primary client”. An effort is made to pick
* a visible, network-connected and active client, and this client is
* responsible for letting other clients know about its presence. The primary
* client writes a unique client-generated identifier (the client ID) to
* IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
* update this entry, another client can acquire the lease and take over as
* primary.
*
* Some persistence operations in the SDK are designated as primary-client only
* operations. This includes the acknowledgment of mutations and all updates of
* remote documents. The effects of these operations are written to persistence
* and then broadcast to other tabs via LocalStorage (see
* `WebStorageSharedClientState`), which then refresh their state from
* persistence.
*
* Similarly, the primary client listens to notifications sent by secondary
* clients to discover persistence changes written by secondary clients, such as
* the addition of new mutations and query targets.
*
* If multi-tab is not enabled and another tab already obtained the primary
* lease, IndexedDbPersistence enters a failed state and all subsequent
* operations will automatically fail.
*
* Additionally, there is an optimization so that when a tab is closed, the
* primary lease is released immediately (this is especially important to make
* sure that a refreshed tab is able to immediately re-acquire the primary
* lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
* since it is an asynchronous API. So in addition to attempting to give up the
* lease, the leaseholder writes its client ID to a "zombiedClient" entry in
* LocalStorage which acts as an indicator that another tab should go ahead and
* take the primary lease immediately regardless of the current lease timestamp.
*
* TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
* longer optional.
*/
/**
* Helper to get a typed SimpleDbStore for the primary client object store.
*/
function Hi(t) {
  return Kr(t, Or.store);
}
/**
* Helper to get a typed SimpleDbStore for the client metadata object store.
*/
function Ki(t) {
  return Kr(t, Gr.store);
}
/**
* Generates a string used as a prefix when storing data in IndexedDB and
* LocalStorage.
*/
function Xi(t, e) {
  // Use two different prefix formats:
  // * firestore / persistenceKey / projectID . databaseID / ...
  // * firestore / persistenceKey / projectID / ...
  // projectIDs are DNS-compatible names and cannot contain dots
  // so there's no danger of collisions.
  var n = t.projectId;
  return (t.o || (n += "." + t.database), "firestore/" + e + "/" + n + "/");
}
var Wi = function (t, e) {
  (this.progress = t, this.Go = e);
}, Zi = /** @class*/
(function () {
  function t(t, e, n) {
    (this.fo = t, this.zo = e, this.Ei = n);
  }
  return (t.prototype.Ho = function (t, e) {
    var n = this;
    return this.zo.bi(t, e).next(function (r) {
      return n.Jo(t, e, r);
    });
  }, /** Internal version of `getDocument` that allows reusing batches.*/
  t.prototype.Jo = function (t, e, n) {
    return this.fo._i(t, e).next(function (t) {
      for (var r = 0, i = n; r < i.length; r++) {
        t = i[r].Cs(e, t);
      }
      return t;
    });
  }, // Returns the view of the given `docs` as they would appear after applying
  // all mutations in the given `batches`.
  t.prototype.Yo = function (t, e, n) {
    var r = fn();
    return (e.forEach(function (t, e) {
      for (var i = 0, o = n; i < o.length; i++) {
        e = o[i].Cs(t, e);
      }
      r = r.zt(t, e);
    }), r);
  }, /**
  * Gets the local view of the documents identified by `keys`.
  *
  * If we don't have cached state for a document in `keys`, a NoDocument will
  * be stored for that key in the resulting set.
  */
  t.prototype.Xo = function (t, e) {
    var n = this;
    return this.fo.getEntries(t, e).next(function (e) {
      return n.Zo(t, e);
    });
  }, /**
  * Similar to `getDocuments`, but creates the local view from the given
  * `baseDocs` without retrieving documents from the local store.
  */
  t.prototype.Zo = function (t, e) {
    var n = this;
    return this.zo.vi(t, e).next(function (r) {
      var i = n.Yo(t, e, r), o = hn();
      return (i.forEach(function (t, e) {
        // TODO(http://b/32275378): Don't conflate missing / deleted.
        (e || (e = new Vt(t, X.min())), o = o.zt(t, e));
      }), o);
    });
  }, /**
  * Performs a query against the local view of all documents.
  *
  * @param transaction - The persistence transaction.
  * @param query - The query to match documents against.
  * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
  *     documents that have been read since this snapshot version (exclusive).
  */
  t.prototype.Kr = function (t, e, n) {
    /**
    * Returns whether the query matches a single document by path (rather than a
    * collection).
    */
    return (function (t) {
      return tt.wt(t.path) && null === t.collectionGroup && 0 === t.filters.length;
    })(e) ? this.tc(t, e.path) : ae(e) ? this.ec(t, e, n) : this.nc(t, e, n);
  }, t.prototype.tc = function (t, e) {
    // Just do a simple document lookup.
    return this.Ho(t, new tt(e)).next(function (t) {
      var e = pn();
      return (t instanceof Pt && (e = e.zt(t.key, t)), e);
    });
  }, t.prototype.ec = function (t, e, n) {
    var r = this, i = e.collectionGroup, o = pn();
    return this.Ei.Us(t, i).next(function (u) {
      return lr.forEach(u, function (u) {
        var s = (function (t, e) {
          return new ee(e, /*collectionGroup=*/
          null, t.xt.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
        })(e, u.child(i));
        return r.nc(t, s, n).next(function (t) {
          t.forEach(function (t, e) {
            o = o.zt(t, e);
          });
        });
      }).next(function () {
        return o;
      });
    });
  }, t.prototype.nc = function (t, e, n) {
    var r, i, o = this;
    // Query the remote documents and overlay mutations.
    return this.fo.Kr(t, e, n).next(function (n) {
      return (r = n, o.zo.Di(t, e));
    }).next(function (e) {
      return (i = e, o.sc(t, i, r).next(function (t) {
        r = t;
        for (var e = 0, n = i; e < n.length; e++) for (var o = n[e], u = 0, s = o.mutations; u < s.length; u++) {
          var a = s[u], c = a.key, h = Fe(a, r.get(c), o.vs);
          r = h instanceof Pt ? r.zt(c, h) : r.remove(c);
        }
      }));
    }).next(function () {
      // Finally, filter out any documents that don't actually match
      // the query.
      return (r.forEach(function (t, n) {
        ve(e, n) || (r = r.remove(t));
      }), r);
    });
  }, t.prototype.sc = function (t, e, n) {
    for (var r = mn(), i = 0, o = e; i < o.length; i++) for (var u = 0, s = o[i].mutations; u < s.length; u++) {
      var a = s[u];
      a instanceof Qe && null === n.get(a.key) && (r = r.add(a.key));
    }
    var c = n;
    return this.fo.getEntries(t, r).next(function (t) {
      return (t.forEach(function (t, e) {
        null !== e && e instanceof Pt && (c = c.zt(t, e));
      }), c);
    });
  }, t);
})(), Ji = /** @class*/
(function () {
  function t(t, e, n, r) {
    (this.targetId = t, this.fromCache = e, this.ic = n, this.rc = r);
  }
  return (t.oc = function (e, n) {
    for (var r = mn(), i = mn(), o = 0, u = n.docChanges; o < u.length; o++) {
      var s = u[o];
      switch (s.type) {
        case 0:
          /*Added*/
          r = r.add(s.doc.key);
          break;
        case 1:
          /*Removed*/
          i = i.add(s.doc.key);
      }
    }
    return new t(e, n.fromCache, r, i);
  }, t);
})(), $i = /** @class*/
(function () {
  function t() {}
  /** Sets the document view to query against.*/
  return (t.prototype.cc = function (t) {
    this.ac = t;
  }, /** Returns all local documents matching the specified query.*/
  t.prototype.Kr = function (t, n, r, i) {
    var o = this;
    // Queries that match all documents don't benefit from using
    // key-based lookups. It is more efficient to scan all documents in a
    // collection, rather than to perform individual lookups.
    return (function (t) {
      return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.xt.length || 1 === t.xt.length && t.xt[0].field.ut());
    })(n) || r.isEqual(X.min()) ? this.uc(t, n) : this.ac.Xo(t, i).next(function (u) {
      var s = o.hc(n, u);
      return (ie(n) || oe(n)) && o.lc(n.limitType, s, i, r) ? o.uc(t, n) : (T() <= _firebaseLogger.LogLevel.DEBUG && N("QueryEngine", "Re-using previous result from %s to execute query: %s", r.toString(), de(n)), o.ac.Kr(t, n, r).next(function (t) {
        // We merge `previousResults` into `updateResults`, since
        // `updateResults` is already a DocumentMap. If a document is
        // contained in both lists, then its contents are the same.
        return (s.forEach(function (e) {
          t = t.zt(e.key, e);
        }), t);
      }));
    });
  }, /** Applies the query filter and sorting to the provided documents.*/
  t.prototype.hc = function (t, e) {
    // Sort the documents and re-apply the query filter since previously
    // matching documents do not necessarily still match the query.
    var n = new sn(ye(t));
    return (e.forEach(function (e, r) {
      r instanceof Pt && ve(t, r) && (n = n.add(r));
    }), n);
  }, /**
  * Determines if a limit query needs to be refilled from cache, making it
  * ineligible for index-free execution.
  *
  * @param sortedPreviousResults - The documents that matched the query when it
  * was last synchronized, sorted by the query's comparator.
  * @param remoteKeys - The document keys that matched the query at the last
  * snapshot.
  * @param limboFreeSnapshotVersion - The version of the snapshot when the
  * query was last synchronized.
  */
  t.prototype.lc = function (t, e, n, r) {
    // The query needs to be refilled if a previously matching document no
    // longer matches.
    if (n.size !== e.size) return !0;
    // Limit queries are not eligible for index-free query execution if there is
    // a potential that an older document from cache now sorts before a document
    // that was previously part of the limit. This, however, can only happen if
    // the document at the edge of the limit goes out of limit.
    // If a document that is not the limit boundary sorts differently,
    // the boundary of the limit itself did not change and documents from cache
    // will continue to be "rejected" by this boundary. Therefore, we can ignore
    // any modifications that don't affect the last document.
    var i = "F" === /*First*/
    t ? e.last() : e.first();
    return !!i && (i.hasPendingWrites || i.version._(r) > 0);
  }, t.prototype.uc = function (t, n) {
    return (T() <= _firebaseLogger.LogLevel.DEBUG && N("QueryEngine", "Using full collection scan to execute query:", de(n)), this.ac.Kr(t, n, X.min()));
  }, t);
})(), to = /** @class*/
(function () {
  function t(/** Manages our in-memory or durable persistence.*/
  t, e, n, r) {
    (this.persistence = t, this._c = e, this.Qt = r, /**
    * Maps a targetID to data about its target.
    *
    * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
    * of `applyRemoteEvent()` idempotent.
    */
    this.fc = new rn(C), /** Maps a target to its targetID.*/
    // TODO(wuandy): Evaluate if TargetId can be part of Target.
    this.dc = new gi(function (t) {
      return Ut(t);
    }, Mt), /**
    * The read time of the last entry processed by `getNewDocumentChanges()`.
    *
    * PORTING NOTE: This is only used for multi-tab synchronization.
    */
    this.wc = X.min(), this.zo = t.Qo(n), this.Ec = t.$r(), this._o = t.Sr(), this.Tc = new Zi(this.Ec, this.zo, this.persistence.Ko()), this.wo = t.Wo(), this._c.cc(this.Tc));
  }
  return (t.prototype.Ir = function (t) {
    var e = this;
    return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function (n) {
      return t.Vr(n, e.fc);
    });
  }, t);
})();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A readonly view of the local state of all documents we're tracking (i.e. we
* have a cached version in remoteDocumentCache or local mutations for the
* document). The view is computed by applying the mutations in the
* MutationQueue to the RemoteDocumentCache.
*/
function eo(/** Manages our in-memory or durable persistence.*/
t, e, n, r) {
  return new to(t, e, n, r);
}
/**
* Tells the LocalStore that the currently authenticated user has changed.
*
* In response the local store switches the mutation queue to the new user and
* returns any resulting document changes.
*/
// PORTING NOTE: Android and iOS only return the documents affected by the
// change.
function no(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i, o;
    return _tslib.__generator(this, function (u) {
      switch (u.label) {
        case 0:
          return (n = O(t), r = n.zo, i = n.Tc, [4, /*yield*/
          n.persistence.runTransaction("Handle user change", "readonly", function (t) {
            // Swap out the mutation queue, grabbing the pending mutation batches
            // before and after.
            var o;
            return n.zo.pi(t).next(function (u) {
              return (o = u, r = n.persistence.Qo(e), // Recreate our LocalDocumentsView using the new
              // MutationQueue.
              i = new Zi(n.Ec, r, n.persistence.Ko()), r.pi(t));
            }).next(function (e) {
              for (var n = [], r = [], u = mn(), s = 0, a = o; // Union the old/new changed keys.
              s < a.length; s++) {
                var c = a[s];
                n.push(c.batchId);
                for (var h = 0, f = c.mutations; h < f.length; h++) {
                  var l = f[h];
                  u = u.add(l.key);
                }
              }
              for (var p = 0, d = e; p < d.length; p++) {
                var v = d[p];
                r.push(v.batchId);
                for (var y = 0, m = v.mutations; y < m.length; y++) {
                  var g = m[y];
                  u = u.add(g.key);
                }
              }
              // Return the set of all (potentially) changed documents and the list
              // of mutation batch IDs that were affected by change.
              return i.Xo(t, u).next(function (t) {
                return {
                  Ic: t,
                  mc: n,
                  Ac: r
                };
              });
            });
          })]);
        case 1:
          return (o = u.sent(), [2, /*return*/
          (n.zo = r, n.Tc = i, n._c.cc(n.Tc), o)]);
      }
    });
  });
}
/*Accepts locally generated Mutations and commit them to storage.*/
/**
* Acknowledges the given batch.
*
* On the happy path when a batch is acknowledged, the local store will
*
*  + remove the batch from the mutation queue;
*  + apply the changes to the remote document cache;
*  + recalculate the latency compensated view implied by those changes (there
*    may be mutations in the queue that affect the documents but haven't been
*    acknowledged yet); and
*  + give the changed documents back the sync engine
*
* @returns The resulting (modified) documents.
*/
function ro(t, e) {
  var n = O(t);
  return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function (t) {
    var r = e.batch.keys(), i = n.Ec.Nr({
      Wr: !0
    });
    return (function (t, e, n, r) {
      var i = n.batch, o = i.keys(), u = lr.resolve();
      return (o.forEach(function (t) {
        u = u.next(function () {
          return r._i(e, t);
        }).next(function (e) {
          var o = e, u = n.$s.get(t);
          (k(null !== u), (!o || o.version._(u) < 0) && ((o = i.Ss(t, o, n)) && // We use the commitVersion as the readTime rather than the
          // document's updateTime since the updateTime is not advanced
          // for updates that do not modify the underlying document.
          r.ai(o, n.Ns)));
        });
      }), u.next(function () {
        return t.zo.Ci(e, i);
      }));
    })(n, t, e, i).next(function () {
      return i.apply(t);
    }).next(function () {
      return n.zo.$i(t);
    }).next(function () {
      return n.Tc.Xo(t, r);
    });
  });
}
/**
* Removes mutations from the MutationQueue for the specified batch;
* LocalDocuments will be recalculated.
*
* @returns The resulting modified documents.
*/
/**
* Returns the last consistent snapshot processed (used by the RemoteStore to
* determine whether to buffer incoming snapshots from the backend).
*/
function io(t) {
  var e = O(t);
  return e.persistence.runTransaction("Get last remote snapshot version", "readonly", function (t) {
    return e._o.Qi(t);
  });
}
/**
* Updates the "ground-state" (remote) documents. We assume that the remote
* event reflects any write batches that have been acknowledged or rejected
* (i.e. we do not re-apply local mutations to updates from this event).
*
* LocalDocuments are re-calculated if there are remaining mutations in the
* queue.
*/
function oo(t, e) {
  var n = O(t), r = e.Ot, i = n.fc;
  return n.persistence.runTransaction("Apply remote event", "readwrite-primary", function (t) {
    var o = n.Ec.Nr({
      Wr: !0
    });
    // Reset newTargetDataByTargetMap in case this transaction gets re-run.
    i = n.fc;
    var u = [];
    e.$e.forEach(function (e, o) {
      var s = i.get(o);
      if (s) {
        // Only update the remote keys if the target is still active. This
        // ensures that we can persist the updated target data along with
        // the updated assignment.
        u.push(n._o.sr(t, e.Qe, o).next(function () {
          return n._o.er(t, e.qe, o);
        }));
        var a = e.resumeToken;
        // Update the resume token if the change includes one.
        if (a.l() > 0) {
          var c = s.Mt(a, r).kt(t.bs);
          (i = i.zt(o, c), // Update the target data if there are target changes (or if
          // sufficient time has passed since the last update).
          /**
          * Returns true if the newTargetData should be persisted during an update of
          * an active target. TargetData should always be persisted when a target is
          * being released and should not call this function.
          *
          * While the target is active, TargetData updates can be omitted when nothing
          * about the target has changed except metadata like the resume token or
          * snapshot version. Occasionally it's worth the extra write to prevent these
          * values from getting too stale after a crash, but this doesn't have to be
          * too frequent.
          */
          (function (t, e, n) {
            // Always persist target data if we don't already have a resume token.
            return (k(e.resumeToken.l() > 0), 0 === t.resumeToken.l() || (// Don't allow resume token changes to be buffered indefinitely. This
            // allows us to be reasonably up-to-date after a crash and avoids needing
            // to loop over all active queries on shutdown. Especially in the browser
            // we may not get time to do anything interesting while the current tab is
            // closing.
            e.Ot.W() - t.Ot.W() >= 3e8 || n.qe.size + n.Ue.size + n.Qe.size > 0));
          })(s, c, e) && u.push(n._o.Hi(t, c)));
        }
      }
    });
    var s = hn();
    // HACK: The only reason we allow a null snapshot version is so that we
    // can synthesize remote events when we get permission denied errors while
    // trying to resolve the state of a locally cached document that is in
    // limbo.
    if ((e.Oe.forEach(function (r, i) {
      e.ke.has(r) && u.push(n.persistence.Ti.Fr(t, r));
    }), // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
    // documents in advance in a single call.
    u.push(uo(t, o, e.Oe, r, void 0).next(function (t) {
      s = t;
    })), !r.isEqual(X.min()))) {
      var a = n._o.Qi(t).next(function (e) {
        return n._o.Wi(t, t.bs, r);
      });
      u.push(a);
    }
    return lr.Mn(u).next(function () {
      return o.apply(t);
    }).next(function () {
      return n.Tc.Zo(t, s);
    });
  }).then(function (t) {
    return (n.fc = i, t);
  });
}
/**
* Populates document change buffer with documents from backend or a bundle.
* Returns the document changes resulting from applying those documents.
*
* @param txn - Transaction to use to read existing documents from storage.
* @param documentBuffer - Document buffer to collect the resulted changes to be
*        applied to storage.
* @param documents - Documents to be applied.
* @param globalVersion - A `SnapshotVersion` representing the read time if all
*        documents have the same read time.
* @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
*        have their own read time.
*
* Note: this function will use `documentVersions` if it is defined;
* when it is not defined, resorts to `globalVersion`.
*/
function uo(t, e, n, r, // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
// this parameter.
i) {
  var o = mn();
  return (n.forEach(function (t) {
    return o = o.add(t);
  }), e.getEntries(t, o).next(function (t) {
    var o = hn();
    return (n.forEach(function (n, u) {
      var s = t.get(n), a = (null == i ? void 0 : i.get(n)) || r;
      // Note: The order of the steps below is important, since we want
      // to ensure that rejected limbo resolutions (which fabricate
      // NoDocuments with SnapshotVersion.min()) never add documents to
      // cache.
      u instanceof Vt && u.version.isEqual(X.min()) ? // NoDocuments with SnapshotVersion.min() are used in manufactured
      // events. We remove these documents from cache since we lost
      // access.
      (e.li(n, a), o = o.zt(n, u)) : null == s || u.version._(s.version) > 0 || 0 === u.version._(s.version) && s.hasPendingWrites ? (e.ai(u, a), o = o.zt(n, u)) : N("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", s.version, " Watch version:", u.version);
    }), o);
  }));
}
function so(t, e) {
  var n = O(t);
  return n.persistence.runTransaction("Get next mutation batch", "readonly", function (t) {
    return (void 0 === e && (e = -1), n.zo.gi(t, e));
  });
}
/**
* Reads the current value of a Document with a given key or null if not
* found - used for testing.
*/
/**
* Assigns the given target an internal ID so that its results can be pinned so
* they don't get GC'd. A target must be allocated in the local store before
* the store can be used to manage its view.
*
* Allocating an already allocated `Target` will return the existing `TargetData`
* for that `Target`.
*/
function ao(t, e) {
  var n = O(t);
  return n.persistence.runTransaction("Allocate target", "readwrite", function (t) {
    var r;
    return n._o.tr(t, e).next(function (i) {
      return i ? // This target has been listened to previously, so reuse the
      // previous targetID.
      // TODO(mcg): freshen last accessed date?
      (r = i, lr.resolve(r)) : n._o.Bi(t).next(function (i) {
        return (r = new ge(e, i, 0, /*Listen*/
        t.bs), n._o.ji(t, r).next(function () {
          return r;
        }));
      });
    });
  }).then(function (t) {
    // If Multi-Tab is enabled, the existing target data may be newer than
    // the in-memory data
    var r = n.fc.get(t.targetId);
    return ((null === r || t.Ot._(r.Ot) > 0) && (n.fc = n.fc.zt(t.targetId, t), n.dc.set(e, t.targetId)), t);
  });
}
/**
* Returns the TargetData as seen by the LocalStore, including updates that may
* have not yet been persisted to the TargetCache.
*/
// Visible for testing.
/**
* Unpins all the documents associated with the given target. If
* `keepPersistedTargetData` is set to false and Eager GC enabled, the method
* directly removes the associated target data from the target cache.
*
* Releasing a non-existing `Target` is a no-op.
*/
// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
function co(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var r, i, o, u;
    return _tslib.__generator(this, function (s) {
      switch (s.label) {
        case 0:
          (r = O(t), i = r.fc.get(e), o = n ? "readwrite" : "readwrite-primary", s.label = 1);
        case 1:
          return (s.trys.push([1, 4, , 5]), n ? [3, /*break*/
          3] : [4, /*yield*/
          r.persistence.runTransaction("Release target", o, function (t) {
            return r.persistence.Ti.removeTarget(t, i);
          })]);
        case 2:
          (s.sent(), s.label = 3);
        case 3:
          return [3, /*break*/
          5];
        case 4:
          if (!mr(u = s.sent())) throw u;
          // All `releaseTarget` does is record the final metadata state for the
          // target, but we've been recording this periodically during target
          // activity. If we lose this write this could cause a very slight
          // difference in the order of target deletion during GC, but we
          // don't define exact LRU semantics so this is acceptable.
          return (N("LocalStore", "Failed to update sequence numbers for target " + e + ": " + u), [3, /*break*/
          5]);
        case 5:
          return (r.fc = r.fc.remove(e), r.dc.delete(i.target), [2]);
      }
    });
  });
}
/**
* Runs the specified query against the local store and returns the results,
* potentially taking advantage of query data from previous executions (such
* as the set of remote keys).
*
* @param usePreviousResults - Whether results from previous executions can
* be used to optimize this query execution.
*/
function ho(t, e, n) {
  var r = O(t), i = X.min(), o = mn();
  return r.persistence.runTransaction("Execute query", "readonly", function (t) {
    return (function (t, e, n) {
      var r = O(t), i = r.dc.get(n);
      return void 0 !== i ? lr.resolve(r.fc.get(i)) : r._o.tr(e, n);
    })(r, t, he(e)).next(function (e) {
      if (e) return (i = e.lastLimboFreeSnapshotVersion, r._o.rr(t, e.targetId).next(function (t) {
        o = t;
      }));
    }).next(function () {
      return r._c.Kr(t, e, n ? i : X.min(), n ? o : mn());
    }).next(function (t) {
      return {
        documents: t,
        Rc: o
      };
    });
  });
}
// PORTING NOTE: Multi-Tab only.
function fo(t, e) {
  var n = O(t), r = O(n._o), i = n.fc.get(e);
  return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", function (t) {
    return r.Sn(t, e).next(function (t) {
      return t ? t.target : null;
    });
  });
}
/**
* Returns the set of documents that have been updated since the last call.
* If this is the first call, returns the set of changes since client
* initialization. Further invocations will return document that have changed
* since the prior call.
*/
// PORTING NOTE: Multi-Tab only.
function lo(t) {
  var e = O(t);
  return e.persistence.runTransaction("Get new document changes", "readonly", function (t) {
    return (function (t, e, n) {
      var r = O(t), i = hn(), o = ti(n), u = ji(e), s = IDBKeyRange.lowerBound(o, !0);
      return u.hs({
        index: Ur.readTimeIndex,
        range: s
      }, function (t, e) {
        // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
        // the documents directly since we want to keep sentinel deletes.
        var n = Jr(r.Qt, e);
        (i = i.zt(n.key, n), o = e.readTime);
      }).next(function () {
        return {
          Go: i,
          readTime: ei(o)
        };
      });
    })(e.Ec, t, e.wc);
  }).then(function (t) {
    var n = t.Go, r = t.readTime;
    return (e.wc = r, n);
  });
}
/**
* Reads the newest document change from persistence and moves the internal
* synchronization marker forward so that calls to `getNewDocumentChanges()`
* only return changes that happened after client initialization.
*/
// PORTING NOTE: Multi-Tab only.
function po(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var e;
    return _tslib.__generator(this, function (n) {
      return [2, /*return*/
      (e = O(t)).persistence.runTransaction("Synchronize last document change read time", "readonly", function (t) {
        return (function (t) {
          var e = ji(t), n = X.min();
          // If there are no existing entries, we return SnapshotVersion.min().
          return e.hs({
            index: Ur.readTimeIndex,
            reverse: !0
          }, function (t, e, r) {
            (e.readTime && (n = ei(e.readTime)), r.done());
          }).next(function () {
            return n;
          });
        })(t);
      }).then(function (t) {
        e.wc = t;
      })];
    });
  });
}
/**
* Creates a new target using the given bundle name, which will be used to
* hold the keys of all documents from the bundle in query-document mappings.
* This ensures that the loaded documents do not get garbage collected
* right away.
*/
/**
* Applies the documents from a bundle to the "ground-state" (remote)
* documents.
*
* LocalDocuments are re-calculated if there are remaining mutations in the
* queue.
*/
function vo(t, e, n, r) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var i, o, u, s, a, c, h, f, l, p;
    return _tslib.__generator(this, function (d) {
      switch (d.label) {
        case 0:
          for ((i = O(t), o = mn(), u = hn(), s = vn(), a = 0, c = n); a < c.length; a++) (h = c[a], f = e.Pc(h.metadata.name), h.document && (o = o.add(f)), u = u.zt(f, e.yc(h)), s = s.zt(f, e.gc(h.metadata.readTime)));
          return (l = i.Ec.Nr({
            Wr: !0
          }), [4, /*yield*/
          ao(i, (function (t) {
            // It is OK that the path used for the query is not valid, because this will
            // not be read and queried.
            return he(re(Z.ot("__bundle__/docs/" + t)));
          })(r))]);
        case 1:
          // Allocates a target to hold all document keys from the bundle, such that
          // they will not get garbage collected right away.
          return (p = d.sent(), [2, /*return*/
          i.persistence.runTransaction("Apply bundle documents", "readwrite", function (t) {
            return uo(t, l, u, X.min(), s).next(function (e) {
              return (l.apply(t), e);
            }).next(function (e) {
              return i._o.Yi(t, p.targetId).next(function () {
                return i._o.er(t, o, p.targetId);
              }).next(function () {
                return i.Tc.Zo(t, e);
              });
            });
          })]);
      }
    });
  });
}
/**
* Returns a promise of a boolean to indicate if the given bundle has already
* been loaded and the create time is newer than the current loading bundle.
*/
/**
* Saves the given `NamedQuery` to local persistence.
*/
function yo(t, e, n) {
  return (void 0 === n && (n = mn()), _tslib.__awaiter(this, void 0, void 0, function () {
    var r, i;
    return _tslib.__generator(this, function (o) {
      switch (o.label) {
        case 0:
          return [4, /*yield*/
          ao(t, he(si(e.bundledQuery)))];
        case 1:
          return (r = o.sent(), [2, /*return*/
          (i = O(t)).persistence.runTransaction("Save named query", "readwrite", function (t) {
            var o = Mn(e.readTime);
            // Simply save the query itself if it is older than what the SDK already
            // has.
            if (r.Ot._(o) >= 0) return i.wo.Ls(t, e);
            // Update existing target data because the query from the bundle is newer.
            var u = r.Mt(U.T, o);
            return (i.fc = i.fc.zt(u.targetId, u), i._o.Hi(t, u).next(function () {
              return i._o.Yi(t, r.targetId);
            }).next(function () {
              return i._o.er(t, n, r.targetId);
            }).next(function () {
              return i.wo.Ls(t, e);
            }));
          })]);
      }
    });
  }));
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var mo = /** @class*/
(function () {
  function t(t) {
    (this.Qt = t, this.Vc = new Map(), this.bc = new Map());
  }
  return (t.prototype.Os = function (t, e) {
    return lr.resolve(this.Vc.get(e));
  }, t.prototype.ks = function (t, e) {
    /** Decodes a BundleMetadata proto into a BundleMetadata object.*/
    var n;
    return (this.Vc.set(e.id, {
      id: (n = e).id,
      version: n.version,
      createTime: Mn(n.createTime)
    }), lr.resolve());
  }, t.prototype.Ms = function (t, e) {
    return lr.resolve(this.bc.get(e));
  }, t.prototype.Ls = function (t, e) {
    return (this.bc.set(e.name, (function (t) {
      return {
        name: t.name,
        query: si(t.bundledQuery),
        readTime: Mn(t.readTime)
      };
    })(e)), lr.resolve());
  }, t);
})(), go = /** @class*/
(function () {
  function t() {
    // A set of outstanding references to a document sorted by key.
    (this.vc = new sn(wo.Sc), // A set of outstanding references to a document sorted by target id.
    this.Dc = new sn(wo.Cc));
  }
  return (t.prototype.et = function () {
    return this.vc.et();
  }, /** Adds a reference to the given document key for the given ID.*/
  t.prototype.nr = function (t, e) {
    var n = new wo(t, e);
    (this.vc = this.vc.add(n), this.Dc = this.Dc.add(n));
  }, /** Add references to the given document keys for the given ID.*/
  t.prototype.xc = function (t, e) {
    var n = this;
    t.forEach(function (t) {
      return n.nr(t, e);
    });
  }, /**
  * Removes a reference to the given document key for the given
  * ID.
  */
  t.prototype.ir = function (t, e) {
    this.Nc(new wo(t, e));
  }, t.prototype.$c = function (t, e) {
    var n = this;
    t.forEach(function (t) {
      return n.ir(t, e);
    });
  }, /**
  * Clears all references with a given ID. Calls removeRef() for each key
  * removed.
  */
  t.prototype.Fc = function (t) {
    var e = this, n = new tt(new Z([])), r = new wo(n, t), i = new wo(n, t + 1), o = [];
    return (this.Dc.me([r, i], function (t) {
      (e.Nc(t), o.push(t.key));
    }), o);
  }, t.prototype.Oc = function () {
    var t = this;
    this.vc.forEach(function (e) {
      return t.Nc(e);
    });
  }, t.prototype.Nc = function (t) {
    (this.vc = this.vc.delete(t), this.Dc = this.Dc.delete(t));
  }, t.prototype.kc = function (t) {
    var e = new tt(new Z([])), n = new wo(e, t), r = new wo(e, t + 1), i = mn();
    return (this.Dc.me([n, r], function (t) {
      i = i.add(t.key);
    }), i);
  }, t.prototype.Fi = function (t) {
    var e = new wo(t, 0), n = this.vc.Re(e);
    return null !== n && t.isEqual(n.key);
  }, t);
})(), wo = /** @class*/
(function () {
  function t(t, e) {
    (this.key = t, this.Mc = e);
  }
  return (t.Sc = function (t, e) {
    return tt.H(t.key, e.key) || C(t.Mc, e.Mc);
  }, /** Compare by ID then by key*/
  t.Cc = function (t, e) {
    return C(t.Mc, e.Mc) || tt.H(t.key, e.key);
  }, t);
})(), bo = /** @class*/
(function () {
  function t(t, e) {
    (this.Ei = t, this.Ti = e, /**
    * The set of all mutations that have been sent but not yet been applied to
    * the backend.
    */
    this.zo = [], /** Next value to use when assigning sequential IDs to each mutation batch.*/
    this.Lc = 1, /** An ordered mapping between documents and the mutations batch IDs.*/
    this.Bc = new sn(wo.Sc));
  }
  return (t.prototype.Ai = function (t) {
    return lr.resolve(0 === this.zo.length);
  }, t.prototype.Ri = function (t, e, n, r) {
    var i = this.Lc;
    (this.Lc++, this.zo.length > 0 && this.zo[this.zo.length - 1]);
    var o = new Xr(i, e, n, r);
    this.zo.push(o);
    // Track references by document key and index collection parents.
    for (var u = 0, s = r; u < s.length; u++) {
      var a = s[u];
      (this.Bc = this.Bc.add(new wo(a.key, i)), this.Ei.qs(t, a.key.path.X()));
    }
    return lr.resolve(o);
  }, t.prototype.Pi = function (t, e) {
    return lr.resolve(this.qc(e));
  }, t.prototype.gi = function (t, e) {
    var n = e + 1, r = this.Uc(n), i = r < 0 ? 0 : r;
    // The requested batchId may still be out of range so normalize it to the
    // start of the queue.
    return lr.resolve(this.zo.length > i ? this.zo[i] : null);
  }, t.prototype.Vi = function () {
    return lr.resolve(0 === this.zo.length ? -1 : this.Lc - 1);
  }, t.prototype.pi = function (t) {
    return lr.resolve(this.zo.slice());
  }, t.prototype.bi = function (t, e) {
    var n = this, r = new wo(e, 0), i = new wo(e, Number.POSITIVE_INFINITY), o = [];
    return (this.Bc.me([r, i], function (t) {
      var e = n.qc(t.Mc);
      o.push(e);
    }), lr.resolve(o));
  }, t.prototype.vi = function (t, e) {
    var n = this, r = new sn(C);
    return (e.forEach(function (t) {
      var e = new wo(t, 0), i = new wo(t, Number.POSITIVE_INFINITY);
      n.Bc.me([e, i], function (t) {
        r = r.add(t.Mc);
      });
    }), lr.resolve(this.Qc(r)));
  }, t.prototype.Di = function (t, e) {
    // Use the query path as a prefix for testing if a document matches the
    // query.
    var n = e.path, r = n.length + 1, i = n;
    // Construct a document reference for actually scanning the index. Unlike
    // the prefix the document key in this reference must have an even number of
    // segments. The empty segment can be used a suffix of the query path
    // because it precedes all other segments in an ordered traversal.
    tt.wt(i) || (i = i.child(""));
    var o = new wo(new tt(i), 0), u = new sn(C);
    // Find unique batchIDs referenced by all documents potentially matching the
    // query.
    return (this.Bc.Ae(function (t) {
      var e = t.key.path;
      return !!n.nt(e) && // Rows with document keys more than one segment longer than the query
      // path can't be matches. For example, a query on 'rooms' can't match
      // the document /rooms/abc/messages/xyx.
      // TODO(mcg): we'll need a different scanner when we implement
      // ancestor queries.
      (e.length === r && (u = u.add(t.Mc)), !0);
    }, o), lr.resolve(this.Qc(u)));
  }, t.prototype.Qc = function (t) {
    var e = this, n = [];
    // Construct an array of matching batches, sorted by batchID to ensure that
    // multiple mutations affecting the same document key are applied in order.
    return (t.forEach(function (t) {
      var r = e.qc(t);
      null !== r && n.push(r);
    }), n);
  }, t.prototype.Ci = function (t, e) {
    var n = this;
    (k(0 === this.Kc(e.batchId, "removed")), this.zo.shift());
    var r = this.Bc;
    return lr.forEach(e.mutations, function (i) {
      var o = new wo(i.key, e.batchId);
      return (r = r.delete(o), n.Ti.Ni(t, i.key));
    }).next(function () {
      n.Bc = r;
    });
  }, t.prototype.xi = function (t) {}, t.prototype.Fi = function (t, e) {
    var n = new wo(e, 0), r = this.Bc.Re(n);
    return lr.resolve(e.isEqual(r && r.key));
  }, t.prototype.$i = function (t) {
    return (this.zo.length, lr.resolve());
  }, /**
  * Finds the index of the given batchId in the mutation queue and asserts that
  * the resulting index is within the bounds of the queue.
  *
  * @param batchId - The batchId to search for
  * @param action - A description of what the caller is doing, phrased in passive
  * form (e.g. "acknowledged" in a routine that acknowledges batches).
  */
  t.prototype.Kc = function (t, e) {
    return this.Uc(t);
  }, /**
  * Finds the index of the given batchId in the mutation queue. This operation
  * is O(1).
  *
  * @returns The computed index of the batch with the given batchId, based on
  * the state of the queue. Note this index can be negative if the requested
  * batchId has already been remvoed from the queue or past the end of the
  * queue if the batchId is larger than the last added batch.
  */
  t.prototype.Uc = function (t) {
    return 0 === this.zo.length ? 0 : t - this.zo[0].batchId;
  }, /**
  * A version of lookupMutationBatch that doesn't return a promise, this makes
  * other functions that uses this code easier to read and more efficent.
  */
  t.prototype.qc = function (t) {
    var e = this.Uc(t);
    return e < 0 || e >= this.zo.length ? null : this.zo[e];
  }, t);
})(), _o = /** @class*/
(function () {
  /**
  * @param sizer - Used to assess the size of a document. For eager GC, this is
  * expected to just return 0 to avoid unnecessarily doing the work of
  * calculating the size.
  */
  function t(t, e) {
    (this.Ei = t, this.Wc = e, /** Underlying cache of documents and their read times.*/
    this.docs = new rn(tt.H), /** Size of all cached documents.*/
    this.size = 0);
  }
  return (t.prototype.ai = function (t, e, n) {
    var r = e.key, i = this.docs.get(r), o = i ? i.size : 0, u = this.Wc(e);
    return (this.docs = this.docs.zt(r, {
      hi: e,
      size: u,
      readTime: n
    }), this.size += u - o, this.Ei.qs(t, r.path.X()));
  }, /**
  * Removes the specified entry from the cache and updates the cache size as appropriate.
  *
  * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
  * returned by `newChangeBuffer()`.
  */
  t.prototype.li = function (t) {
    var e = this.docs.get(t);
    e && (this.docs = this.docs.remove(t), this.size -= e.size);
  }, t.prototype._i = function (t, e) {
    var n = this.docs.get(e);
    return lr.resolve(n ? n.hi : null);
  }, t.prototype.getEntries = function (t, e) {
    var n = this, r = fn();
    return (e.forEach(function (t) {
      var e = n.docs.get(t);
      r = r.zt(t, e ? e.hi : null);
    }), lr.resolve(r));
  }, t.prototype.Kr = function (t, e, n) {
    for (var r = pn(), i = new tt(e.path.child("")), o = this.docs.ee(i); // Documents are ordered by key, so we can use a prefix scan to narrow down
    // the documents we need to match the query against.
    o.ce(); ) {
      var u = o.oe(), s = u.key, a = u.value, c = a.hi, h = a.readTime;
      if (!e.path.nt(s.path)) break;
      h._(n) <= 0 || c instanceof Pt && ve(e, c) && (r = r.zt(c.key, c));
    }
    return lr.resolve(r);
  }, t.prototype.jc = function (t, e) {
    return lr.forEach(this.docs, function (t) {
      return e(t);
    });
  }, t.prototype.Nr = function (t) {
    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
    // a separate changelog and does not need special handling for removals.
    return new Io(this);
  }, t.prototype.Or = function (t) {
    return lr.resolve(this.size);
  }, t);
})(), Io = /** @class*/
(function (t) {
  function e(e) {
    var n = this;
    return ((n = t.call(this) || this).jr = e, n);
  }
  return (_tslib.__extends(e, t), e.prototype.wi = function (t) {
    var e = this, n = [];
    return (this.ri.forEach(function (r, i) {
      i && i.hi ? n.push(e.jr.ai(t, i.hi, e.ci(r))) : e.jr.li(r);
    }), lr.Mn(n));
  }, e.prototype.fi = function (t, e) {
    return this.jr._i(t, e);
  }, e.prototype.di = function (t, e) {
    return this.jr.getEntries(t, e);
  }, e);
})(wi), Eo = /** @class*/
(function () {
  function t(t) {
    (this.persistence = t, /**
    * Maps a target to the data about that target
    */
    this.Gc = new gi(function (t) {
      return Ut(t);
    }, Mt), /** The last received snapshot version.*/
    this.lastRemoteSnapshotVersion = X.min(), /** The highest numbered target ID encountered.*/
    this.highestTargetId = 0, /** The highest sequence number encountered.*/
    this.zc = 0, /**
    * A ordered bidirectional mapping between documents and the remote target
    * IDs.
    */
    this.Hc = new go(), this.targetCount = 0, this.Jc = Di.Mi());
  }
  return (t.prototype.In = function (t, e) {
    return (this.Gc.forEach(function (t, n) {
      return e(n);
    }), lr.resolve());
  }, t.prototype.Qi = function (t) {
    return lr.resolve(this.lastRemoteSnapshotVersion);
  }, t.prototype.Ki = function (t) {
    return lr.resolve(this.zc);
  }, t.prototype.Bi = function (t) {
    return (this.highestTargetId = this.Jc.next(), lr.resolve(this.highestTargetId));
  }, t.prototype.Wi = function (t, e, n) {
    return (n && (this.lastRemoteSnapshotVersion = n), e > this.zc && (this.zc = e), lr.resolve());
  }, t.prototype.Gi = function (t) {
    this.Gc.set(t.target, t);
    var e = t.targetId;
    (e > this.highestTargetId && (this.Jc = new Di(e), this.highestTargetId = e), t.sequenceNumber > this.zc && (this.zc = t.sequenceNumber));
  }, t.prototype.ji = function (t, e) {
    return (this.Gi(e), this.targetCount += 1, lr.resolve());
  }, t.prototype.Hi = function (t, e) {
    return (this.Gi(e), lr.resolve());
  }, t.prototype.Ji = function (t, e) {
    return (this.Gc.delete(e.target), this.Hc.Fc(e.targetId), this.targetCount -= 1, lr.resolve());
  }, t.prototype.Xi = function (t, e, n) {
    var r = this, i = 0, o = [];
    return (this.Gc.forEach(function (u, s) {
      s.sequenceNumber <= e && null === n.get(s.targetId) && (r.Gc.delete(u), o.push(r.Yi(t, s.targetId)), i++);
    }), lr.Mn(o).next(function () {
      return i;
    }));
  }, t.prototype.Zi = function (t) {
    return lr.resolve(this.targetCount);
  }, t.prototype.tr = function (t, e) {
    var n = this.Gc.get(e) || null;
    return lr.resolve(n);
  }, t.prototype.er = function (t, e, n) {
    return (this.Hc.xc(e, n), lr.resolve());
  }, t.prototype.sr = function (t, e, n) {
    this.Hc.$c(e, n);
    var r = this.persistence.Ti, i = [];
    return (r && e.forEach(function (e) {
      i.push(r.Ni(t, e));
    }), lr.Mn(i));
  }, t.prototype.Yi = function (t, e) {
    return (this.Hc.Fc(e), lr.resolve());
  }, t.prototype.rr = function (t, e) {
    var n = this.Hc.kc(e);
    return lr.resolve(n);
  }, t.prototype.Fi = function (t, e) {
    return lr.resolve(this.Hc.Fi(e));
  }, t);
})(), To = /** @class*/
(function () {
  /**
  * The constructor accepts a factory for creating a reference delegate. This
  * allows both the delegate and this instance to have strong references to
  * each other without having nullable fields that would then need to be
  * checked or asserted on every access.
  */
  function t(t, e) {
    var n = this;
    (this.Yc = {}, this.so = new H(0), this.io = !1, this.io = !0, this.Ti = t(this), this._o = new Eo(this), this.Ei = new fi(), this.fo = (function (t, e) {
      return new _o(t, function (t) {
        return n.Ti.Xc(t);
      });
    })(this.Ei), this.Qt = new Zr(e), this.wo = new mo(this.Qt));
  }
  return (t.prototype.start = function () {
    return Promise.resolve();
  }, t.prototype.ko = function () {
    // No durable state to ensure is closed on shutdown.
    return (this.io = !1, Promise.resolve());
  }, Object.defineProperty(t.prototype, "Er", {
    get: function () {
      return this.io;
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.Po = function () {}, t.prototype.yo = function () {}, t.prototype.Ko = function () {
    return this.Ei;
  }, t.prototype.Qo = function (t) {
    var e = this.Yc[t.A()];
    return (e || (e = new bo(this.Ei, this.Ti), this.Yc[t.A()] = e), e);
  }, t.prototype.Sr = function () {
    return this._o;
  }, t.prototype.$r = function () {
    return this.fo;
  }, t.prototype.Wo = function () {
    return this.wo;
  }, t.prototype.runTransaction = function (t, e, n) {
    var r = this;
    N("MemoryPersistence", "Starting transaction:", t);
    var i = new No(this.so.next());
    return (this.Ti.Zc(), n(i).next(function (t) {
      return r.Ti.ta(i).next(function () {
        return t;
      });
    }).On().then(function (t) {
      return (i.Vs(), t);
    }));
  }, t.prototype.ea = function (t, e) {
    return lr.Ln(Object.values(this.Yc).map(function (n) {
      return function () {
        return n.Fi(t, e);
      };
    }));
  }, t);
})(), No = /** @class*/
(function (t) {
  function e(e) {
    var n = this;
    return ((n = t.call(this) || this).bs = e, n);
  }
  return (_tslib.__extends(e, t), e);
})(Nr), Ao = /** @class*/
(function () {
  function t(t) {
    (this.persistence = t, /** Tracks all documents that are active in Query views.*/
    this.na = new go(), /** The list of documents that are potentially GCed after each transaction.*/
    this.sa = null);
  }
  return (t.ia = function (e) {
    return new t(e);
  }, Object.defineProperty(t.prototype, "ra", {
    get: function () {
      if (this.sa) return this.sa;
      throw x();
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.nr = function (t, e, n) {
    return (this.na.nr(n, e), this.ra.delete(n.toString()), lr.resolve());
  }, t.prototype.ir = function (t, e, n) {
    return (this.na.ir(n, e), this.ra.add(n.toString()), lr.resolve());
  }, t.prototype.Ni = function (t, e) {
    return (this.ra.add(e.toString()), lr.resolve());
  }, t.prototype.removeTarget = function (t, e) {
    var n = this;
    this.na.Fc(e.targetId).forEach(function (t) {
      return n.ra.add(t.toString());
    });
    var r = this.persistence.Sr();
    return r.rr(t, e.targetId).next(function (t) {
      t.forEach(function (t) {
        return n.ra.add(t.toString());
      });
    }).next(function () {
      return r.Ji(t, e);
    });
  }, t.prototype.Zc = function () {
    this.sa = new Set();
  }, t.prototype.ta = function (t) {
    var e = this, n = this.persistence.$r().Nr();
    // Remove newly orphaned documents.
    return lr.forEach(this.ra, function (r) {
      var i = tt._t(r);
      return e.oa(t, i).next(function (t) {
        t || n.li(i);
      });
    }).next(function () {
      return (e.sa = null, n.apply(t));
    });
  }, t.prototype.Fr = function (t, e) {
    var n = this;
    return this.oa(t, e).next(function (t) {
      t ? n.ra.delete(e.toString()) : n.ra.add(e.toString());
    });
  }, t.prototype.Xc = function (t) {
    // For eager GC, we don't care about the document size, there are no size thresholds.
    return 0;
  }, t.prototype.oa = function (t, e) {
    var n = this;
    return lr.Ln([function () {
      return lr.resolve(n.na.Fi(e));
    }, function () {
      return n.persistence.Sr().Fi(t, e);
    }, function () {
      return n.persistence.ea(t, e);
    }]);
  }, t);
})();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A collection of references to a document from some kind of numbered entity
* (either a target ID or batch ID). As references are added to or removed from
* the set corresponding events are emitted to a registered garbage collector.
*
* Each reference is represented by a DocumentReference object. Each of them
* contains enough information to uniquely identify the reference. They are all
* stored primarily in a set sorted by key. A document is considered garbage if
* there's no references in that set (this can be efficiently checked thanks to
* sorting by key).
*
* ReferenceSet also keeps a secondary set that contains references sorted by
* IDs. This one is used to efficiently implement removal of all references by
* some target ID.
*/
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
// The format of the LocalStorage key that stores the client state is:
// firestore_clients_<persistence_prefix>_<instance_key>
/** Assembles the key for a client state in WebStorage*/
function Do(t, e) {
  return "firestore_clients_" + t + "_" + e;
}
// The format of the WebStorage key that stores the mutation state is:
// firestore_mutations_<persistence_prefix>_<batch_id>
// (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.
/** Assembles the key for a mutation batch in WebStorage*/
function So(t, e, n) {
  var r = "firestore_mutations_" + t + "_" + n;
  return (e.m() && (r += "_" + e.uid), r);
}
// The format of the WebStorage key that stores a query target's metadata is:
// firestore_targets_<persistence_prefix>_<target_id>
/** Assembles the key for a query state in WebStorage*/
function xo(t, e) {
  return "firestore_targets_" + t + "_" + e;
}
// The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
// firestore_online_state_<persistence_prefix>
/**
* Holds the state of a mutation batch, including its user ID, batch ID and
* whether the batch is 'pending', 'acknowledged' or 'rejected'.
*/
// Visible for testing
var ko = /** @class*/
(function () {
  function t(t, e, n, r) {
    (this.user = t, this.batchId = e, this.state = n, this.error = r);
  }
  return (t.ca = function (e, n, r) {
    var i, o = JSON.parse(r), u = "object" == typeof o && -1 !== ["pending", "acknowledged", "rejected"].indexOf(o.state) && (void 0 === o.error || "object" == typeof o.error);
    return (u && o.error && ((u = "string" == typeof o.error.message && "string" == typeof o.error.code) && (i = new q(o.error.code, o.error.message))), u ? new t(e, n, o.state, i) : (A("SharedClientState", "Failed to parse mutation state for ID '" + n + "': " + r), null));
  }, t.prototype.aa = function () {
    var t = {
      state: this.state,
      updateTimeMs: Date.now()
    };
    return (this.error && (t.error = {
      code: this.error.code,
      message: this.error.message
    }), JSON.stringify(t));
  }, t);
})(), Oo = /** @class*/
(function () {
  function t(t, e, n) {
    (this.targetId = t, this.state = e, this.error = n);
  }
  return (t.ca = function (e, n) {
    var r, i = JSON.parse(n), o = "object" == typeof i && -1 !== ["not-current", "current", "rejected"].indexOf(i.state) && (void 0 === i.error || "object" == typeof i.error);
    return (o && i.error && ((o = "string" == typeof i.error.message && "string" == typeof i.error.code) && (r = new q(i.error.code, i.error.message))), o ? new t(e, i.state, r) : (A("SharedClientState", "Failed to parse target state for ID '" + e + "': " + n), null));
  }, t.prototype.aa = function () {
    var t = {
      state: this.state,
      updateTimeMs: Date.now()
    };
    return (this.error && (t.error = {
      code: this.error.code,
      message: this.error.message
    }), JSON.stringify(t));
  }, t);
})(), Po = /** @class*/
(function () {
  function t(t, e) {
    (this.clientId = t, this.activeTargetIds = e);
  }
  return (t.ca = function (e, n) {
    for (var r = JSON.parse(n), i = "object" == typeof r && r.activeTargetIds instanceof Array, o = wn(), u = 0; i && u < r.activeTargetIds.length; ++u) (i = dt(r.activeTargetIds[u]), o = o.add(r.activeTargetIds[u]));
    return i ? new t(e, o) : (A("SharedClientState", "Failed to parse client data for instance '" + e + "': " + n), null);
  }, t);
})(), Vo = /** @class*/
(function () {
  function t(t, e) {
    (this.clientId = t, this.onlineState = e);
  }
  return (t.ca = function (e) {
    var n = JSON.parse(e);
    return "object" == typeof n && -1 !== ["Unknown", "Online", "Offline"].indexOf(n.onlineState) && "string" == typeof n.clientId ? new t(n.clientId, n.onlineState) : (A("SharedClientState", "Failed to parse online state: " + e), null);
  }, t);
})(), Co = /** @class*/
(function () {
  function t() {
    this.activeTargetIds = wn();
  }
  return (t.prototype.ua = function (t) {
    this.activeTargetIds = this.activeTargetIds.add(t);
  }, t.prototype.ha = function (t) {
    this.activeTargetIds = this.activeTargetIds.delete(t);
  }, /**
  * Converts this entry into a JSON-encoded format we can use for WebStorage.
  * Does not encode `clientId` as it is part of the key in WebStorage.
  */
  t.prototype.aa = function () {
    var t = {
      activeTargetIds: this.activeTargetIds.it(),
      updateTimeMs: Date.now()
    };
    return JSON.stringify(t);
  }, t);
})(), Lo = /** @class*/
(function () {
  function t(t, e, n, r, i) {
    (this.window = t, this.Zr = e, this.persistenceKey = n, this.la = r, this._a = null, this.fa = null, this.k = null, this.da = this.wa.bind(this), this.Ea = new rn(C), this.Er = !1, /**
    * Captures WebStorage events that occur before `start()` is called. These
    * events are replayed once `WebStorageSharedClientState` is started.
    */
    this.Ta = []);
    // Escape the special characters mentioned here:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
    var o = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    (this.storage = this.window.localStorage, this.currentUser = i, this.Ia = Do(this.persistenceKey, this.la), this.ma = /** Assembles the key for the current sequence number.*/
    (function (t) {
      return "firestore_sequence_number_" + t;
    })(this.persistenceKey), this.Ea = this.Ea.zt(this.la, new Co()), this.Aa = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), this.Ra = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.Pa = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), this.ya = /** Assembles the key for the online state of the primary tab.*/
    (function (t) {
      return "firestore_online_state_" + t;
    })(this.persistenceKey), this.ga = (function (t) {
      return "firestore_bundle_loaded_" + t;
    })(this.persistenceKey), // Rather than adding the storage observer during start(), we add the
    // storage observer during initialization. This ensures that we collect
    // events before other components populate their initial state (during their
    // respective start() calls). Otherwise, we might for example miss a
    // mutation that is added after LocalStore's start() processed the existing
    // mutations but before we observe WebStorage events.
    this.window.addEventListener("storage", this.da));
  }
  /** Returns 'true' if WebStorage is available in the current environment.*/
  return (t.Kn = function (t) {
    return !(!t || !t.localStorage);
  }, t.prototype.start = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t, e, n, r, i, o, u, s, a, c, h, f = this;
      return _tslib.__generator(this, function (l) {
        switch (l.label) {
          case 0:
            return [4, /*yield*/
            this._a.Uo()];
          case 1:
            for ((t = l.sent(), e = 0, n = t); e < n.length; e++) (r = n[e]) !== this.la && (i = this.getItem(Do(this.persistenceKey, r))) && (o = Po.ca(r, i)) && (this.Ea = this.Ea.zt(o.clientId, o));
            for ((this.Va(), (u = this.storage.getItem(this.ya)) && (s = this.pa(u)) && this.ba(s), a = 0, c = this.Ta); a < c.length; a++) (h = c[a], this.wa(h));
            return (this.Ta = [], // Register a window unload hook to remove the client metadata entry from
            // WebStorage even if `shutdown()` was not called.
            this.window.addEventListener("unload", function () {
              return f.ko();
            }), this.Er = !0, [2]);
        }
      });
    });
  }, t.prototype.B = function (t) {
    this.setItem(this.ma, JSON.stringify(t));
  }, t.prototype.va = function () {
    return this.Sa(this.Ea);
  }, t.prototype.Da = function (t) {
    var e = !1;
    return (this.Ea.forEach(function (n, r) {
      r.activeTargetIds.has(t) && (e = !0);
    }), e);
  }, t.prototype.Ca = function (t) {
    this.xa(t, "pending");
  }, t.prototype.Na = function (t, e, n) {
    (this.xa(t, e, n), // Once a final mutation result is observed by other clients, they no longer
    // access the mutation's metadata entry. Since WebStorage replays events
    // in order, it is safe to delete the entry right after updating it.
    this.$a(t));
  }, t.prototype.Fa = function (t) {
    var e = "not-current";
    // Lookup an existing query state if the target ID was already registered
    // by another tab
    if (this.Da(t)) {
      var n = this.storage.getItem(xo(this.persistenceKey, t));
      if (n) {
        var r = Oo.ca(t, n);
        r && (e = r.state);
      }
    }
    return (this.Oa.ua(t), this.Va(), e);
  }, t.prototype.ka = function (t) {
    (this.Oa.ha(t), this.Va());
  }, t.prototype.Ma = function (t) {
    return this.Oa.activeTargetIds.has(t);
  }, t.prototype.La = function (t) {
    this.removeItem(xo(this.persistenceKey, t));
  }, t.prototype.Ba = function (t, e, n) {
    this.qa(t, e, n);
  }, t.prototype.Ua = function (t, e, n) {
    var r = this;
    (e.forEach(function (t) {
      r.$a(t);
    }), this.currentUser = t, n.forEach(function (t) {
      r.Ca(t);
    }));
  }, t.prototype.Qa = function (t) {
    this.Ka(t);
  }, t.prototype.Wa = function () {
    this.ja();
  }, t.prototype.ko = function () {
    this.Er && (this.window.removeEventListener("storage", this.da), this.removeItem(this.Ia), this.Er = !1);
  }, t.prototype.getItem = function (t) {
    var e = this.storage.getItem(t);
    return (N("SharedClientState", "READ", t, e), e);
  }, t.prototype.setItem = function (t, e) {
    (N("SharedClientState", "SET", t, e), this.storage.setItem(t, e));
  }, t.prototype.removeItem = function (t) {
    (N("SharedClientState", "REMOVE", t), this.storage.removeItem(t));
  }, t.prototype.wa = function (t) {
    var e = this, n = t;
    // Note: The function is typed to take Event to be interface-compatible with
    // `Window.addEventListener`.
    if (n.storageArea === this.storage) {
      if ((N("SharedClientState", "EVENT", n.key, n.newValue), n.key === this.Ia)) return void A("Received WebStorage notification for local change. Another client might have garbage-collected our state");
      this.Zr.po(function () {
        return _tslib.__awaiter(e, void 0, void 0, function () {
          var t, e, r, i, o, u;
          return _tslib.__generator(this, function (s) {
            if (this.Er) {
              if (null !== n.key) if (this.Aa.test(n.key)) {
                if (null == n.newValue) return (t = this.Ga(n.key), [2, /*return*/
                this.za(t, null)]);
                if (e = this.Ha(n.key, n.newValue)) return [2, /*return*/
                this.za(e.clientId, e)];
              } else if (this.Ra.test(n.key)) {
                if (null !== n.newValue && (r = this.Ja(n.key, n.newValue))) return [2, /*return*/
                this.Ya(r)];
              } else if (this.Pa.test(n.key)) {
                if (null !== n.newValue && (i = this.Xa(n.key, n.newValue))) return [2, /*return*/
                this.Za(i)];
              } else if (n.key === this.ya) {
                if (null !== n.newValue && (o = this.pa(n.newValue))) return [2, /*return*/
                this.ba(o)];
              } else if (n.key === this.ma) (u = (function (t) {
                var e = H.q;
                if (null != t) try {
                  var n = JSON.parse(t);
                  (k("number" == typeof n), e = n);
                } catch (t) {
                  A("SharedClientState", "Failed to read sequence number from WebStorage", t);
                }
                return e;
              })(n.newValue)) !== H.q && this.k(u); else if (n.key === this.ga) return [2, /*return*/
              this._a.tu()];
            } else this.Ta.push(n);
            return [2];
          });
        });
      });
    }
  }, Object.defineProperty(t.prototype, "Oa", {
    get: function () {
      return this.Ea.get(this.la);
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.Va = function () {
    this.setItem(this.Ia, this.Oa.aa());
  }, t.prototype.xa = function (t, e, n) {
    var r = new ko(this.currentUser, t, e, n), i = So(this.persistenceKey, this.currentUser, t);
    this.setItem(i, r.aa());
  }, t.prototype.$a = function (t) {
    var e = So(this.persistenceKey, this.currentUser, t);
    this.removeItem(e);
  }, t.prototype.Ka = function (t) {
    var e = {
      clientId: this.la,
      onlineState: t
    };
    this.storage.setItem(this.ya, JSON.stringify(e));
  }, t.prototype.qa = function (t, e, n) {
    var r = xo(this.persistenceKey, t), i = new Oo(t, e, n);
    this.setItem(r, i.aa());
  }, t.prototype.ja = function () {
    this.setItem(this.ga, "value-not-used");
  }, /**
  * Parses a client state key in WebStorage. Returns null if the key does not
  * match the expected key format.
  */
  t.prototype.Ga = function (t) {
    var e = this.Aa.exec(t);
    return e ? e[1] : null;
  }, /**
  * Parses a client state in WebStorage. Returns 'null' if the value could not
  * be parsed.
  */
  t.prototype.Ha = function (t, e) {
    var n = this.Ga(t);
    return Po.ca(n, e);
  }, /**
  * Parses a mutation batch state in WebStorage. Returns 'null' if the value
  * could not be parsed.
  */
  t.prototype.Ja = function (t, e) {
    var n = this.Ra.exec(t), r = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
    return ko.ca(new j(i), r, e);
  }, /**
  * Parses a query target state from WebStorage. Returns 'null' if the value
  * could not be parsed.
  */
  t.prototype.Xa = function (t, e) {
    var n = this.Pa.exec(t), r = Number(n[1]);
    return Oo.ca(r, e);
  }, /**
  * Parses an online state from WebStorage. Returns 'null' if the value
  * could not be parsed.
  */
  t.prototype.pa = function (t) {
    return Vo.ca(t);
  }, t.prototype.Ya = function (t) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (e) {
        return t.user.uid === this.currentUser.uid ? [2, /*return*/
        this._a.eu(t.batchId, t.state, t.error)] : (N("SharedClientState", "Ignoring mutation for non-active user " + t.user.uid), [2]);
      });
    });
  }, t.prototype.Za = function (t) {
    return this._a.nu(t.targetId, t.state, t.error);
  }, t.prototype.za = function (t, e) {
    var n = this, r = e ? this.Ea.zt(t, e) : this.Ea.remove(t), i = this.Sa(this.Ea), o = this.Sa(r), u = [], s = [];
    return (o.forEach(function (t) {
      i.has(t) || u.push(t);
    }), i.forEach(function (t) {
      o.has(t) || s.push(t);
    }), this._a.su(u, s).then(function () {
      n.Ea = r;
    }));
  }, t.prototype.ba = function (t) {
    // We check whether the client that wrote this online state is still active
    // by comparing its client ID to the list of clients kept active in
    // IndexedDb. If a client does not update their IndexedDb client state
    // within 5 seconds, it is considered inactive and we don't emit an online
    // state event.
    this.Ea.get(t.clientId) && this.fa(t.onlineState);
  }, t.prototype.Sa = function (t) {
    var e = wn();
    return (t.forEach(function (t, n) {
      e = e.Pe(n.activeTargetIds);
    }), e);
  }, t);
})(), Ro = /** @class*/
(function () {
  function t() {
    (this.iu = new Co(), this.ru = {}, this.fa = null, this.k = null);
  }
  return (t.prototype.Ca = function (t) {}, t.prototype.Na = function (t, e, n) {}, t.prototype.Fa = function (t) {
    return (this.iu.ua(t), this.ru[t] || "not-current");
  }, t.prototype.Ba = function (t, e, n) {
    this.ru[t] = e;
  }, t.prototype.ka = function (t) {
    this.iu.ha(t);
  }, t.prototype.Ma = function (t) {
    return this.iu.activeTargetIds.has(t);
  }, t.prototype.La = function (t) {
    delete this.ru[t];
  }, t.prototype.va = function () {
    return this.iu.activeTargetIds;
  }, t.prototype.Da = function (t) {
    return this.iu.activeTargetIds.has(t);
  }, t.prototype.start = function () {
    return (this.iu = new Co(), Promise.resolve());
  }, t.prototype.Ua = function (t, e, n) {}, t.prototype.Qa = function (t) {}, t.prototype.ko = function () {}, t.prototype.B = function (t) {}, t.prototype.Wa = function () {}, t);
})(), Uo = /** @class*/
(function () {
  function t() {}
  return (t.prototype.ou = function (t) {}, t.prototype.ko = function () {}, t);
})(), Mo = /** @class*/
(function () {
  function t() {
    var t = this;
    (this.cu = function () {
      return t.au();
    }, this.uu = function () {
      return t.hu();
    }, this.lu = [], this._u());
  }
  return (t.prototype.ou = function (t) {
    this.lu.push(t);
  }, t.prototype.ko = function () {
    (window.removeEventListener("online", this.cu), window.removeEventListener("offline", this.uu));
  }, t.prototype._u = function () {
    (window.addEventListener("online", this.cu), window.addEventListener("offline", this.uu));
  }, t.prototype.au = function () {
    N("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
    for (var t = 0, e = this.lu; t < e.length; t++) {
      (0, e[t])(0);
    }
  }, t.prototype.hu = function () {
    N("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
    for (var t = 0, e = this.lu; t < e.length; t++) {
      (0, e[t])(1);
    }
  }, // TODO(chenbrian): Consider passing in window either into this component or
  // here for testing via FakeWindow.
  /** Checks that all used attributes of window are available.*/
  t.Kn = function () {
    return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
  }, t);
})(), qo = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery"
}, Fo = /** @class*/
(function () {
  function t(t) {
    (this.fu = t.fu, this.du = t.du);
  }
  return (t.prototype.wu = function (t) {
    this.Eu = t;
  }, t.prototype.Tu = function (t) {
    this.Iu = t;
  }, t.prototype.onMessage = function (t) {
    this.mu = t;
  }, t.prototype.close = function () {
    this.du();
  }, t.prototype.send = function (t) {
    this.fu(t);
  }, t.prototype.Au = function () {
    this.Eu();
  }, t.prototype.Ru = function (t) {
    this.Iu(t);
  }, t.prototype.Pu = function (t) {
    this.mu(t);
  }, t);
})(), jo = /** @class*/
(function (t) {
  function e(e) {
    var n = this;
    return ((n = t.call(this, e) || this).forceLongPolling = e.forceLongPolling, n.i = e.i, n);
  }
  /**
  * Base class for all Rest-based connections to the backend (WebChannel and
  * HTTP).
  */
  return (_tslib.__extends(e, t), e.prototype.Su = function (t, e, n, r) {
    return new Promise(function (i, o) {
      var u = new _firebaseWebchannelWrapper.XhrIo();
      u.listenOnce(_firebaseWebchannelWrapper.EventType.COMPLETE, function () {
        try {
          switch (u.getLastErrorCode()) {
            case _firebaseWebchannelWrapper.ErrorCode.NO_ERROR:
              var e = u.getResponseJson();
              (N("Connection", "XHR received:", JSON.stringify(e)), i(e));
              break;
            case _firebaseWebchannelWrapper.ErrorCode.TIMEOUT:
              (N("Connection", 'RPC "' + t + '" timed out'), o(new q(M.DEADLINE_EXCEEDED, "Request time out")));
              break;
            case _firebaseWebchannelWrapper.ErrorCode.HTTP_ERROR:
              var n = u.getStatus();
              if ((N("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", u.getResponseText()), n > 0)) {
                var r = u.getResponseJson().error;
                if (r && r.status && r.message) {
                  var s = (function (t) {
                    var e = t.toLowerCase().replace(/_/g, "-");
                    return Object.values(M).indexOf(e) >= 0 ? e : M.UNKNOWN;
                  })(r.status);
                  o(new q(s, r.message));
                } else o(new q(M.UNKNOWN, "Server responded with status " + u.getStatus()));
              } else // If we received an HTTP_ERROR but there's no status code,
              // it's most probably a connection issue
              o(new q(M.UNAVAILABLE, "Connection failed."));
              break;
            default:
              x();
          }
        } finally {
          N("Connection", 'RPC "' + t + '" completed.');
        }
      });
      var s = JSON.stringify(r);
      u.send(e, "POST", s, n, 15);
    });
  }, e.prototype.Cu = function (t, e) {
    var n = [this.gu, "/", "google.firestore.v1.Firestore", "/", t, "/channel"], c = _firebaseWebchannelWrapper.createWebChannelTransport(), h = _firebaseWebchannelWrapper.getStatEventTarget(), f = {
      // Required for backend stickiness, routing behavior is based on this
      // parameter.
      httpSessionIdParam: "gsessionid",
      initMessageHeaders: {},
      messageUrlParams: {
        // This param is used to improve routing and project isolation by the
        // backend and must be included in every request.
        database: "projects/" + this.t.projectId + "/databases/" + this.t.database
      },
      sendRawJson: !0,
      supportsCrossDomainXhr: !0,
      internalChannelParams: {
        // Override the default timeout (randomized between 10-20 seconds) since
        // a large write batch on a slow internet connection may take a long
        // time to send to the backend. Rather than have WebChannel impose a
        // tight timeout which could lead to infinite timeouts and retries, we
        // set it very large (5-10 minutes) and rely on the browser's builtin
        // timeouts to kick in if the request isn't working.
        forwardChannelRequestTimeoutMs: 6e5
      },
      forceLongPolling: this.forceLongPolling,
      detectBufferingProxy: this.i
    };
    (this.vu(f.initMessageHeaders, e), // Sending the custom headers we just added to request.initMessageHeaders
    // (Authorization, etc.) will trigger the browser to make a CORS preflight
    // request because the XHR will no longer meet the criteria for a "simple"
    // CORS request:
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
    // Therefore to avoid the CORS preflight request (an extra network
    // roundtrip), we use the httpHeadersOverwriteParam option to specify that
    // the headers should instead be encoded into a special "$httpHeaders" query
    // parameter, which is recognized by the webchannel backend. This is
    // formally defined here:
    // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
    // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
    // doesn't have an Origin header. So we have to exclude a few browser environments that are
    // known to (sometimes) not include an Origin. See
    // https://github.com/firebase/firebase-js-sdk/issues/1491.
    _firebaseUtil.isMobileCordova() || _firebaseUtil.isReactNative() || _firebaseUtil.isElectron() || _firebaseUtil.isIE() || _firebaseUtil.isUWP() || _firebaseUtil.isBrowserExtension() || (f.httpHeadersOverwriteParam = "$httpHeaders"));
    var m = n.join("");
    N("Connection", "Creating WebChannel: " + m, f);
    var g = c.createWebChannel(m, f), w = !1, b = !1, _ = new Fo({
      fu: function (t) {
        b ? N("Connection", "Not sending because WebChannel is closed:", t) : (w || (N("Connection", "Opening WebChannel transport."), g.open(), w = !0), N("Connection", "WebChannel sending:", t), g.send(t));
      },
      du: function () {
        return g.close();
      }
    }), I = function (t, e, n) {
      // TODO(dimond): closure typing seems broken because WebChannel does
      // not implement goog.events.Listenable
      t.listen(e, function (t) {
        try {
          n(t);
        } catch (t) {
          setTimeout(function () {
            throw t;
          }, 0);
        }
      });
    };
    // WebChannel supports sending the first message with the handshake - saving
    // a network round trip. However, it will have to call send in the same
    // JS event loop as open. In order to enforce this, we delay actually
    // opening the WebChannel until send is called. Whether we have called
    // open is tracked with this variable.
    // Closure events are guarded and exceptions are swallowed, so catch any
    // exception and rethrow using a setTimeout so they become visible again.
    // Note that eventually this function could go away if we are confident
    // enough the code is exception free.
    return (I(g, _firebaseWebchannelWrapper.WebChannel.EventType.OPEN, function () {
      b || N("Connection", "WebChannel transport opened.");
    }), I(g, _firebaseWebchannelWrapper.WebChannel.EventType.CLOSE, function () {
      b || (b = !0, N("Connection", "WebChannel transport closed"), _.Ru());
    }), I(g, _firebaseWebchannelWrapper.WebChannel.EventType.ERROR, function (t) {
      b || (b = !0, D("Connection", "WebChannel transport errored:", t), _.Ru(new q(M.UNAVAILABLE, "The operation could not be completed")));
    }), I(g, _firebaseWebchannelWrapper.WebChannel.EventType.MESSAGE, function (t) {
      var e;
      if (!b) {
        var n = t.data[0];
        k(!!n);
        // TODO(b/35143891): There is a bug in One Platform that caused errors
        // (and only errors) to be wrapped in an extra array. To be forward
        // compatible with the bug we need to check either condition. The latter
        // can be removed once the fix has been rolled out.
        // Use any because msgData.error is not typed.
        var r = n, i = r.error || (null === (e = r[0]) || void 0 === e ? void 0 : e.error);
        if (i) {
          N("Connection", "WebChannel received error:", i);
          // error.status will be a string like 'OK' or 'NOT_FOUND'.
          var o = i.status, u = /**
          * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
          *
          * @returns The Code equivalent to the given status string or undefined if
          *     there is no match.
          */
          (function (t) {
            // lookup by string
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var e = We[t];
            if (void 0 !== e) return nn(e);
          })(o), s = i.message;
          (void 0 === u && (u = M.INTERNAL, s = "Unknown error status: " + o + " with message " + i.message), // Mark closed so no further events are propagated
          b = !0, _.Ru(new q(u, s)), g.close());
        } else (N("Connection", "WebChannel received:", n), _.Pu(n));
      }
    }), I(h, _firebaseWebchannelWrapper.Event.STAT_EVENT, function (t) {
      t.stat === _firebaseWebchannelWrapper.Stat.PROXY ? N("Connection", "Detected buffering proxy") : t.stat === _firebaseWebchannelWrapper.Stat.NOPROXY && N("Connection", "Detected no buffering proxy");
    }), setTimeout(function () {
      // Technically we could/should wait for the WebChannel opened event,
      // but because we want to send the first message with the WebChannel
      // handshake we pretend the channel opened here (asynchronously), and
      // then delay the actual open until the first message is sent.
      _.Au();
    }, 0), _);
  }, e);
})(/** @class*/
(function () {
  function t(t) {
    (this.yu = t, this.t = t.t);
    var e = t.ssl ? "https" : "http";
    (this.gu = e + "://" + t.host, this.Vu = "projects/" + this.t.projectId + "/databases/" + this.t.database + "/documents");
  }
  return (t.prototype.pu = function (t, e, n, r) {
    var i = this.bu(t, e);
    N("RestConnection", "Sending: ", i, n);
    var o = {};
    return (this.vu(o, r), this.Su(t, i, o, n).then(function (t) {
      return (N("RestConnection", "Received: ", t), t);
    }, function (e) {
      throw (D("RestConnection", t + " failed with error: ", e, "url: ", i, "request:", n), e);
    }));
  }, t.prototype.Du = function (t, e, n, r) {
    // The REST API automatically aggregates all of the streamed results, so we
    // can just use the normal invoke() method.
    return this.pu(t, e, n, r);
  }, /**
  * Modifies the headers for a request, adding any authorization token if
  * present and any additional headers for the request.
  */
  t.prototype.vu = function (t, e) {
    if ((t["X-Goog-Api-Client"] = "gl-js/ fire/8.2.9", // Content-Type: text/plain will avoid preflight requests which might
    // mess with CORS and redirects by proxies. If we add custom headers
    // we will need to change this code to potentially use the $httpOverwrite
    // parameter supported by ESF to avoid triggering preflight requests.
    t["Content-Type"] = "text/plain", e)) for (var n in e.g) e.g.hasOwnProperty(n) && (t[n] = e.g[n]);
  }, t.prototype.bu = function (t, e) {
    var n = qo[t];
    return this.gu + "/v1/" + e + ":" + n;
  }, t);
})());
/**
* Holds the state of a query target, including its target ID and whether the
* target is 'not-current', 'current' or 'rejected'.
*/
// Visible for testing
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Initializes the WebChannelConnection for the browser.*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** The Platform's 'window' implementation or null if not available.*/
function zo() {
  // `window` is not always available, e.g. in ReactNative and WebWorkers.
  // eslint-disable-next-line no-restricted-globals
  return "undefined" != typeof window ? window : null;
}
/** The Platform's 'document' implementation or null if not available.*/
function Go() {
  // `document` is not always available, e.g. in ReactNative and WebWorkers.
  // eslint-disable-next-line no-restricted-globals
  return "undefined" != typeof document ? document : null;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function Bo(t) {
  return new Cn(t, /*useProto3Json=*/
  !0);
}
/**
* An instance of the Platform's 'TextEncoder' implementation.
*/
/**
* A helper for running delayed tasks following an exponential backoff curve
* between attempts.
*
* Each delay is made up of a "base" delay which follows the exponential
* backoff curve, and a +/- 50% "jitter" that is calculated and added to the
* base delay. This prevents clients from accidentally synchronizing their
* delays causing spikes of load to the backend.
*/
var Qo = /** @class*/
(function () {
  function t(/**
  * The AsyncQueue to run backoff operations on.
  */
  t, /**
  * The ID to use when scheduling backoff operations on the AsyncQueue.
  */
  e, /**
  * The initial delay (used as the base delay on the first retry attempt).
  * Note that jitter will still be applied, so the actual delay could be as
  * little as 0.5*initialDelayMs.
  */
  n, /**
  * The initial delay (used as the base delay on the first retry attempt).
  * Note that jitter will still be applied, so the actual delay could be as
  * little as 0.5*initialDelayMs.
  */
  /**
  * The multiplier to use to determine the extended base delay after each
  * attempt.
  */
  r, /**
  * The maximum base delay after which no further backoff is performed.
  * Note that jitter will still be applied, so the actual delay could be as
  * much as 1.5*maxDelayMs.
  */
  i) {
    (void 0 === n && (n = 1e3), void 0 === r && (r = 1.5), void 0 === i && (i = 6e4), this.Zr = t, this.fs = e, this.xu = n, this.Nu = r, this.$u = i, this.Fu = 0, this.Ou = null, /** The last backoff attempt, as epoch milliseconds.*/
    this.ku = Date.now(), this.reset());
  }
  /**
  * Resets the backoff delay.
  *
  * The very next backoffAndWait() will have no delay. If it is called again
  * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
  * subsequent ones will increase according to the backoffFactor.
  */
  return (t.prototype.reset = function () {
    this.Fu = 0;
  }, /**
  * Resets the backoff delay to the maximum delay (e.g. for use after a
  * RESOURCE_EXHAUSTED error).
  */
  t.prototype.Mu = function () {
    this.Fu = this.$u;
  }, /**
  * Returns a promise that resolves after currentDelayMs, and increases the
  * delay for any subsequent attempts. If there was a pending backoff operation
  * already, it will be canceled.
  */
  t.prototype.Lu = function (t) {
    var e = this;
    // Cancel any pending backoff operation.
    this.cancel();
    // First schedule using the current base (which may be 0 and should be
    // honored as such).
    var n = Math.floor(this.Fu + this.Bu()), r = Math.max(0, Date.now() - this.ku), i = Math.max(0, n - r);
    // Guard against lastAttemptTime being in the future due to a clock change.
    (i > 0 && N("ExponentialBackoff", "Backing off for " + i + " ms (base delay: " + this.Fu + " ms, delay with jitter: " + n + " ms, last attempt: " + r + " ms ago)"), this.Ou = this.Zr.Tr(this.fs, i, function () {
      return (e.ku = Date.now(), t());
    }), // Apply backoff factor to determine next delay and ensure it is within
    // bounds.
    this.Fu *= this.Nu, this.Fu < this.xu && (this.Fu = this.xu), this.Fu > this.$u && (this.Fu = this.$u));
  }, t.prototype.qu = function () {
    null !== this.Ou && (this.Ou.Rs(), this.Ou = null);
  }, t.prototype.cancel = function () {
    null !== this.Ou && (this.Ou.cancel(), this.Ou = null);
  }, /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2]*/
  t.prototype.Bu = function () {
    return (Math.random() - .5) * this.Fu;
  }, t);
})(), Yo = /** @class*/
(function () {
  function t(t, e, n, r, i, o) {
    (this.Zr = t, this.Uu = n, this.Qu = r, this.Ku = i, this.listener = o, this.state = 0, /*Initial*/
    /**
    * A close count that's incremented every time the stream is closed; used by
    * getCloseGuardedDispatcher() to invalidate callbacks that happen after
    * close.
    */
    this.Wu = 0, this.ju = null, this.stream = null, this.Gu = new Qo(t, e));
  }
  return (t.prototype.zu = function () {
    return 1 === /*Starting*/
    this.state || 2 === /*Open*/
    this.state || 4 === /*Backoff*/
    this.state;
  }, /**
  * Returns true if the underlying RPC is open (the onOpen() listener has been
  * called) and the stream is ready for outbound requests.
  */
  t.prototype.Hu = function () {
    return 2 === /*Open*/
    this.state;
  }, /**
  * Starts the RPC. Only allowed if isStarted() returns false. The stream is
  * not immediately ready for use: onOpen() will be invoked when the RPC is
  * ready for outbound requests, at which point isOpen() will return true.
  *
  * When start returns, isStarted() will return true.
  */
  t.prototype.start = function () {
    3 !== /*Error*/
    this.state ? this.auth() : this.Ju();
  }, /**
  * Stops the RPC. This call is idempotent and allowed regardless of the
  * current isStarted() state.
  *
  * When stop returns, isStarted() and isOpen() will both return false.
  */
  t.prototype.stop = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (t) {
        switch (t.label) {
          case 0:
            return this.zu() ? [4, /*yield*/
            this.close(0)] : [3, /*break*/
            2];
          case 1:
            (t.sent(), t.label = 2);
          case 2:
            return [2];
        }
      });
    });
  }, /**
  * After an error the stream will usually back off on the next attempt to
  * start it. If the error warrants an immediate restart of the stream, the
  * sender can use this to indicate that the receiver should not back off.
  *
  * Each error will call the onClose() listener. That function can decide to
  * inhibit backoff if required.
  */
  t.prototype.Yu = function () {
    (this.state = 0, /*Initial*/
    this.Gu.reset());
  }, /**
  * Marks this stream as idle. If no further actions are performed on the
  * stream for one minute, the stream will automatically close itself and
  * notify the stream's onClose() handler with Status.OK. The stream will then
  * be in a !isStarted() state, requiring the caller to start the stream again
  * before further use.
  *
  * Only streams that are in state 'Open' can be marked idle, as all other
  * states imply pending network operations.
  */
  t.prototype.Xu = function () {
    var t = this;
    // Starts the idle time if we are in state 'Open' and are not yet already
    // running a timer (in which case the previous idle timeout still applies).
    this.Hu() && null === this.ju && (this.ju = this.Zr.Tr(this.Uu, 6e4, function () {
      return t.Zu();
    }));
  }, /** Sends a message to the underlying stream.*/
  t.prototype.th = function (t) {
    (this.eh(), this.stream.send(t));
  }, /** Called by the idle timer when the stream should close due to inactivity.*/
  t.prototype.Zu = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (t) {
        return this.Hu() ? [2, /*return*/
        this.close(0)] : [2];
      });
    });
  }, /** Marks the stream as active again.*/
  t.prototype.eh = function () {
    this.ju && (this.ju.cancel(), this.ju = null);
  }, /**
  * Closes the stream and cleans up as necessary:
  *
  * * closes the underlying GRPC stream;
  * * calls the onClose handler with the given 'error';
  * * sets internal stream state to 'finalState';
  * * adjusts the backoff timer based on the error
  *
  * A new stream can be opened by calling start().
  *
  * @param finalState - the intended state of the stream after closing.
  * @param error - the error the connection was closed with.
  */
  t.prototype.close = function (t, e) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (n) {
        switch (n.label) {
          case 0:
            // Notify the listener that the stream closed.
            // Cancel any outstanding timers (they're guaranteed not to execute).
            return (this.eh(), this.Gu.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
            // underlying stream), guaranteeing they won't execute.
            this.Wu++, 3 !== /*Error*/
            t ? // If this is an intentional close ensure we don't delay our next connection attempt.
            this.Gu.reset() : e && e.code === M.RESOURCE_EXHAUSTED ? // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
            (A(e.toString()), A("Using maximum backoff delay to prevent overloading the backend."), this.Gu.Mu()) : e && e.code === M.UNAUTHENTICATED && // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
            // just expired.
            this.Ku.p(), // Clean up the underlying stream because we are no longer interested in events.
            null !== this.stream && (this.nh(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
            // inhibit backoff or otherwise manipulate the state in its non-started state.
            this.state = t, [4, /*yield*/
            this.listener.Tu(e)]);
          case 1:
            // Cancel any outstanding timers (they're guaranteed not to execute).
            // Notify the listener that the stream closed.
            return (n.sent(), [2]);
        }
      });
    });
  }, /**
  * Can be overridden to perform additional cleanup before the stream is closed.
  * Calling super.tearDown() is not required.
  */
  t.prototype.nh = function () {}, t.prototype.auth = function () {
    var t = this;
    this.state = 1;
    var e = this.sh(this.Wu), n = this.Wu;
    // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
    this.Ku.getToken().then(function (e) {
      // Stream can be stopped while waiting for authentication.
      // TODO(mikelehen): We really should just use dispatchIfNotClosed
      // and let this dispatch onto the queue, but that opened a spec test can
      // of worms that I don't want to deal with in this PR.
      t.Wu === n && // Normally we'd have to schedule the callback on the AsyncQueue.
      // However, the following calls are safe to be called outside the
      // AsyncQueue since they don't chain asynchronous calls
      t.ih(e);
    }, function (n) {
      e(function () {
        var e = new q(M.UNKNOWN, "Fetching auth token failed: " + n.message);
        return t.rh(e);
      });
    });
  }, t.prototype.ih = function (t) {
    var e = this, n = this.sh(this.Wu);
    (this.stream = this.oh(t), this.stream.wu(function () {
      n(function () {
        return (e.state = 2, /*Open*/
        e.listener.wu());
      });
    }), this.stream.Tu(function (t) {
      n(function () {
        return e.rh(t);
      });
    }), this.stream.onMessage(function (t) {
      n(function () {
        return e.onMessage(t);
      });
    }));
  }, t.prototype.Ju = function () {
    var t = this;
    (this.state = 4, /*Backoff*/
    this.Gu.Lu(function () {
      return _tslib.__awaiter(t, void 0, void 0, function () {
        return _tslib.__generator(this, function (t) {
          return (this.state = 0, /*Initial*/
          this.start(), [2]);
        });
      });
    }));
  }, // Visible for tests
  t.prototype.rh = function (t) {
    // In theory the stream could close cleanly, however, in our current model
    // we never expect this to happen because if we stop a stream ourselves,
    // this callback will never be called. To prevent cases where we retry
    // without a backoff accidentally, we set the stream to error in all cases.
    return (N("PersistentStream", "close with error: " + t), this.stream = null, this.close(3, /*Error*/
    t));
  }, /**
  * Returns a "dispatcher" function that dispatches operations onto the
  * AsyncQueue but only runs them if closeCount remains unchanged. This allows
  * us to turn auth / stream callbacks into no-ops if the stream is closed /
  * re-opened, etc.
  */
  t.prototype.sh = function (t) {
    var e = this;
    return function (n) {
      e.Zr.Ps(function () {
        return e.Wu === t ? n() : (N("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve());
      });
    };
  }, t);
})(), Ho = /** @class*/
(function (t) {
  function e(e, n, r, i, o) {
    var u = this;
    return ((u = t.call(this, e, "listen_stream_connection_backoff", /*ListenStreamConnectionBackoff*/
    "listen_stream_idle", /*ListenStreamIdle*/
    n, r, o) || this).Qt = i, u);
  }
  return (_tslib.__extends(e, t), e.prototype.oh = function (t) {
    return this.Qu.Cu("Listen", t);
  }, e.prototype.onMessage = function (t) {
    // A successful response means the stream is healthy
    this.Gu.reset();
    var e = (function (t, e) {
      var n;
      if (("targetChange" in e)) {
        e.targetChange;
        // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
        // if unset
        var r = (function (t) {
          return "NO_CHANGE" === t ? 0 : /*NoChange*/
          "ADD" === t ? 1 : /*Added*/
          "REMOVE" === t ? 2 : /*Removed*/
          "CURRENT" === t ? 3 : /*Current*/
          "RESET" === t ? 4 : /*Reset*/
          x();
        })(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], o = (function (t, e) {
          return t.Bt ? (k(void 0 === e || "string" == typeof e), U.fromBase64String(e || "")) : (k(void 0 === e || e instanceof Uint8Array), U.fromUint8Array(e || new Uint8Array()));
        })(t, e.targetChange.resumeToken), u = (s = e.targetChange.cause) && (function (t) {
          var e = void 0 === t.code ? M.UNKNOWN : nn(t.code);
          return new q(e, t.message || "");
        })(s);
        n = new Dn(r, i, o, u || null);
      } else if (("documentChange" in e)) {
        (e.documentChange, (r = e.documentChange).document, r.document.name, r.document.updateTime, i = zn(t, r.document.name), o = Mn(r.document.updateTime));
        var s = new St({
          mapValue: {
            fields: r.document.fields
          }
        }), a = (u = new Pt(i, o, s, {}), r.targetIds || []), c = r.removedTargetIds || [];
        n = new Nn(a, c, u.key, u);
      } else if (("documentDelete" in e)) (e.documentDelete, (r = e.documentDelete).document, i = zn(t, r.document), o = r.readTime ? Mn(r.readTime) : X.min(), s = new Vt(i, o), u = r.removedTargetIds || [], n = new Nn([], u, s.key, s)); else if (("documentRemove" in e)) (e.documentRemove, (r = e.documentRemove).document, i = zn(t, r.document), o = r.removedTargetIds || [], n = new Nn([], o, i, null)); else {
        if (!(("filter" in e))) return x();
        e.filter;
        var h = e.filter;
        (h.targetId, r = h.count || 0, i = new tn(r), o = h.targetId, n = new An(o, i));
      }
      return n;
    })(this.Qt, t), n = (function (t) {
      // We have only reached a consistent snapshot for the entire stream if there
      // is a read_time set and it applies to all targets (i.e. the list of
      // targets is empty). The backend is guaranteed to send such responses.
      if (!(("targetChange" in t))) return X.min();
      var e = t.targetChange;
      return e.targetIds && e.targetIds.length ? X.min() : e.readTime ? Mn(e.readTime) : X.min();
    })(t);
    return this.listener.ah(e, n);
  }, /**
  * Registers interest in the results of the given target. If the target
  * includes a resumeToken it will be included in the request. Results that
  * affect the target will be streamed back as WatchChange messages that
  * reference the targetId.
  */
  e.prototype.uh = function (t) {
    var e = {};
    (e.database = Qn(this.Qt), e.addTarget = (function (t, e) {
      var n, r = e.target;
      return ((n = qt(r) ? {
        documents: Zn(t, r)
      } : {
        query: Jn(t, r)
      }).targetId = e.targetId, e.resumeToken.l() > 0 ? n.resumeToken = Rn(t, e.resumeToken) : e.Ot._(X.min()) > 0 && (// TODO(wuandy): Consider removing above check because it is most likely true.
      // Right now, many tests depend on this behaviour though (leaving min() out
      // of serialization).
      n.readTime = Ln(t, e.Ot.j())), n);
    })(this.Qt, t));
    var n = (function (t, e) {
      var n = (function (t, e) {
        switch (e) {
          case 0:
            /*Listen*/
            return null;
          case 1:
            /*ExistenceFilterMismatch*/
            return "existence-filter-mismatch";
          case 2:
            /*LimboResolution*/
            return "limbo-document";
          default:
            return x();
        }
      })(0, e.Ft);
      return null == n ? null : {
        "goog-listen-tags": n
      };
    })(this.Qt, t);
    (n && (e.labels = n), this.th(e));
  }, /**
  * Unregisters interest in the results of the target associated with the
  * given targetId.
  */
  e.prototype.hh = function (t) {
    var e = {};
    (e.database = Qn(this.Qt), e.removeTarget = t, this.th(e));
  }, e);
})(Yo), Ko = /** @class*/
(function (t) {
  function e(e, n, r, i, o) {
    var u = this;
    return ((u = t.call(this, e, "write_stream_connection_backoff", /*WriteStreamConnectionBackoff*/
    "write_stream_idle", /*WriteStreamIdle*/
    n, r, o) || this).Qt = i, u.lh = !1, u);
  }
  return (_tslib.__extends(e, t), Object.defineProperty(e.prototype, "_h", {
    /**
    * Tracks whether or not a handshake has been successfully exchanged and
    * the stream is ready to accept mutations.
    */
    get: function () {
      return this.lh;
    },
    enumerable: !1,
    configurable: !0
  }), // Override of PersistentStream.start
  e.prototype.start = function () {
    (this.lh = !1, this.lastStreamToken = void 0, t.prototype.start.call(this));
  }, e.prototype.nh = function () {
    this.lh && this.fh([]);
  }, e.prototype.oh = function (t) {
    return this.Qu.Cu("Write", t);
  }, e.prototype.onMessage = function (t) {
    if (// Always capture the last stream token.
    (k(!!t.streamToken), this.lastStreamToken = t.streamToken, this.lh)) {
      // A successful first write response means the stream is healthy,
      // Note, that we could consider a successful handshake healthy, however,
      // the write itself might be causing an error we want to back off from.
      this.Gu.reset();
      var e = (function (t, e) {
        return t && t.length > 0 ? (k(void 0 !== e), t.map(function (t) {
          return (function (t, e) {
            // NOTE: Deletes don't have an updateTime.
            var n = t.updateTime ? Mn(t.updateTime) : Mn(e);
            n.isEqual(X.min()) && (// The Firestore Emulator currently returns an update time of 0 for
            // deletes of non-existing documents (rather than null). This breaks the
            // test "get deleted doc while offline with source=cache" as NoDocuments
            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
            // TODO(#2149): Remove this when Emulator is fixed
            n = Mn(e));
            var r = null;
            return (t.transformResults && t.transformResults.length > 0 && (r = t.transformResults), new Le(n, r));
          })(t, e);
        })) : [];
      })(t.writeResults, t.commitTime), n = Mn(t.commitTime);
      return this.listener.dh(n, e);
    }
    // The first response is always the handshake response
    return (k(!t.writeResults || 0 === t.writeResults.length), this.lh = !0, this.listener.wh());
  }, /**
  * Sends an initial streamToken to the server, performing the handshake
  * required to make the StreamingWrite RPC work. Subsequent
  * calls should wait until onHandshakeComplete was called.
  */
  e.prototype.Eh = function () {
    // TODO(dimond): Support stream resumption. We intentionally do not set the
    // stream token on the handshake, ignoring any stream token we might have.
    var t = {};
    (t.database = Qn(this.Qt), this.th(t));
  }, /** Sends a group of mutations to the Firestore backend to apply.*/
  e.prototype.fh = function (t) {
    var e = this, n = {
      streamToken: this.lastStreamToken,
      writes: t.map(function (t) {
        return Xn(e.Qt, t);
      })
    };
    this.th(n);
  }, e);
})(Yo), Xo = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this) || this).credentials = e, i.Qu = n, i.Qt = r, i.Th = !1, i);
  }
  return (_tslib.__extends(e, t), e.prototype.Ih = function () {
    if (this.Th) throw new q(M.FAILED_PRECONDITION, "The client has already been terminated.");
  }, /** Gets an auth token and invokes the provided RPC.*/
  e.prototype.pu = function (t, e, n) {
    var r = this;
    return (this.Ih(), this.credentials.getToken().then(function (i) {
      return r.Qu.pu(t, e, n, i);
    }).catch(function (t) {
      throw (t.code === M.UNAUTHENTICATED && r.credentials.p(), t);
    }));
  }, /** Gets an auth token and invokes the provided RPC with streamed results.*/
  e.prototype.Du = function (t, e, n) {
    var r = this;
    return (this.Ih(), this.credentials.getToken().then(function (i) {
      return r.Qu.Du(t, e, n, i);
    }).catch(function (t) {
      throw (t.code === M.UNAUTHENTICATED && r.credentials.p(), t);
    }));
  }, e.prototype.terminate = function () {
    this.Th = !1;
  }, e);
})(function () {}), Wo = /** @class*/
(function () {
  function t(t, e) {
    (this._s = t, this.fa = e, /** The current OnlineState.*/
    this.state = "Unknown", /*Unknown*/
    /**
    * A count of consecutive failures to open the stream. If it reaches the
    * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
    * Offline.
    */
    this.mh = 0, /**
    * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
    * transition from OnlineState.Unknown to OnlineState.Offline without waiting
    * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
    */
    this.Ah = null, /**
    * Whether the client should log a warning message if it fails to connect to
    * the backend (initially true, cleared after a successful stream, or if we've
    * logged the message already).
    */
    this.Rh = !0);
  }
  return (t.prototype.Ph = function () {
    var t = this;
    0 === this.mh && (this.yh("Unknown"), this.Ah = this._s.Tr("online_state_timeout", /*OnlineStateTimeout*/
    1e4, function () {
      return (t.Ah = null, t.gh("Backend didn't respond within 10 seconds."), t.yh("Offline"), Promise.resolve());
    }));
  }, /**
  * Updates our OnlineState as appropriate after the watch stream reports a
  * failure. The first failure moves us to the 'Unknown' state. We then may
  * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
  * actually transition to the 'Offline' state.
  */
  t.prototype.Vh = function (t) {
    "Online" === /*Online*/
    this.state ? this.yh("Unknown") : (this.mh++, this.mh >= 1 && (this.ph(), this.gh("Connection failed 1 times. Most recent error: " + t.toString()), this.yh("Offline")));
  }, /**
  * Explicitly sets the OnlineState to the specified state.
  *
  * Note that this resets our timers / failure counters, etc. used by our
  * Offline heuristics, so must not be used in place of
  * handleWatchStreamStart() and handleWatchStreamFailure().
  */
  t.prototype.set = function (t) {
    (this.ph(), this.mh = 0, "Online" === /*Online*/
    t && (// We've connected to watch at least once. Don't warn the developer
    // about being offline going forward.
    this.Rh = !1), this.yh(t));
  }, t.prototype.yh = function (t) {
    t !== this.state && (this.state = t, this.fa(t));
  }, t.prototype.gh = function (t) {
    var e = "Could not reach Cloud Firestore backend. " + t + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
    this.Rh ? (A(e), this.Rh = !1) : N("OnlineStateTracker", e);
  }, t.prototype.ph = function () {
    null !== this.Ah && (this.Ah.cancel(), this.Ah = null);
  }, t);
})(), Zo = function (/**
* The local store, used to fill the write pipeline with outbound mutations.
*/
t, /** The client-side proxy for interacting with the backend.*/
e, n, r, i) {
  var o = this;
  (this.bh = t, this.Sh = e, this._s = n, this.Dh = {}, /**
  * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
  * LocalStore via fillWritePipeline() and have or will send to the write
  * stream.
  *
  * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
  * restart the write stream. When the stream is established the writes in the
  * pipeline will be sent in order.
  *
  * Writes remain in writePipeline until they are acknowledged by the backend
  * and thus will automatically be re-sent if the stream is interrupted /
  * restarted before they're acknowledged.
  *
  * Write responses from the backend are linked to their originating request
  * purely based on order, and so we can just shift() writes from the front of
  * the writePipeline as we receive responses.
  */
  this.Ch = [], /**
  * A mapping of watched targets that the client cares about tracking and the
  * user has explicitly called a 'listen' for this target.
  *
  * These targets may or may not have been sent to or acknowledged by the
  * server. On re-establishing the listen stream, these targets should be sent
  * to the server. The targets removed with unlistens are removed eagerly
  * without waiting for confirmation from the listen stream.
  */
  this.xh = new Map(), /**
  * A set of reasons for why the RemoteStore may be offline. If empty, the
  * RemoteStore may start its network connections.
  */
  this.Nh = new Set(), /**
  * Event handlers that get called when the network is disabled or enabled.
  *
  * PORTING NOTE: These functions are used on the Web client to create the
  * underlying streams (to support tree-shakeable streams). On Android and iOS,
  * the streams are created during construction of RemoteStore.
  */
  this.$h = [], this.Fh = i, this.Fh.ou(function (t) {
    n.Ps(function () {
      return _tslib.__awaiter(o, void 0, void 0, function () {
        return _tslib.__generator(this, function (t) {
          switch (t.label) {
            case 0:
              return uu(this) ? (N("RemoteStore", "Restarting streams for network reachability change."), [4, /*yield*/
              (function (t) {
                return _tslib.__awaiter(this, void 0, void 0, function () {
                  var e;
                  return _tslib.__generator(this, function (n) {
                    switch (n.label) {
                      case 0:
                        return ((e = O(t)).Nh.add(4), [4, /*yield*/
                        $o(e)]);
                      case 1:
                        return (n.sent(), e.Oh.set("Unknown"), e.Nh.delete(4), [4, /*yield*/
                        Jo(e)]);
                      case 2:
                        return (n.sent(), [2]);
                    }
                  });
                });
              })(this)]) : [3, /*break*/
              2];
            case 1:
              (t.sent(), t.label = 2);
            case 2:
              return [2];
          }
        });
      });
    });
  }), this.Oh = new Wo(n, r));
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A PersistentStream is an abstract base class that represents a streaming RPC
* to the Firestore backend. It's built on top of the connections own support
* for streaming RPCs, and adds several critical features for our clients:
*
*   - Exponential backoff on failure
*   - Authentication via CredentialsProvider
*   - Dispatching all callbacks into the shared worker queue
*   - Closing idle streams after 60 seconds of inactivity
*
* Subclasses of PersistentStream implement serialization of models to and
* from the JSON representation of the protocol buffers for a specific
* streaming RPC.
*
* ## Starting and Stopping
*
* Streaming RPCs are stateful and need to be start()ed before messages can
* be sent and received. The PersistentStream will call the onOpen() function
* of the listener once the stream is ready to accept requests.
*
* Should a start() fail, PersistentStream will call the registered onClose()
* listener with a FirestoreError indicating what went wrong.
*
* A PersistentStream can be started and stopped repeatedly.
*
* Generic types:
*  SendType: The type of the outgoing message of the underlying
*    connection stream
*  ReceiveType: The type of the incoming message of the underlying
*    connection stream
*  ListenerType: The type of the listener that will be used for callbacks
*/
function Jo(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var e, n;
    return _tslib.__generator(this, function (r) {
      switch (r.label) {
        case 0:
          if (!uu(t)) return [3, /*break*/
          4];
          (e = 0, n = t.$h, r.label = 1);
        case 1:
          return e < n.length ? [4, /*yield*/
          (0, n[e])(/*enabled=*/
          !0)] : [3, /*break*/
          4];
        case 2:
          (r.sent(), r.label = 3);
        case 3:
          return (e++, [3, /*break*/
          1]);
        case 4:
          return [2];
      }
    });
  });
}
/**
* Temporarily disables the network. The network can be re-enabled using
* enableNetwork().
*/
function $o(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var e, n;
    return _tslib.__generator(this, function (r) {
      switch (r.label) {
        case 0:
          (e = 0, n = t.$h, r.label = 1);
        case 1:
          return e < n.length ? [4, /*yield*/
          (0, n[e])(/*enabled=*/
          !1)] : [3, /*break*/
          4];
        case 2:
          (r.sent(), r.label = 3);
        case 3:
          return (e++, [3, /*break*/
          1]);
        case 4:
          return [2];
      }
    });
  });
}
/**
* Starts new listen for the given target. Uses resume token if provided. It
* is a no-op if the target of given `TargetData` is already being listened to.
*/
function tu(t, e) {
  var n = O(t);
  n.xh.has(e.targetId) || // Mark this as something the client is currently listening for.
  (n.xh.set(e.targetId, e), ou(n) ? // The listen will be sent in onWatchStreamOpen
  iu(n) : _u(n).Hu() && nu(n, e));
}
/**
* Removes the listen from server. It is a no-op if the given target id is
* not being listened to.
*/
function eu(t, e) {
  var n = O(t), r = _u(n);
  (n.xh.delete(e), r.Hu() && ru(n, e), 0 === n.xh.size && (r.Hu() ? r.Xu() : uu(n) && // Revert to OnlineState.Unknown if the watch stream is not open and we
  // have no listeners, since without any listens to send we cannot
  // confirm if the stream is healthy and upgrade to OnlineState.Online.
  n.Oh.set("Unknown")));
}
/**
* We need to increment the the expected number of pending responses we're due
* from watch so we wait for the ack to process any messages from this target.
*/
function nu(t, e) {
  (t.kh.on(e.targetId), _u(t).uh(e));
}
function ru(t, e) {
  (t.kh.on(e), _u(t).hh(e));
}
function iu(t) {
  (t.kh = new xn({
    vn: function (e) {
      return t.Dh.vn(e);
    },
    Sn: function (e) {
      return t.xh.get(e) || null;
    }
  }), _u(t).start(), t.Oh.Ph());
}
function ou(t) {
  return uu(t) && !_u(t).zu() && t.xh.size > 0;
}
function uu(t) {
  return 0 === O(t).Nh.size;
}
function su(t) {
  t.kh = void 0;
}
function au(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    return _tslib.__generator(this, function (e) {
      return (t.xh.forEach(function (e, n) {
        nu(t, e);
      }), [2]);
    });
  });
}
function cu(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    return _tslib.__generator(this, function (n) {
      return (su(t), // If we still need the watch stream, retry the connection.
      ou(t) ? (t.Oh.Vh(e), iu(t)) : // No need to restart watch stream because there are no active targets.
      // The online state is set to unknown because there is no active attempt
      // at establishing a connection
      t.Oh.set("Unknown"), [2]);
    });
  });
}
function hu(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var r, i, o;
    return _tslib.__generator(this, function (u) {
      switch (u.label) {
        case 0:
          if ((t.Oh.set("Online"), !(e instanceof Dn && 2 === /*Removed*/
          e.state && e.cause))) // Mark the client as online since we got a message from the server
          return [3, /*break*/
          6];
          u.label = 1;
        case 1:
          return (u.trys.push([1, 3, , 5]), [4, /*yield*/
          /** Handles an error on a target*/
          (function (t, e) {
            return _tslib.__awaiter(this, void 0, void 0, function () {
              var n, r, i, o;
              return _tslib.__generator(this, function (u) {
                switch (u.label) {
                  case 0:
                    (n = e.cause, r = 0, i = e.targetIds, u.label = 1);
                  case 1:
                    return r < i.length ? (o = i[r], t.xh.has(o) ? [4, /*yield*/
                    t.Dh.Mh(o, n)] : [3, /*break*/
                    3]) : [3, /*break*/
                    5];
                  case 2:
                    (u.sent(), t.xh.delete(o), t.kh.removeTarget(o), u.label = 3);
                  case 3:
                    u.label = 4;
                  case 4:
                    return (r++, [3, /*break*/
                    1]);
                  case 5:
                    return [2];
                }
              });
            });
          })(t, e)]);
        case 2:
          return (u.sent(), [3, /*break*/
          5]);
        case 3:
          return (r = u.sent(), N("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), r), [4, /*yield*/
          fu(t, r)]);
        case 4:
          return (u.sent(), [3, /*break*/
          5]);
        case 5:
          return [3, /*break*/
          13];
        case 6:
          if ((e instanceof Nn ? t.kh.dn(e) : e instanceof An ? t.kh.Pn(e) : t.kh.Tn(e), n.isEqual(X.min()))) return [3, /*break*/
          13];
          u.label = 7;
        case 7:
          return (u.trys.push([7, 11, , 13]), [4, /*yield*/
          io(t.bh)]);
        case 8:
          return (i = u.sent(), n._(i) >= 0 ? [4, /*yield*/
          /**
          * Takes a batch of changes from the Datastore, repackages them as a
          * RemoteEvent, and passes that on to the listener, which is typically the
          * SyncEngine.
          */
          (function (t, e) {
            var n = t.kh.Vn(e);
            // Update in-memory resume tokens. LocalStore will update the
            // persistent view of these when applying the completed RemoteEvent.
            return (n.$e.forEach(function (n, r) {
              if (n.resumeToken.l() > 0) {
                var i = t.xh.get(r);
                // A watched target might have been removed already.
                i && t.xh.set(r, i.Mt(n.resumeToken, e));
              }
            }), // Re-establish listens for the targets that have been invalidated by
            // existence filter mismatches.
            n.Fe.forEach(function (e) {
              var n = t.xh.get(e);
              if (n) {
                // Clear the resume token for the target, since we're in a known mismatch
                // state.
                (t.xh.set(e, n.Mt(U.T, n.Ot)), // Cause a hard reset by unwatching and rewatching immediately, but
                // deliberately don't send a resume token so that we get a full update.
                ru(t, e));
                // Mark the target we send as being on behalf of an existence filter
                // mismatch, but don't actually retain that in listenTargets. This ensures
                // that we flag the first re-listen this way without impacting future
                // listens of this target (that might happen e.g. on reconnect).
                var r = new ge(n.target, e, 1, /*ExistenceFilterMismatch*/
                n.sequenceNumber);
                nu(t, r);
              }
            }), t.Dh.Lh(n));
          })(t, n)] : [3, /*break*/
          10]);
        case 9:
          // We have received a target change with a global snapshot if the snapshot
          // version is not equal to SnapshotVersion.min().
          (u.sent(), u.label = 10);
        case 10:
          return [3, /*break*/
          13];
        case 11:
          return (N("RemoteStore", "Failed to raise snapshot:", o = u.sent()), [4, /*yield*/
          fu(t, o)]);
        case 12:
          return (u.sent(), [3, /*break*/
          13]);
        case 13:
          return [2];
      }
    });
  });
}
/**
* Recovery logic for IndexedDB errors that takes the network offline until
* `op` succeeds. Retries are scheduled with backoff using
* `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
* validated via a generic operation.
*
* The returned Promise is resolved once the network is disabled and before
* any retry attempt.
*/
function fu(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var r = this;
    return _tslib.__generator(this, function (i) {
      switch (i.label) {
        case 0:
          if (!mr(e)) throw e;
          // Disable network and raise offline snapshots
          return (t.Nh.add(1), [4, /*yield*/
          $o(t)]);
        case 1:
          // Disable network and raise offline snapshots
          return (i.sent(), t.Oh.set("Offline"), n || (// Use a simple read operation to determine if IndexedDB recovered.
          // Ideally, we would expose a health check directly on SimpleDb, but
          // RemoteStore only has access to persistence through LocalStore.
          n = function () {
            return io(t.bh);
          }), // Probe IndexedDB periodically and re-enable network
          t._s.po(function () {
            return _tslib.__awaiter(r, void 0, void 0, function () {
              return _tslib.__generator(this, function (e) {
                switch (e.label) {
                  case 0:
                    return (N("RemoteStore", "Retrying IndexedDB access"), [4, /*yield*/
                    n()]);
                  case 1:
                    return (e.sent(), t.Nh.delete(1), [4, /*yield*/
                    Jo(t)]);
                  case 2:
                    return (e.sent(), [2]);
                }
              });
            });
          }), [2]);
      }
    });
  });
}
/**
* Executes `op`. If `op` fails, takes the network offline until `op`
* succeeds. Returns after the first attempt.
*/
function lu(t, e) {
  return e().catch(function (n) {
    return fu(t, n, e);
  });
}
function pu(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var e, n, r, i, o;
    return _tslib.__generator(this, function (u) {
      switch (u.label) {
        case 0:
          (e = O(t), n = Iu(e), r = e.Ch.length > 0 ? e.Ch[e.Ch.length - 1].batchId : -1, u.label = 1);
        case 1:
          if (!/**
          * Returns true if we can add to the write pipeline (i.e. the network is
          * enabled and the write pipeline is not full).
          */
          (function (t) {
            return uu(t) && t.Ch.length < 10;
          })(/**
          * Queues additional writes to be sent to the write stream, sending them
          * immediately if the write stream is established.
          */
          e)) return [3, /*break*/
          7];
          u.label = 2;
        case 2:
          return (u.trys.push([2, 4, , 6]), [4, /*yield*/
          so(e.bh, r)]);
        case 3:
          return null === (i = u.sent()) ? (0 === e.Ch.length && n.Xu(), [3, /*break*/
          7]) : (r = i.batchId, (function (t, e) {
            t.Ch.push(e);
            var n = Iu(t);
            n.Hu() && n._h && n.fh(e.mutations);
          })(e, i), [3, /*break*/
          6]);
        case 4:
          return (o = u.sent(), [4, /*yield*/
          fu(e, o)]);
        case 5:
          return (u.sent(), [3, /*break*/
          6]);
        case 6:
          return [3, /*break*/
          1];
        case 7:
          return (du(e) && vu(e), [2]);
      }
    });
  });
}
function du(t) {
  return uu(t) && !Iu(t).zu() && t.Ch.length > 0;
}
function vu(t) {
  Iu(t).start();
}
function yu(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    return _tslib.__generator(this, function (e) {
      return (Iu(t).Eh(), [2]);
    });
  });
}
function mu(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var e, n, r, i;
    return _tslib.__generator(this, function (o) {
      // Send the write pipeline now that the stream is established.
      for ((e = Iu(t), n = 0, r = t.Ch); n < r.length; n++) (i = r[n], e.fh(i.mutations));
      return [2];
    });
  });
}
function gu(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var r, i;
    return _tslib.__generator(this, function (o) {
      switch (o.label) {
        case 0:
          return (r = t.Ch.shift(), i = Wr.from(r, e, n), [4, /*yield*/
          lu(t, function () {
            return t.Dh.Bh(i);
          })]);
        case 1:
          // It's possible that with the completion of this mutation another
          // slot has freed up.
          return (o.sent(), [4, /*yield*/
          pu(t)]);
        case 2:
          // It's possible that with the completion of this mutation another
          // slot has freed up.
          return (o.sent(), [2]);
      }
    });
  });
}
function wu(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    return _tslib.__generator(this, function (n) {
      switch (n.label) {
        case 0:
          return e && Iu(t)._h ? [4, /*yield*/
          (function (t, e) {
            return _tslib.__awaiter(this, void 0, void 0, function () {
              var n, r;
              return _tslib.__generator(this, function (i) {
                switch (i.label) {
                  case 0:
                    return en(r = e.code) && r !== M.ABORTED ? (n = t.Ch.shift(), // In this case it's also unlikely that the server itself is melting
                    // down -- this was just a bad request so inhibit backoff on the next
                    // restart.
                    Iu(t).Yu(), [4, /*yield*/
                    lu(t, function () {
                      return t.Dh.qh(n.batchId, e);
                    })]) : [3, /*break*/
                    3];
                  case 1:
                    // It's possible that with the completion of this mutation
                    // another slot has freed up.
                    return (i.sent(), [4, /*yield*/
                    pu(t)]);
                  case 2:
                    // In this case it's also unlikely that the server itself is melting
                    // down -- this was just a bad request so inhibit backoff on the next
                    // restart.
                    // It's possible that with the completion of this mutation
                    // another slot has freed up.
                    (i.sent(), i.label = 3);
                  case 3:
                    return [2];
                }
              });
            });
          })(t, e)] : [3, /*break*/
          2];
        case 1:
          // This error affects the actual write.
          (n.sent(), n.label = 2);
        case 2:
          // If the write stream closed after the write handshake completes, a write
          // operation failed and we fail the pending operation.
          // The write stream might have been started by refilling the write
          // pipeline for failed writes
          return (du(t) && vu(t), [2]);
      }
    });
  });
}
/**
* Toggles the network state when the client gains or loses its primary lease.
*/
function bu(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r;
    return _tslib.__generator(this, function (i) {
      switch (i.label) {
        case 0:
          return (n = O(t), e ? (n.Nh.delete(2), [4, /*yield*/
          Jo(n)]) : [3, /*break*/
          2]);
        case 1:
          return (i.sent(), [3, /*break*/
          5]);
        case 2:
          return (r = e) ? [3, /*break*/
          4] : (n.Nh.add(2), [4, /*yield*/
          $o(n)]);
        case 3:
          (i.sent(), r = n.Oh.set("Unknown"), i.label = 4);
        case 4:
          (r, i.label = 5);
        case 5:
          return [2];
      }
    });
  });
}
/**
* If not yet initialized, registers the WatchStream and its network state
* callback with `remoteStoreImpl`. Returns the existing stream if one is
* already available.
*
* PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
* This is not done on Web to allow it to be tree-shaken.
*/
function _u(t) {
  var e = this;
  return (t.Uh || // Create stream (but note that it is not started yet).
  (t.Uh = (function (t, e, n) {
    var r = O(t);
    return (r.Ih(), new Ho(e, r.Qu, r.credentials, r.Qt, n));
  })(t.Sh, t._s, {
    wu: au.bind(null, t),
    Tu: cu.bind(null, t),
    ah: hu.bind(null, t)
  }), t.$h.push(function (n) {
    return _tslib.__awaiter(e, void 0, void 0, function () {
      return _tslib.__generator(this, function (e) {
        switch (e.label) {
          case 0:
            return n ? (t.Uh.Yu(), ou(t) ? iu(t) : t.Oh.set("Unknown"), [3, /*break*/
            3]) : [3, /*break*/
            1];
          case 1:
            return [4, /*yield*/
            t.Uh.stop()];
          case 2:
            (e.sent(), su(t), e.label = 3);
          case 3:
            return [2];
        }
      });
    });
  })), t.Uh);
}
function Iu(t) {
  var e = this;
  return (t.Qh || // Create stream (but note that it is not started yet).
  (t.Qh = (function (t, e, n) {
    var r = O(t);
    return (r.Ih(), new Ko(e, r.Qu, r.credentials, r.Qt, n));
  })(t.Sh, t._s, {
    wu: yu.bind(null, t),
    Tu: wu.bind(null, t),
    wh: mu.bind(null, t),
    dh: gu.bind(null, t)
  }), t.$h.push(function (n) {
    return _tslib.__awaiter(e, void 0, void 0, function () {
      return _tslib.__generator(this, function (e) {
        switch (e.label) {
          case 0:
            return n ? (t.Qh.Yu(), [4, /*yield*/
            pu(t)]) : [3, /*break*/
            2];
          case 1:
            // This will start the write stream if necessary.
            return (e.sent(), [3, /*break*/
            4]);
          case 2:
            return [4, /*yield*/
            t.Qh.stop()];
          case 3:
            (e.sent(), t.Ch.length > 0 && (N("RemoteStore", "Stopping write stream with " + t.Ch.length + " pending writes"), t.Ch = []), e.label = 4);
          case 4:
            return [2];
        }
      });
    });
  })), t.Qh);
}
var Eu = function () {
  (this.Kh = void 0, this.listeners = []);
}, Tu = function () {
  (this.queries = new gi(function (t) {
    return pe(t);
  }, le), this.onlineState = "Unknown", /*Unknown*/
  this.Wh = new Set());
};
function Nu(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i, o, u, s, a;
    return _tslib.__generator(this, function (c) {
      switch (c.label) {
        case 0:
          if ((n = O(t), r = e.query, i = !1, (o = n.queries.get(r)) || (i = !0, o = new Eu()), !i)) return [3, /*break*/
          4];
          c.label = 1;
        case 1:
          return (c.trys.push([1, 3, , 4]), u = o, [4, /*yield*/
          n.jh(r)]);
        case 2:
          return (u.Kh = c.sent(), [3, /*break*/
          4]);
        case 3:
          return (s = c.sent(), a = Er(s, "Initialization of query '" + de(e.query) + "' failed"), [2, /*return*/
          void e.onError(a)]);
        case 4:
          return (n.queries.set(r, o), o.listeners.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
          e.Gh(n.onlineState), o.Kh && e.zh(o.Kh) && xu(n), [2]);
      }
    });
  });
}
function Au(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i, o, u;
    return _tslib.__generator(this, function (s) {
      return (n = O(t), r = e.query, i = !1, (o = n.queries.get(r)) && (u = o.listeners.indexOf(e)) >= 0 && (o.listeners.splice(u, 1), i = 0 === o.listeners.length), i ? [2, /*return*/
      (n.queries.delete(r), n.Hh(r))] : [2]);
    });
  });
}
function Du(t, e) {
  for (var n = O(t), r = !1, i = 0, o = e; i < o.length; i++) {
    var u = o[i], s = u.query, a = n.queries.get(s);
    if (a) {
      for (var c = 0, h = a.listeners; c < h.length; c++) {
        h[c].zh(u) && (r = !0);
      }
      a.Kh = u;
    }
  }
  r && xu(n);
}
function Su(t, e, n) {
  var r = O(t), i = r.queries.get(e);
  if (i) for (var o = 0, u = i.listeners; o < u.length; o++) {
    u[o].onError(n);
  }
  // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
  // after an error.
  r.queries.delete(e);
}
// Call all global snapshot listeners that have been set.
function xu(t) {
  t.Wh.forEach(function (t) {
    t.next();
  });
}
/**
* QueryListener takes a series of internal view snapshots and determines
* when to raise the event.
*
* It uses an Observer to dispatch events.
*/
var ku = /** @class*/
(function () {
  function t(t, e, n) {
    (this.query = t, this.Jh = e, /**
    * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
    * observer. This flag is set to true once we've actually raised an event.
    */
    this.Yh = !1, this.Xh = null, this.onlineState = "Unknown", /*Unknown*/
    this.options = n || ({}));
  }
  return (t.prototype.zh = function (t) {
    if (!this.options.includeMetadataChanges) {
      for (var e = [], n = 0, r = t.docChanges; n < r.length; n++) {
        var i = r[n];
        3 !== /*Metadata*/
        i.type && e.push(i);
      }
      t = new In(t.query, t.docs, t.Se, e, t.De, t.fromCache, t.Ce, /*excludesMetadataChanges=*/
      !0);
    }
    var o = !1;
    return (this.Yh ? this.Zh(t) && (this.Jh.next(t), o = !0) : this.tl(t, this.onlineState) && (this.el(t), o = !0), this.Xh = t, o);
  }, t.prototype.onError = function (t) {
    this.Jh.error(t);
  }, /** Returns whether a snapshot was raised.*/
  t.prototype.Gh = function (t) {
    this.onlineState = t;
    var e = !1;
    return (this.Xh && !this.Yh && this.tl(this.Xh, t) && (this.el(this.Xh), e = !0), e);
  }, t.prototype.tl = function (t, e) {
    // Always raise the first event when we're synced
    if (!t.fromCache) return !0;
    // NOTE: We consider OnlineState.Unknown as online (it should become Offline
    // or Online if we wait long enough).
    var n = "Offline" !== /*Offline*/
    e;
    // Don't raise the event if we're online, aren't synced yet (checked
    // above) and are waiting for a sync.
    return !(this.options.nl && n || t.docs.et() && "Offline" !== /*Offline*/
    e);
  }, t.prototype.Zh = function (t) {
    // We don't need to handle includeDocumentMetadataChanges here because
    // the Metadata only changes have already been stripped out if needed.
    // At this point the only changes we will see are the ones we should
    // propagate.
    if (t.docChanges.length > 0) return !0;
    var e = this.Xh && this.Xh.hasPendingWrites !== t.hasPendingWrites;
    return !(!t.Ce && !e) && !0 === this.options.includeMetadataChanges;
  }, t.prototype.el = function (t) {
    (t = In.Ne(t.query, t.docs, t.De, t.fromCache), this.Yh = !0, this.Jh.next(t));
  }, t);
})(), Ou = /** @class*/
(function () {
  function t(t, // How many bytes this element takes to store in the bundle.
  e) {
    (this.payload = t, this.byteLength = e);
  }
  return (t.prototype.sl = function () {
    return ("metadata" in this.payload);
  }, t);
})(), Pu = /** @class*/
(function () {
  function t(t) {
    this.Qt = t;
  }
  return (t.prototype.Pc = function (t) {
    return zn(this.Qt, t);
  }, /**
  * Converts a BundleDocument to a MaybeDocument.
  */
  t.prototype.yc = function (t) {
    return t.metadata.exists ? Kn(this.Qt, t.document, !1) : new Vt(this.Pc(t.metadata.name), this.gc(t.metadata.readTime));
  }, t.prototype.gc = function (t) {
    return Mn(t);
  }, t);
})(), Vu = /** @class*/
(function () {
  function t(t, e, n) {
    (this.il = t, this.bh = e, this.Qt = n, /** Batched queries to be saved into storage*/
    this.queries = [], /** Batched documents to be saved into storage*/
    this.documents = [], this.progress = Cu(t));
  }
  return (t.prototype.rl = function (t) {
    this.progress.bytesLoaded += t.byteLength;
    var e = this.progress.documentsLoaded;
    return (t.payload.namedQuery ? this.queries.push(t.payload.namedQuery) : t.payload.documentMetadata ? (this.documents.push({
      metadata: t.payload.documentMetadata
    }), t.payload.documentMetadata.exists || ++e) : t.payload.document && (this.documents[this.documents.length - 1].document = t.payload.document, ++e), e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, Object.assign({}, this.progress)) : null);
  }, t.prototype.ol = function (t) {
    for (var e = new Map(), n = new Pu(this.Qt), r = 0, i = t; r < i.length; r++) {
      var o = i[r];
      if (o.metadata.queries) for (var u = n.Pc(o.metadata.name), s = 0, a = o.metadata.queries; s < a.length; s++) {
        var c = a[s], h = (e.get(c) || mn()).add(u);
        e.set(c, h);
      }
    }
    return e;
  }, /**
  * Update the progress to 'Success' and return the updated progress.
  */
  t.prototype.complete = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t, e, n, r, i;
      return _tslib.__generator(this, function (o) {
        switch (o.label) {
          case 0:
            return [4, /*yield*/
            vo(this.bh, new Pu(this.Qt), this.documents, this.il.id)];
          case 1:
            (t = o.sent(), e = this.ol(this.documents), n = 0, r = this.queries, o.label = 2);
          case 2:
            return n < r.length ? (i = r[n], [4, /*yield*/
            yo(this.bh, i, e.get(i.name))]) : [3, /*break*/
            5];
          case 3:
            (o.sent(), o.label = 4);
          case 4:
            return (n++, [3, /*break*/
            2]);
          case 5:
            return [2, /*return*/
            (this.progress.taskState = "Success", new Wi(Object.assign({}, this.progress), t))];
        }
      });
    });
  }, t);
})();
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A complete element in the bundle stream, together with the byte length it
* occupies in the stream.
*/
/**
* Returns a `LoadBundleTaskProgress` representing the initial progress of
* loading a bundle.
*/
function Cu(t) {
  return {
    taskState: "Running",
    documentsLoaded: 0,
    bytesLoaded: 0,
    totalDocuments: t.totalDocuments,
    totalBytes: t.totalBytes
  };
}
/**
* Returns a `LoadBundleTaskProgress` representing the progress that the loading
* has succeeded.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var Lu = function (t) {
  this.key = t;
}, Ru = function (t) {
  this.key = t;
}, Uu = /** @class*/
(function () {
  function t(t, /** Documents included in the remote target*/
  e) {
    (this.query = t, this.cl = e, this.al = null, /**
    * A flag whether the view is current with the backend. A view is considered
    * current after it has seen the current flag from the backend and did not
    * lose consistency within the watch stream (e.g. because of an existence
    * filter mismatch).
    */
    this.Be = !1, /** Documents in the view but not in the remote target*/
    this.ul = mn(), /** Document Keys that have local changes*/
    this.De = mn(), this.hl = ye(t), this.ll = new bn(this.hl));
  }
  return (Object.defineProperty(t.prototype, "_l", {
    /**
    * The set of remote documents that the server has told us belongs to the target associated with
    * this view.
    */
    get: function () {
      return this.cl;
    },
    enumerable: !1,
    configurable: !0
  }), /**
  * Iterates over a set of doc changes, applies the query limit, and computes
  * what the new results should be, what the changes were, and whether we may
  * need to go back to the local cache for more results. Does not make any
  * changes to the view.
  * @param docChanges - The doc changes to apply to this view.
  * @param previousChanges - If this is being called with a refill, then start
  *        with this set of docs and changes instead of the current view.
  * @returns a new set of docs, changes, and refill flag.
  */
  t.prototype.fl = function (t, e) {
    var n = this, r = e ? e.dl : new _n(), i = e ? e.ll : this.ll, o = e ? e.De : this.De, u = i, s = !1, a = ie(this.query) && i.size === this.query.limit ? i.last() : null, c = oe(this.query) && i.size === this.query.limit ? i.first() : null;
    // Drop documents out to meet limit/limitToLast requirement.
    if ((t.Xt(function (t, e) {
      var h = i.get(t), f = e instanceof Pt ? e : null;
      f && (f = ve(n.query, f) ? f : null);
      var l = !!h && n.De.has(h.key), p = !!f && (f.Vt || // We only consider committed mutations for documents that were
      // mutated during the lifetime of the view.
      n.De.has(f.key) && f.hasCommittedMutations), d = !1;
      // Calculate change
      (h && f ? h.data().isEqual(f.data()) ? l !== p && (r.track({
        type: 3,
        /*Metadata*/
        doc: f
      }), d = !0) : n.wl(h, f) || (r.track({
        type: 2,
        /*Modified*/
        doc: f
      }), d = !0, (a && n.hl(f, a) > 0 || c && n.hl(f, c) < 0) && (// This doc moved from inside the limit to outside the limit.
      // That means there may be some other doc in the local cache
      // that should be included instead.
      s = !0)) : !h && f ? (r.track({
        type: 0,
        /*Added*/
        doc: f
      }), d = !0) : h && !f && (r.track({
        type: 1,
        /*Removed*/
        doc: h
      }), d = !0, (a || c) && (// A doc was removed from a full limit query. We'll need to
      // requery from the local cache to see if we know about some other
      // doc that should be in the results.
      s = !0)), d && (f ? (u = u.add(f), o = p ? o.add(t) : o.delete(t)) : (u = u.delete(t), o = o.delete(t))));
    }), ie(this.query) || oe(this.query))) for (; u.size > this.query.limit; ) {
      var h = ie(this.query) ? u.last() : u.first();
      (u = u.delete(h.key), o = o.delete(h.key), r.track({
        type: 1,
        /*Removed*/
        doc: h
      }));
    }
    return {
      ll: u,
      dl: r,
      lc: s,
      De: o
    };
  }, t.prototype.wl = function (t, e) {
    // We suppress the initial change event for documents that were modified as
    // part of a write acknowledgment (e.g. when the value of a server transform
    // is applied) as Watch will send us the same document again.
    // By suppressing the event, we only raise two user visible events (one with
    // `hasPendingWrites` and the final state of the document) instead of three
    // (one with `hasPendingWrites`, the modified document with
    // `hasPendingWrites` and the final state of the document).
    return t.Vt && e.hasCommittedMutations && !e.Vt;
  }, /**
  * Updates the view with the given ViewDocumentChanges and optionally updates
  * limbo docs and sync state from the provided target change.
  * @param docChanges - The set of changes to make to the view's docs.
  * @param updateLimboDocuments - Whether to update limbo documents based on
  *        this change.
  * @param targetChange - A target change to apply for computing limbo docs and
  *        sync state.
  * @returns A new ViewChange with the given docs, changes, and sync state.
  */
  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
  t.prototype.wi = function (t, e, n) {
    var r = this, i = this.ll;
    (this.ll = t.ll, this.De = t.De);
    // Sort changes based on type and query comparator
    var o = t.dl.ve();
    (o.sort(function (t, e) {
      return (function (t, e) {
        var n = function (t) {
          switch (t) {
            case 0:
              /*Added*/
              return 1;
            case 2:
            case 3:
              /*Metadata*/
              // A metadata change is converted to a modified change at the public
              // api layer.  Since we sort by document key and then change type,
              // metadata and modified changes must be sorted equivalently.
              return 2;
            case 1:
              /*Removed*/
              return 0;
            default:
              return x();
          }
        };
        return n(t) - n(e);
      })(t.type, e.type) || r.hl(t.doc, e.doc);
    }), this.El(n));
    var u = e ? this.Tl() : [], s = 0 === this.ul.size && this.Be ? 1 : /*Synced*/
    0, /*Local*/
    a = s !== this.al;
    return (this.al = s, 0 !== o.length || a ? {
      snapshot: new In(this.query, t.ll, i, o, t.De, 0 === /*Local*/
      s, a, /*excludesMetadataChanges=*/
      !1),
      Il: u
    } : {
      Il: u
    });
  }, /**
  * Applies an OnlineState change to the view, potentially generating a
  * ViewChange if the view's syncState changes as a result.
  */
  t.prototype.Gh = function (t) {
    return this.Be && "Offline" === /*Offline*/
    t ? // If we're offline, set `current` to false and then call applyChanges()
    // to refresh our syncState and generate a ViewChange as appropriate. We
    // are guaranteed to get a new TargetChange that sets `current` back to
    // true once the client is back online.
    (this.Be = !1, this.wi({
      ll: this.ll,
      dl: new _n(),
      De: this.De,
      lc: !1
    }, /*updateLimboDocuments=*/
    !1)) : {
      Il: []
    };
  }, /**
  * Returns whether the doc for the given key should be in limbo.
  */
  t.prototype.ml = function (t) {
    // If the remote end says it's part of this query, it's not in limbo.
    return !this.cl.has(t) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
    !!this.ll.has(t) && !this.ll.get(t).Vt;
  }, /**
  * Updates syncedDocuments, current, and limbo docs based on the given change.
  * Returns the list of changes to which docs are in limbo.
  */
  t.prototype.El = function (t) {
    var e = this;
    t && (t.qe.forEach(function (t) {
      return e.cl = e.cl.add(t);
    }), t.Ue.forEach(function (t) {}), t.Qe.forEach(function (t) {
      return e.cl = e.cl.delete(t);
    }), this.Be = t.Be);
  }, t.prototype.Tl = function () {
    var t = this;
    // We can only determine limbo documents when we're in-sync with the server.
    if (!this.Be) return [];
    // TODO(klimt): Do this incrementally so that it's not quadratic when
    // updating many documents.
    var e = this.ul;
    (this.ul = mn(), this.ll.forEach(function (e) {
      t.ml(e.key) && (t.ul = t.ul.add(e.key));
    }));
    // Diff the new limbo docs with the old limbo docs.
    var n = [];
    return (e.forEach(function (e) {
      t.ul.has(e) || n.push(new Ru(e));
    }), this.ul.forEach(function (t) {
      e.has(t) || n.push(new Lu(t));
    }), n);
  }, /**
  * Update the in-memory state of the current view with the state read from
  * persistence.
  *
  * We update the query view whenever a client's primary status changes:
  * - When a client transitions from primary to secondary, it can miss
  *   LocalStorage updates and its query views may temporarily not be
  *   synchronized with the state on disk.
  * - For secondary to primary transitions, the client needs to update the list
  *   of `syncedDocuments` since secondary clients update their query views
  *   based purely on synthesized RemoteEvents.
  *
  * @param queryResult.documents - The documents that match the query according
  * to the LocalStore.
  * @param queryResult.remoteKeys - The keys of the documents that match the
  * query according to the backend.
  *
  * @returns The ViewChange that resulted from this synchronization.
  */
  // PORTING NOTE: Multi-tab only.
  t.prototype.Al = function (t) {
    (this.cl = t.Rc, this.ul = mn());
    var e = this.fl(t.documents);
    return this.wi(e, /*updateLimboDocuments=*/
    !0);
  }, /**
  * Returns a view snapshot as if this query was just listened to. Contains
  * a document add for every existing document and the `fromCache` and
  * `hasPendingWrites` status of the already established view.
  */
  // PORTING NOTE: Multi-tab only.
  t.prototype.Rl = function () {
    return In.Ne(this.query, this.ll, this.De, 0 === /*Local*/
    this.al);
  }, t);
})(), Mu = function (/**
* The query itself.
*/
t, /**
* The target number created by the client that is used in the watch
* stream to identify this query.
*/
e, /**
* The view is responsible for computing the final merged truth of what
* docs are in the query. It gets notified of local and remote changes,
* and applies the query filters and limits to determine the most correct
* possible results.
*/
n) {
  (this.query = t, this.targetId = e, this.view = n);
}, qu = function (t) {
  (this.key = t, /**
  * Set to true once we've received a document. This is used in
  * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
  * decide whether it needs to manufacture a delete event for the target once
  * the target is CURRENT.
  */
  this.Pl = !1);
}, Fu = /** @class*/
(function () {
  function t(t, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
  r, i, o) {
    (this.bh = t, this.yl = e, this.gl = n, this.Vl = r, this.currentUser = i, this.pl = o, this.bl = {}, this.vl = new gi(function (t) {
      return pe(t);
    }, le), this.Sl = new Map(), /**
    * The keys of documents that are in limbo for which we haven't yet started a
    * limbo resolution query. The strings in this set are the result of calling
    * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
    *
    * The `Set` type was chosen because it provides efficient lookup and removal
    * of arbitrary elements and it also maintains insertion order, providing the
    * desired queue-like FIFO semantics.
    */
    this.Dl = new Set(), /**
    * Keeps track of the target ID for each document that is in limbo with an
    * active target.
    */
    this.Cl = new rn(tt.H), /**
    * Keeps track of the information about an active limbo resolution for each
    * active target ID that was started for the purpose of limbo resolution.
    */
    this.xl = new Map(), this.Nl = new go(), /** Stores user completion handlers, indexed by User and BatchId.*/
    this.$l = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged.*/
    this.Fl = new Map(), this.Ol = Di.Li(), this.onlineState = "Unknown", /*Unknown*/
    // The primary state is set to `true` or `false` immediately after Firestore
    // startup. In the interim, a client should only be considered primary if
    // `isPrimary` is true.
    this.kl = void 0);
  }
  return (Object.defineProperty(t.prototype, "Ml", {
    get: function () {
      return !0 === this.kl;
    },
    enumerable: !1,
    configurable: !0
  }), t);
})();
/**
* Initiates the new listen, resolves promise when listen enqueued to the
* server. All the subsequent view snapshots or errors are sent to the
* subscribed handlers. Returns the initial snapshot.
*/
function ju(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i, o, u, s;
    return _tslib.__generator(this, function (a) {
      switch (a.label) {
        case 0:
          return (n = ys(t), (o = n.vl.get(e)) ? // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
          // already exists when EventManager calls us for the first time. This
          // happens when the primary tab is already listening to this query on
          // behalf of another tab and the user of the primary also starts listening
          // to the query. EventManager will not have an assigned target ID in this
          // case and calls `listen` to obtain this ID.
          (r = o.targetId, n.Vl.Fa(r), i = o.view.Rl(), [3, /*break*/
          4]) : [3, /*break*/
          1]);
        case 1:
          return [4, /*yield*/
          ao(n.bh, he(e))];
        case 2:
          return (u = a.sent(), s = n.Vl.Fa(u.targetId), r = u.targetId, [4, /*yield*/
          zu(n, e, r, "current" === s)]);
        case 3:
          (i = a.sent(), n.Ml && tu(n.yl, u), a.label = 4);
        case 4:
          return [2, /*return*/
          i];
      }
    });
  });
}
/**
* Registers a view for a previously unknown query and computes its initial
* snapshot.
*/
function zu(t, e, n, r) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var i, o, u, s, a, c;
    return _tslib.__generator(this, function (h) {
      switch (h.label) {
        case 0:
          // PORTING NOTE: On Web only, we inject the code that registers new Limbo
          // targets based on view changes. This allows us to only depend on Limbo
          // changes when user code includes queries.
          return (t.Ll = function (e, n, r) {
            return (function (t, e, n, r) {
              return _tslib.__awaiter(this, void 0, void 0, function () {
                var i, o, u;
                return _tslib.__generator(this, function (s) {
                  switch (s.label) {
                    case 0:
                      return (i = e.view.fl(n), i.lc ? [4, /*yield*/
                      ho(t.bh, e.query, /*usePreviousResults=*/
                      !1).then(function (t) {
                        var n = t.documents;
                        return e.view.fl(n, i);
                      })] : [3, /*break*/
                      2]);
                    case 1:
                      // The query has a limit and some docs were removed, so we need
                      // to re-run the query against the local store to make sure we
                      // didn't lose any good docs that had been past the limit.
                      (i = s.sent(), s.label = 2);
                    case 2:
                      return (o = r && r.$e.get(e.targetId), u = e.view.wi(i, /*updateLimboDocuments=*/
                      t.Ml, o), [2, /*return*/
                      (es(t, e.targetId, u.Il), u.snapshot)]);
                  }
                });
              });
            })(t, e, n, r);
          }, [4, /*yield*/
          ho(t.bh, e, /*usePreviousResults=*/
          !0)]);
        case 1:
          return (i = h.sent(), o = new Uu(e, i.Rc), u = o.fl(i.documents), s = Tn.Le(n, r && "Offline" !== /*Offline*/
          t.onlineState), a = o.wi(u, /*updateLimboDocuments=*/
          t.Ml, s), es(t, n, a.Il), c = new Mu(e, n, o), [2, /*return*/
          (t.vl.set(e, c), t.Sl.has(n) ? t.Sl.get(n).push(e) : t.Sl.set(n, [e]), a.snapshot)]);
      }
    });
  });
}
/** Stops listening to the query.*/
function Gu(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i;
    return _tslib.__generator(this, function (o) {
      switch (o.label) {
        case 0:
          return (n = O(t), r = n.vl.get(e), (i = n.Sl.get(r.targetId)).length > 1 ? [2, /*return*/
          (n.Sl.set(r.targetId, i.filter(function (t) {
            return !le(t, e);
          })), void n.vl.delete(e))] : n.Ml ? // We need to remove the local query target first to allow us to verify
          // whether any other client is still interested in this target.
          (n.Vl.ka(r.targetId), n.Vl.Da(r.targetId) ? [3, /*break*/
          2] : [4, /*yield*/
          co(n.bh, r.targetId, /*keepPersistedTargetData=*/
          !1).then(function () {
            (n.Vl.La(r.targetId), eu(n.yl, r.targetId), $u(n, r.targetId));
          }).catch(mi)]) : [3, /*break*/
          3]);
        case 1:
          (o.sent(), o.label = 2);
        case 2:
          return [3, /*break*/
          5];
        case 3:
          return ($u(n, r.targetId), [4, /*yield*/
          co(n.bh, r.targetId, /*keepPersistedTargetData=*/
          !0)]);
        case 4:
          (o.sent(), o.label = 5);
        case 5:
          return [2];
      }
    });
  });
}
/**
* Initiates the write of local mutation batch which involves adding the
* writes to the mutation queue, notifying the remote store about new
* mutations and raising events for any changes this write caused.
*
* The promise returned by this call is resolved when the above steps
* have completed, *not* when the write was acked by the backend. The
* userCallback is resolved once the write was acked/rejected by the
* backend (or failed locally for any other reason).
*/
function Bu(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var r, i, o, u;
    return _tslib.__generator(this, function (s) {
      switch (s.label) {
        case 0:
          (r = ms(t), s.label = 1);
        case 1:
          return (s.trys.push([1, 5, , 6]), [4, /*yield*/
          (function (t, e) {
            var n, r = O(t), i = K.now(), o = e.reduce(function (t, e) {
              return t.add(e.key);
            }, mn());
            return r.persistence.runTransaction("Locally write mutations", "readwrite", function (t) {
              return r.Tc.Xo(t, o).next(function (o) {
                n = o;
                for (var u = [], s = 0, a = e; s < a.length; s++) {
                  var c = a[s], h = je(c, n.get(c.key));
                  null != h && // NOTE: The base state should only be applied if there's some
                  // existing document to override, so use a Precondition of
                  // exists=true
                  u.push(new Qe(c.key, h, kt(h.proto.mapValue), Re.exists(!0)));
                }
                return r.zo.Ri(t, i, u, e);
              });
            }).then(function (t) {
              var e = t.xs(n);
              return {
                batchId: t.batchId,
                ri: e
              };
            });
          })(r.bh, e)]);
        case 2:
          return (i = s.sent(), r.Vl.Ca(i.batchId), (function (t, e, n) {
            var r = t.$l[t.currentUser.A()];
            (r || (r = new rn(C)), r = r.zt(e, n), t.$l[t.currentUser.A()] = r);
          })(r, i.batchId, n), [4, /*yield*/
          is(r, i.ri)]);
        case 3:
          return (s.sent(), [4, /*yield*/
          pu(r.yl)]);
        case 4:
          return (s.sent(), [3, /*break*/
          6]);
        case 5:
          return (o = s.sent(), u = Er(o, "Failed to persist write"), n.reject(u), [3, /*break*/
          6]);
        case 6:
          return [2];
      }
    });
  });
}
/**
* Applies one remote event to the sync engine, notifying any views of the
* changes, and releasing any pending mutation batches that would become
* visible because of the snapshot version the remote event contains.
*/
function Qu(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r;
    return _tslib.__generator(this, function (i) {
      switch (i.label) {
        case 0:
          (n = O(t), i.label = 1);
        case 1:
          return (i.trys.push([1, 4, , 6]), [4, /*yield*/
          oo(n.bh, e)]);
        case 2:
          return (r = i.sent(), // Update `receivedDocument` as appropriate for any limbo targets.
          e.$e.forEach(function (t, e) {
            var r = n.xl.get(e);
            r && // Since this is a limbo resolution lookup, it's for a single document
            // and it could be added, modified, or removed, but not a combination.
            (k(t.qe.size + t.Ue.size + t.Qe.size <= 1), t.qe.size > 0 ? r.Pl = !0 : t.Ue.size > 0 ? k(r.Pl) : t.Qe.size > 0 && (k(r.Pl), r.Pl = !1));
          }), [4, /*yield*/
          is(n, r, e)]);
        case 3:
          // Update `receivedDocument` as appropriate for any limbo targets.
          return (i.sent(), [3, /*break*/
          6]);
        case 4:
          return [4, /*yield*/
          mi(i.sent())];
        case 5:
          return (i.sent(), [3, /*break*/
          6]);
        case 6:
          return [2];
      }
    });
  });
}
/**
* Applies an OnlineState change to the sync engine and notifies any views of
* the change.
*/
function Yu(t, e, n) {
  var r = O(t);
  // If we are the secondary client, we explicitly ignore the remote store's
  // online state (the local client may go offline, even though the primary
  // tab remains online) and only apply the primary tab's online state from
  // SharedClientState.
  if (r.Ml && 0 === /*RemoteStore*/
  n || !r.Ml && 1 === /*SharedClientState*/
  n) {
    var i = [];
    (r.vl.forEach(function (t, n) {
      var r = n.view.Gh(e);
      r.snapshot && i.push(r.snapshot);
    }), (function (t, e) {
      var n = O(t);
      n.onlineState = e;
      var r = !1;
      (n.queries.forEach(function (t, n) {
        for (var i = 0, o = n.listeners; i < o.length; i++) {
          // Run global snapshot listeners if a consistent snapshot has been emitted.
          o[i].Gh(e) && (r = !0);
        }
      }), r && xu(n));
    })(r.gl, e), i.length && r.bl.ah(i), r.onlineState = e, r.Ml && r.Vl.Qa(e));
  }
}
/**
* Rejects the listen for the given targetID. This can be triggered by the
* backend for any active target.
*
* @param syncEngine - The sync engine implementation.
* @param targetId - The targetID corresponds to one previously initiated by the
* user as part of TargetData passed to listen() on RemoteStore.
* @param err - A description of the condition that has forced the rejection.
* Nearly always this will be an indication that the user is no longer
* authorized to see the data matching the target.
*/
function Hu(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var r, i, o, u, s, a;
    return _tslib.__generator(this, function (c) {
      switch (c.label) {
        case 0:
          // PORTING NOTE: Multi-tab only.
          return ((r = O(t)).Vl.Ba(e, "rejected", n), i = r.xl.get(e), (o = i && i.key) ? (u = (u = new rn(tt.H)).zt(o, new Vt(o, X.min())), s = mn().add(o), a = new En(X.min(), /*targetChanges=*/
          new Map(), /*targetMismatches=*/
          new sn(C), u, s), [4, /*yield*/
          Qu(r, a)]) : [3, /*break*/
          2]);
        case 1:
          return (c.sent(), // Since this query failed, we won't want to manually unlisten to it.
          // We only remove it from bookkeeping after we successfully applied the
          // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
          // this query when the RemoteStore restarts the Watch stream, which should
          // re-trigger the target failure.
          r.Cl = r.Cl.remove(o), r.xl.delete(e), rs(r), [3, /*break*/
          4]);
        case 2:
          return [4, /*yield*/
          co(r.bh, e, /*keepPersistedTargetData*/
          !1).then(function () {
            return $u(r, e, n);
          }).catch(mi)];
        case 3:
          (c.sent(), c.label = 4);
        case 4:
          return [2];
      }
    });
  });
}
function Ku(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i;
    return _tslib.__generator(this, function (o) {
      switch (o.label) {
        case 0:
          (n = O(t), r = e.batch.batchId, o.label = 1);
        case 1:
          return (o.trys.push([1, 4, , 6]), [4, /*yield*/
          ro(n.bh, e)]);
        case 2:
          return (i = o.sent(), // The local store may or may not be able to apply the write result and
          // raise events immediately (depending on whether the watcher is caught
          // up), so we raise user callbacks first so that they consistently happen
          // before listen events.
          Ju(n, r, /*error=*/
          null), Zu(n, r), n.Vl.Na(r, "acknowledged"), [4, /*yield*/
          is(n, i)]);
        case 3:
          // The local store may or may not be able to apply the write result and
          // raise events immediately (depending on whether the watcher is caught
          // up), so we raise user callbacks first so that they consistently happen
          // before listen events.
          return (o.sent(), [3, /*break*/
          6]);
        case 4:
          return [4, /*yield*/
          mi(o.sent())];
        case 5:
          return (o.sent(), [3, /*break*/
          6]);
        case 6:
          return [2];
      }
    });
  });
}
function Xu(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var r, i;
    return _tslib.__generator(this, function (o) {
      switch (o.label) {
        case 0:
          (r = O(t), o.label = 1);
        case 1:
          return (o.trys.push([1, 4, , 6]), [4, /*yield*/
          (function (t, e) {
            var n = O(t);
            return n.persistence.runTransaction("Reject batch", "readwrite-primary", function (t) {
              var r;
              return n.zo.Pi(t, e).next(function (e) {
                return (k(null !== e), r = e.keys(), n.zo.Ci(t, e));
              }).next(function () {
                return n.zo.$i(t);
              }).next(function () {
                return n.Tc.Xo(t, r);
              });
            });
          })(r.bh, e)]);
        case 2:
          return (i = o.sent(), // The local store may or may not be able to apply the write result and
          // raise events immediately (depending on whether the watcher is caught up),
          // so we raise user callbacks first so that they consistently happen before
          // listen events.
          Ju(r, e, n), Zu(r, e), r.Vl.Na(e, "rejected", n), [4, /*yield*/
          is(r, i)]);
        case 3:
          // The local store may or may not be able to apply the write result and
          // raise events immediately (depending on whether the watcher is caught up),
          // so we raise user callbacks first so that they consistently happen before
          // listen events.
          return (o.sent(), [3, /*break*/
          6]);
        case 4:
          return [4, /*yield*/
          mi(o.sent())];
        case 5:
          return (o.sent(), [3, /*break*/
          6]);
        case 6:
          return [2];
      }
    });
  });
}
/**
* Registers a user callback that resolves when all pending mutations at the moment of calling
* are acknowledged .
*/
function Wu(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i, o, u;
    return _tslib.__generator(this, function (s) {
      switch (s.label) {
        case 0:
          (uu((n = O(t)).yl) || N("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), s.label = 1);
        case 1:
          return (s.trys.push([1, 3, , 4]), [4, /*yield*/
          (function (t) {
            var e = O(t);
            return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function (t) {
              return e.zo.Vi(t);
            });
          })(n.bh)]);
        case 2:
          return -1 === (r = s.sent()) ? [2, /*return*/
          void e.resolve()] : ((i = n.Fl.get(r) || []).push(e), n.Fl.set(r, i), [3, /*break*/
          4]);
        case 3:
          return (o = s.sent(), u = Er(o, "Initialization of waitForPendingWrites() operation failed"), e.reject(u), [3, /*break*/
          4]);
        case 4:
          return [2];
      }
    });
  });
}
/**
* Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
* if there are any.
*/
function Zu(t, e) {
  ((t.Fl.get(e) || []).forEach(function (t) {
    t.resolve();
  }), t.Fl.delete(e));
}
function Ju(t, e, n) {
  var r = O(t), i = r.$l[r.currentUser.A()];
  // NOTE: Mutations restored from persistence won't have callbacks, so it's
  // okay for there to be no callback for this ID.
  if (i) {
    var o = i.get(e);
    (o && (n ? o.reject(n) : o.resolve(), i = i.remove(e)), r.$l[r.currentUser.A()] = i);
  }
}
function $u(t, e, n) {
  (void 0 === n && (n = null), t.Vl.ka(e));
  for (var r = 0, i = t.Sl.get(e); r < i.length; r++) {
    var o = i[r];
    (t.vl.delete(o), n && t.bl.Bl(o, n));
  }
  (t.Sl.delete(e), t.Ml && t.Nl.Fc(e).forEach(function (e) {
    t.Nl.Fi(e) || // We removed the last reference for this key
    ts(t, e);
  }));
}
function ts(t, e) {
  t.Dl.delete(e.path.rt());
  // It's possible that the target already got removed because the query failed. In that case,
  // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
  var n = t.Cl.get(e);
  null !== n && (eu(t.yl, n), t.Cl = t.Cl.remove(e), t.xl.delete(n), rs(t));
}
function es(t, e, n) {
  for (var r = 0, i = n; r < i.length; r++) {
    var o = i[r];
    o instanceof Lu ? (t.Nl.nr(o.key, e), ns(t, o)) : o instanceof Ru ? (N("SyncEngine", "Document no longer in limbo: " + o.key), t.Nl.ir(o.key, e), t.Nl.Fi(o.key) || // We removed the last reference for this key
    ts(t, o.key)) : x();
  }
}
function ns(t, e) {
  var n = e.key, r = n.path.rt();
  t.Cl.get(n) || t.Dl.has(r) || (N("SyncEngine", "New document in limbo: " + n), t.Dl.add(r), rs(t));
}
/**
* Starts listens for documents in limbo that are enqueued for resolution,
* subject to a maximum number of concurrent resolutions.
*
* Without bounding the number of concurrent resolutions, the server can fail
* with "resource exhausted" errors which can lead to pathological client
* behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
*/
function rs(t) {
  for (; t.Dl.size > 0 && t.Cl.size < t.pl; ) {
    var e = t.Dl.values().next().value;
    t.Dl.delete(e);
    var n = new tt(Z.ot(e)), r = t.Ol.next();
    (t.xl.set(r, new qu(n)), t.Cl = t.Cl.zt(n, r), tu(t.yl, new ge(he(re(n.path)), r, 2, /*LimboResolution*/
    H.q)));
  }
}
function is(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var r, i, o, u;
    return _tslib.__generator(this, function (s) {
      switch (s.label) {
        case 0:
          return (r = O(t), i = [], o = [], u = [], r.vl.et() ? [3, /*break*/
          3] : (r.vl.forEach(function (t, s) {
            u.push(r.Ll(s, e, n).then(function (t) {
              if (t) {
                (r.Ml && r.Vl.Ba(s.targetId, t.fromCache ? "not-current" : "current"), i.push(t));
                var e = Ji.oc(s.targetId, t);
                o.push(e);
              }
            }));
          }), [4, /*yield*/
          Promise.all(u)]));
        case 1:
          return (s.sent(), r.bl.ah(i), [4, /*yield*/
          (function (t, e) {
            return _tslib.__awaiter(this, void 0, void 0, function () {
              var n, r, i, o, u, s, a, c, h;
              return _tslib.__generator(this, function (f) {
                switch (f.label) {
                  case 0:
                    (n = O(t), f.label = 1);
                  case 1:
                    return (f.trys.push([1, 3, , 4]), [4, /*yield*/
                    n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function (t) {
                      return lr.forEach(e, function (e) {
                        return lr.forEach(e.ic, function (r) {
                          return n.persistence.Ti.nr(t, e.targetId, r);
                        }).next(function () {
                          return lr.forEach(e.rc, function (r) {
                            return n.persistence.Ti.ir(t, e.targetId, r);
                          });
                        });
                      });
                    })]);
                  case 2:
                    return (f.sent(), [3, /*break*/
                    4]);
                  case 3:
                    if (!mr(r = f.sent())) throw r;
                    // If `notifyLocalViewChanges` fails, we did not advance the sequence
                    // number for the documents that were included in this transaction.
                    // This might trigger them to be deleted earlier than they otherwise
                    // would have, but it should not invalidate the integrity of the data.
                    return (N("LocalStore", "Failed to update sequence numbers: " + r), [3, /*break*/
                    4]);
                  case 4:
                    for ((i = 0, o = e); i < o.length; i++) (u = o[i], s = u.targetId, u.fromCache || (a = n.fc.get(s), c = a.Ot, h = a.Lt(c), // Advance the last limbo free snapshot version
                    n.fc = n.fc.zt(s, h)));
                    return [2];
                }
              });
            });
          })(r.bh, o)]);
        case 2:
          (s.sent(), s.label = 3);
        case 3:
          return [2];
      }
    });
  });
}
function os(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r;
    return _tslib.__generator(this, function (i) {
      switch (i.label) {
        case 0:
          return (n = O(t)).currentUser.isEqual(e) ? [3, /*break*/
          3] : (N("SyncEngine", "User change. New user:", e.A()), [4, /*yield*/
          no(n.bh, e)]);
        case 1:
          return (r = i.sent(), n.currentUser = e, // Fails tasks waiting for pending writes requested by previous user.
          (function (t, e) {
            (t.Fl.forEach(function (t) {
              t.forEach(function (t) {
                t.reject(new q(M.CANCELLED, "'waitForPendingWrites' promise is rejected due to a user change."));
              });
            }), t.Fl.clear());
          })(n), // TODO(b/114226417): Consider calling this only in the primary tab.
          n.Vl.Ua(e, r.mc, r.Ac), [4, /*yield*/
          is(n, r.Ic)]);
        case 2:
          (i.sent(), i.label = 3);
        case 3:
          return [2];
      }
    });
  });
}
function us(t, e) {
  var n = O(t), r = n.xl.get(e);
  if (r && r.Pl) return mn().add(r.key);
  var i = mn(), o = n.Sl.get(e);
  if (!o) return i;
  for (var u = 0, s = o; u < s.length; u++) {
    var a = s[u], c = n.vl.get(a);
    i = i.Pe(c.view._l);
  }
  return i;
}
/**
* Reconcile the list of synced documents in an existing view with those
* from persistence.
*/
function ss(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i;
    return _tslib.__generator(this, function (o) {
      switch (o.label) {
        case 0:
          return [4, /*yield*/
          ho((n = O(t)).bh, e.query, /*usePreviousResults=*/
          !0)];
        case 1:
          return (r = o.sent(), i = e.view.Al(r), [2, /*return*/
          (n.Ml && es(n, e.targetId, i.Il), i)]);
      }
    });
  });
}
/**
* Retrieves newly changed documents from remote document cache and raises
* snapshots if needed.
*/
// PORTING NOTE: Multi-Tab only.
function as(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var e;
    return _tslib.__generator(this, function (n) {
      return [2, /*return*/
      lo((e = O(t)).bh).then(function (t) {
        return is(e, t);
      })];
    });
  });
}
/** Applies a mutation state to an existing batch.*/
// PORTING NOTE: Multi-Tab only.
function cs(t, e, n, r) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var i, o;
    return _tslib.__generator(this, function (u) {
      switch (u.label) {
        case 0:
          return [4, /*yield*/
          (function (t, e) {
            var n = O(t), r = O(n.zo);
            return n.persistence.runTransaction("Lookup mutation documents", "readonly", function (t) {
              return r.yi(t, e).next(function (e) {
                return e ? n.Tc.Xo(t, e) : lr.resolve(null);
              });
            });
          })((i = O(t)).bh, e)];
        case 1:
          return null === (o = u.sent()) ? [3, /*break*/
          6] : "pending" !== n ? [3, /*break*/
          3] : [4, /*yield*/
          pu(i.yl)];
        case 2:
          // If we are the primary client, we need to send this write to the
          // backend. Secondary clients will ignore these writes since their remote
          // connection is disabled.
          return (u.sent(), [3, /*break*/
          4]);
        case 3:
          ("acknowledged" === n || "rejected" === n ? // NOTE: Both these methods are no-ops for batches that originated from
          // other clients.
          (Ju(i, e, r || null), Zu(i, e), (function (t, e) {
            O(O(t).zo).xi(e);
          })(i.bh, e)) : x(), u.label = 4);
        case 4:
          return [4, /*yield*/
          is(i, o)];
        case 5:
          return (u.sent(), [3, /*break*/
          7]);
        case 6:
          // A throttled tab may not have seen the mutation before it was completed
          // and removed from the mutation queue, in which case we won't have cached
          // the affected documents. In this case we can safely ignore the update
          // since that means we didn't apply the mutation locally at all (if we
          // had, we would have cached the affected documents), and so we will just
          // see any resulting document changes via normal remote document updates
          // as applicable.
          (N("SyncEngine", "Cannot apply mutation batch with id: " + e), u.label = 7);
        case 7:
          return [2];
      }
    });
  });
}
/** Applies a query target change from a different tab.*/
// PORTING NOTE: Multi-Tab only.
function hs(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i, o, u, s, a, c;
    return _tslib.__generator(this, function (h) {
      switch (h.label) {
        case 0:
          return (ys(n = O(t)), ms(n), !0 !== e || !0 === n.kl ? [3, /*break*/
          3] : (r = n.Vl.va(), [4, /*yield*/
          fs(n, r.it())]));
        case 1:
          return (i = h.sent(), n.kl = !0, [4, /*yield*/
          bu(n.yl, !0)]);
        case 2:
          for ((h.sent(), o = 0, u = i); o < u.length; o++) (s = u[o], tu(n.yl, s));
          return [3, /*break*/
          7];
        case 3:
          return !1 !== e || !1 === n.kl ? [3, /*break*/
          7] : (a = [], c = Promise.resolve(), n.Sl.forEach(function (t, e) {
            (n.Vl.Ma(e) ? a.push(e) : c = c.then(function () {
              return ($u(n, e), co(n.bh, e, /*keepPersistedTargetData=*/
              !0));
            }), eu(n.yl, e));
          }), [4, /*yield*/
          c]);
        case 4:
          return (h.sent(), [4, /*yield*/
          fs(n, a)]);
        case 5:
          return (h.sent(), // PORTING NOTE: Multi-Tab only.
          (function (t) {
            var e = O(t);
            (e.xl.forEach(function (t, n) {
              eu(e.yl, n);
            }), e.Nl.Oc(), e.xl = new Map(), e.Cl = new rn(tt.H));
          })(n), n.kl = !1, [4, /*yield*/
          bu(n.yl, !1)]);
        case 6:
          (h.sent(), h.label = 7);
        case 7:
          return [2];
      }
    });
  });
}
function fs(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i, o, u, s, a, c, h, f, l, p, d, v;
    return _tslib.__generator(this, function (y) {
      switch (y.label) {
        case 0:
          (n = O(t), r = [], i = [], o = 0, u = e, y.label = 1);
        case 1:
          return o < u.length ? (s = u[o], a = void 0, (c = n.Sl.get(s)) && 0 !== c.length ? [4, /*yield*/
          ao(n.bh, he(c[0]))] : [3, /*break*/
          7]) : [3, /*break*/
          13];
        case 2:
          // For queries that have a local View, we fetch their current state
          // from LocalStore (as the resume token and the snapshot version
          // might have changed) and reconcile their views with the persisted
          // state (the list of syncedDocuments may have gotten out of sync).
          (a = y.sent(), h = 0, f = c, y.label = 3);
        case 3:
          return h < f.length ? (l = f[h], p = n.vl.get(l), [4, /*yield*/
          ss(n, p)]) : [3, /*break*/
          6];
        case 4:
          ((d = y.sent()).snapshot && i.push(d.snapshot), y.label = 5);
        case 5:
          return (h++, [3, /*break*/
          3]);
        case 6:
          return [3, /*break*/
          11];
        case 7:
          return [4, /*yield*/
          fo(n.bh, s)];
        case 8:
          return (v = y.sent(), [4, /*yield*/
          ao(n.bh, v)]);
        case 9:
          return (a = y.sent(), [4, /*yield*/
          zu(n, ls(v), s, /*current=*/
          !1)]);
        case 10:
          (y.sent(), y.label = 11);
        case 11:
          (r.push(a), y.label = 12);
        case 12:
          return (o++, [3, /*break*/
          1]);
        case 13:
          return [2, /*return*/
          (n.bl.ah(i), r)];
      }
    });
  });
}
/**
* Creates a `Query` object from the specified `Target`. There is no way to
* obtain the original `Query`, so we synthesize a `Query` from the `Target`
* object.
*
* The synthesized result might be different from the original `Query`, but
* since the synthesized `Query` should return the same results as the
* original one (only the presentation of results might differ), the potential
* difference will not cause issues.
*/
// PORTING NOTE: Multi-Tab only.
function ls(t) {
  return ne(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F", /*First*/
  t.startAt, t.endAt);
}
/** Returns the IDs of the clients that are currently active.*/
// PORTING NOTE: Multi-Tab only.
function ps(t) {
  var e = O(t);
  return O(O(e.bh).persistence).Uo();
}
/** Applies a query target change from a different tab.*/
// PORTING NOTE: Multi-Tab only.
function ds(t, e, n, r) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var i, o, u;
    return _tslib.__generator(this, function (s) {
      switch (s.label) {
        case 0:
          return (i = O(t)).kl ? // If we receive a target state notification via WebStorage, we are
          // either already secondary or another tab has taken the primary lease.
          (N("SyncEngine", "Ignoring unexpected query state notification."), [3, /*break*/
          8]) : [3, /*break*/
          1];
        case 1:
          if (!i.Sl.has(e)) return [3, /*break*/
          8];
          switch (n) {
            case "current":
            case "not-current":
              return [3, /*break*/
              2];
            case "rejected":
              return [3, /*break*/
              5];
          }
          return [3, /*break*/
          7];
        case 2:
          return [4, /*yield*/
          lo(i.bh)];
        case 3:
          return (o = s.sent(), u = En.Me(e, "current" === n), [4, /*yield*/
          is(i, o, u)]);
        case 4:
          return (s.sent(), [3, /*break*/
          8]);
        case 5:
          return [4, /*yield*/
          co(i.bh, e, /*keepPersistedTargetData*/
          !0)];
        case 6:
          return (s.sent(), $u(i, e, r), [3, /*break*/
          8]);
        case 7:
          (x(), s.label = 8);
        case 8:
          return [2];
      }
    });
  });
}
/** Adds or removes Watch targets for queries from different tabs.*/
function vs(t, e, n) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var r, i, o, u, s, a, c, h, f, l;
    return _tslib.__generator(this, function (p) {
      switch (p.label) {
        case 0:
          if (!(r = ys(t)).kl) return [3, /*break*/
          10];
          (i = 0, o = e, p.label = 1);
        case 1:
          return i < o.length ? (u = o[i], r.Sl.has(u) ? // A target might have been added in a previous attempt
          (N("SyncEngine", "Adding an already active target " + u), [3, /*break*/
          5]) : [4, /*yield*/
          fo(r.bh, u)]) : [3, /*break*/
          6];
        case 2:
          return (s = p.sent(), [4, /*yield*/
          ao(r.bh, s)]);
        case 3:
          return (a = p.sent(), [4, /*yield*/
          zu(r, ls(s), a.targetId, /*current=*/
          !1)]);
        case 4:
          (p.sent(), tu(r.yl, a), p.label = 5);
        case 5:
          return (i++, [3, /*break*/
          1]);
        case 6:
          (c = function (t) {
            return _tslib.__generator(this, function (e) {
              switch (e.label) {
                case 0:
                  return r.Sl.has(t) ? [4, /*yield*/
                  co(r.bh, t, /*keepPersistedTargetData*/
                  !1).then(function () {
                    (eu(r.yl, t), $u(r, t));
                  }).catch(mi)] : [3, /*break*/
                  2];
                case 1:
                  // Release queries that are still active.
                  (e.sent(), e.label = 2);
                case 2:
                  return [2];
              }
            });
          }, h = 0, f = n, p.label = 7);
        case 7:
          return h < f.length ? (l = f[h], [5, /*yield**/
          c(l)]) : [3, /*break*/
          10];
        case 8:
          (p.sent(), p.label = 9);
        case 9:
          return (h++, [3, /*break*/
          7]);
        case 10:
          return [2];
      }
    });
  });
}
function ys(t) {
  var e = O(t);
  return (e.yl.Dh.Lh = Qu.bind(null, e), e.yl.Dh.vn = us.bind(null, e), e.yl.Dh.Mh = Hu.bind(null, e), e.bl.ah = Du.bind(null, e.gl), e.bl.Bl = Su.bind(null, e.gl), e);
}
function ms(t) {
  var e = O(t);
  return (e.yl.Dh.Bh = Ku.bind(null, e), e.yl.Dh.qh = Xu.bind(null, e), e);
}
function gs(t, e, n) {
  var r = O(t);
  // eslint-disable-next-line @typescript-eslint/no-floating-promises
  (function (t, e, n) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var r, i, o, u, s, a;
      return _tslib.__generator(this, function (c) {
        switch (c.label) {
          case 0:
            return (c.trys.push([0, 14, , 15]), [4, /*yield*/
            e.getMetadata()]);
          case 1:
            return (r = c.sent(), [4, /*yield*/
            (function (t, e) {
              var n = O(t), r = Mn(e.createTime);
              return n.persistence.runTransaction("hasNewerBundle", "readonly", function (t) {
                return n.wo.Os(t, e.id);
              }).then(function (t) {
                return !!t && t.createTime._(r) >= 0;
              });
            })(t.bh, r)]);
          case 2:
            return c.sent() ? [4, /*yield*/
            e.close()] : [3, /*break*/
            4];
          case 3:
            return [2, /*return*/
            (c.sent(), void n.ql((function (t) {
              return {
                taskState: "Success",
                documentsLoaded: t.totalDocuments,
                bytesLoaded: t.totalBytes,
                totalDocuments: t.totalDocuments,
                totalBytes: t.totalBytes
              };
            })(r)))];
          case 4:
            return (n.Ul(Cu(r)), i = new Vu(r, t.bh, e.Qt), [4, /*yield*/
            e.Ql()]);
          case 5:
            (o = c.sent(), c.label = 6);
          case 6:
            return o ? [4, /*yield*/
            i.rl(o)] : [3, /*break*/
            10];
          case 7:
            return ((u = c.sent()) && n.Ul(u), [4, /*yield*/
            e.Ql()]);
          case 8:
            (o = c.sent(), c.label = 9);
          case 9:
            return [3, /*break*/
            6];
          case 10:
            return [4, /*yield*/
            i.complete()];
          case 11:
            // TODO(b/160876443): This currently raises snapshots with
            // `fromCache=false` if users already listen to some queries and bundles
            // has newer version.
            return (s = c.sent(), [4, /*yield*/
            is(t, s.Go, /*remoteEvent*/
            void 0)]);
          case 12:
            // Save metadata, so loading the same bundle will skip.
            // TODO(b/160876443): This currently raises snapshots with
            // `fromCache=false` if users already listen to some queries and bundles
            // has newer version.
            return (c.sent(), [4, /*yield*/
            (function (t, e) {
              var n = O(t);
              return n.persistence.runTransaction("Save bundle", "readwrite", function (t) {
                return n.wo.ks(t, e);
              });
            })(t.bh, r)]);
          case 13:
            // TODO(b/160876443): This currently raises snapshots with
            // `fromCache=false` if users already listen to some queries and bundles
            // has newer version.
            // Save metadata, so loading the same bundle will skip.
            return (c.sent(), n.ql(s.progress), [3, /*break*/
            15]);
          case 14:
            return (D("SyncEngine", "Loading bundle failed with " + (a = c.sent())), n.Kl(a), [3, /*break*/
            15]);
          case 15:
            return [2];
        }
      });
    });
  })(/**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  /**
  * Provides all components needed for Firestore with in-memory persistence.
  * Uses EagerGC garbage collection.
  */
  r, e, n).then(function () {
    r.Vl.Wa();
  });
}
var ws = /** @class*/
(function () {
  function t() {
    this.synchronizeTabs = !1;
  }
  return (t.prototype.initialize = function (t) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (e) {
        switch (e.label) {
          case 0:
            return (this.Qt = Bo(t.yu.t), this.Vl = this.Wl(t), this.persistence = this.jl(t), [4, /*yield*/
            this.persistence.start()]);
          case 1:
            return (e.sent(), this.Gl = this.zl(t), this.bh = this.Hl(t), [2]);
        }
      });
    });
  }, t.prototype.zl = function (t) {
    return null;
  }, t.prototype.Hl = function (t) {
    return eo(this.persistence, new $i(), t.Jl, this.Qt);
  }, t.prototype.jl = function (t) {
    return new To(Ao.ia, this.Qt);
  }, t.prototype.Wl = function (t) {
    return new Ro();
  }, t.prototype.terminate = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (t) {
        switch (t.label) {
          case 0:
            return (this.Gl && this.Gl.stop(), [4, /*yield*/
            this.Vl.ko()]);
          case 1:
            return (t.sent(), [4, /*yield*/
            this.persistence.ko()]);
          case 2:
            return (t.sent(), [2]);
        }
      });
    });
  }, t);
})(), bs = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this) || this).Yl = e, i.cacheSizeBytes = n, i.forceOwnership = r, i.synchronizeTabs = !1, i);
  }
  return (_tslib.__extends(e, t), e.prototype.initialize = function (e) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (n) {
        switch (n.label) {
          case 0:
            return [4, /*yield*/
            t.prototype.initialize.call(this, e)];
          case 1:
            return (n.sent(), [4, /*yield*/
            po(this.bh)]);
          case 2:
            return (n.sent(), [4, /*yield*/
            this.Yl.initialize(this, e)]);
          case 3:
            // Enqueue writes from a previous session
            return (n.sent(), [4, /*yield*/
            ms(this.Yl._a)]);
          case 4:
            // Enqueue writes from a previous session
            return (n.sent(), [4, /*yield*/
            pu(this.Yl.yl)]);
          case 5:
            return (n.sent(), [2]);
        }
      });
    });
  }, e.prototype.Hl = function (t) {
    return eo(this.persistence, new $i(), t.Jl, this.Qt);
  }, e.prototype.zl = function (t) {
    var e = this.persistence.Ti.lr;
    return new Ci(e, t._s);
  }, e.prototype.jl = function (t) {
    var e = Xi(t.yu.t, t.yu.persistenceKey), n = void 0 !== this.cacheSizeBytes ? yi.Ys(this.cacheSizeBytes) : yi.ti;
    return new Yi(this.synchronizeTabs, e, t.clientId, n, t._s, zo(), Go(), this.Qt, this.Vl, !!this.forceOwnership);
  }, e.prototype.Wl = function (t) {
    return new Ro();
  }, e);
})(ws), _s = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, e, n, /*forceOwnership=*/
    !1) || this).Yl = e, r.cacheSizeBytes = n, r.synchronizeTabs = !0, r);
  }
  return (_tslib.__extends(e, t), e.prototype.initialize = function (e) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var n, r = this;
      return _tslib.__generator(this, function (i) {
        switch (i.label) {
          case 0:
            return [4, /*yield*/
            t.prototype.initialize.call(this, e)];
          case 1:
            return (i.sent(), n = this.Yl._a, this.Vl instanceof Lo ? (this.Vl._a = {
              eu: cs.bind(null, n),
              nu: ds.bind(null, n),
              su: vs.bind(null, n),
              Uo: ps.bind(null, n),
              tu: as.bind(null, n)
            }, [4, /*yield*/
            this.Vl.start()]) : [3, /*break*/
            3]);
          case 2:
            (i.sent(), i.label = 3);
          case 3:
            // NOTE: This will immediately call the listener, so we make sure to
            // set it after localStore / remoteStore are started.
            return [4, /*yield*/
            this.persistence.Ro(function (t) {
              return _tslib.__awaiter(r, void 0, void 0, function () {
                return _tslib.__generator(this, function (e) {
                  switch (e.label) {
                    case 0:
                      return [4, /*yield*/
                      hs(this.Yl._a, t)];
                    case 1:
                      return (e.sent(), this.Gl && (t && !this.Gl.Er ? this.Gl.start(this.bh) : t || this.Gl.stop()), [2]);
                  }
                });
              });
            })];
          case 4:
            // NOTE: This will immediately call the listener, so we make sure to
            // set it after localStore / remoteStore are started.
            return (i.sent(), [2]);
        }
      });
    });
  }, e.prototype.Wl = function (t) {
    var e = zo();
    if (!Lo.Kn(e)) throw new q(M.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
    var n = Xi(t.yu.t, t.yu.persistenceKey);
    return new Lo(e, t._s, n, t.clientId, t.Jl);
  }, e);
})(bs), Is = /** @class*/
(function () {
  function t() {}
  return (t.prototype.initialize = function (t, e) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var n = this;
      return _tslib.__generator(this, function (r) {
        switch (r.label) {
          case 0:
            return this.bh ? [3, /*break*/
            2] : (this.bh = t.bh, this.Vl = t.Vl, this.Sh = this.Xl(e), this.yl = this.Zl(e), this.gl = this.t_(e), this._a = this.e_(e, /*startAsPrimary=*/
            !t.synchronizeTabs), this.Vl.fa = function (t) {
              return Yu(n._a, t, 1);
            }, this.yl.Dh.n_ = os.bind(null, this._a), [4, /*yield*/
            bu(this.yl, this._a.Ml)]);
          case 1:
            (r.sent(), r.label = 2);
          case 2:
            return [2];
        }
      });
    });
  }, t.prototype.t_ = function (t) {
    return new Tu();
  }, t.prototype.Xl = function (t) {
    var e, n = Bo(t.yu.t), r = (e = t.yu, new jo(e));
    /** Return the Platform-specific connectivity monitor.*/
    return (function (t, e, n) {
      return new Xo(t, e, n);
    })(t.credentials, r, n);
  }, t.prototype.Zl = function (t) {
    var e, n, r, i, o, u = this;
    return (e = this.bh, n = this.Sh, r = t._s, i = function (t) {
      return Yu(u._a, t, 0);
    }, o = Mo.Kn() ? new Mo() : new Uo(), new Zo(e, n, r, i, o));
  }, t.prototype.e_ = function (t, e) {
    return (function (t, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
    r, i, o, u) {
      var s = new Fu(t, e, n, r, i, o);
      return (u && (s.kl = !0), s);
    })(this.bh, this.yl, this.gl, this.Vl, t.Jl, t.pl, e);
  }, t.prototype.terminate = function () {
    return (function (t) {
      return _tslib.__awaiter(this, void 0, void 0, function () {
        var e;
        return _tslib.__generator(this, function (n) {
          switch (n.label) {
            case 0:
              return (e = O(t), N("RemoteStore", "RemoteStore shutting down."), e.Nh.add(5), [4, /*yield*/
              $o(e)]);
            case 1:
              return (n.sent(), e.Fh.ko(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
              // triggering spurious listener events with cached data, etc.
              e.Oh.set("Unknown"), [2]);
          }
        });
      });
    })(this.yl);
  }, t);
})();
/**
* Provides all components needed for Firestore with IndexedDB persistence.
*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* How many bytes to read each time when `ReadableStreamReader.read()` is
* called. Only applicable for byte streams that we control (e.g. those backed
* by an UInt8Array).
*/
/**
* Builds a `ByteStreamReader` from a UInt8Array.
* @param source - The data source to use.
* @param bytesPerRead - How many bytes each `read()` from the returned reader
*        will read.
*/
function Es(t, e) {
  void 0 === e && (e = 10240);
  var n = 0;
  return {
    read: function () {
      return _tslib.__awaiter(this, void 0, void 0, function () {
        var r;
        return _tslib.__generator(this, function (i) {
          return n < t.byteLength ? (r = {
            value: t.slice(n, n + e),
            done: !1
          }, [2, /*return*/
          (n += e, r)]) : [2, /*return*/
          {
            done: !0
          }];
        });
      });
    },
    cancel: function () {
      return _tslib.__awaiter(this, void 0, void 0, function () {
        return _tslib.__generator(this, function (t) {
          return [2];
        });
      });
    },
    releaseLock: function () {}
  };
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/*
* A wrapper implementation of Observer<T> that will dispatch events
* asynchronously. To allow immediate silencing, a mute call is added which
* causes events scheduled to no longer be raised.
*/
var Ts = /** @class*/
(function () {
  function t(t) {
    (this.observer = t, /**
    * When set to true, will not raise future events. Necessary to deal with
    * async detachment of listener.
    */
    this.muted = !1);
  }
  return (t.prototype.next = function (t) {
    this.observer.next && this.s_(this.observer.next, t);
  }, t.prototype.error = function (t) {
    this.observer.error ? this.s_(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
  }, t.prototype.i_ = function () {
    this.muted = !0;
  }, t.prototype.s_ = function (t, e) {
    var n = this;
    this.muted || setTimeout(function () {
      n.muted || t(e);
    }, 0);
  }, t);
})(), Ns = /** @class*/
(function () {
  function t(/** The reader to read from underlying binary bundle data source.*/
  t, e) {
    var n = this;
    (this.r_ = t, this.Qt = e, /** Cached bundle metadata.*/
    this.metadata = new fr(), /**
    * Internal buffer to hold bundle content, accumulating incomplete element
    * content.
    */
    this.buffer = new Uint8Array(), this.o_ = new TextDecoder("utf-8"), // Read the metadata (which is the first element).
    this.c_().then(function (t) {
      t && t.sl() ? n.metadata.resolve(t.payload.metadata) : n.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             " + JSON.stringify(null == t ? void 0 : t.payload)));
    }, function (t) {
      return n.metadata.reject(t);
    }));
  }
  return (t.prototype.close = function () {
    return this.r_.cancel();
  }, t.prototype.getMetadata = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (t) {
        return [2, /*return*/
        this.metadata.promise];
      });
    });
  }, t.prototype.Ql = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (t) {
        switch (t.label) {
          case 0:
            return [4, /*yield*/
            this.getMetadata()];
          case 1:
            // Makes sure metadata is read before proceeding.
            return [2, /*return*/
            (t.sent(), this.c_())];
        }
      });
    });
  }, /**
  * Reads from the head of internal buffer, and pulling more data from
  * underlying stream if a complete element cannot be found, until an
  * element(including the prefixed length and the JSON string) is found.
  *
  * Once a complete element is read, it is dropped from internal buffer.
  *
  * Returns either the bundled element, or null if we have reached the end of
  * the stream.
  */
  t.prototype.c_ = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t, e, n, r;
      return _tslib.__generator(this, function (i) {
        switch (i.label) {
          case 0:
            return [4, /*yield*/
            this.a_()];
          case 1:
            return null === (t = i.sent()) ? [2, /*return*/
            null] : (e = this.o_.decode(t), n = Number(e), isNaN(n) && this.u_("length string (" + e + ") is not valid number"), [4, /*yield*/
            this.h_(n)]);
          case 2:
            return (r = i.sent(), [2, /*return*/
            new Ou(JSON.parse(r), t.length + n)]);
        }
      });
    });
  }, /** First index of '{' from the underlying buffer.*/
  t.prototype.l_ = function () {
    return this.buffer.findIndex(function (t) {
      return t === ("{").charCodeAt(0);
    });
  }, /**
  * Reads from the beginning of the internal buffer, until the first '{', and
  * return the content.
  *
  * If reached end of the stream, returns a null.
  */
  t.prototype.a_ = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t, e;
      return _tslib.__generator(this, function (n) {
        switch (n.label) {
          case 0:
            return this.l_() < 0 ? [4, /*yield*/
            this.__()] : [3, /*break*/
            3];
          case 1:
            if (n.sent()) return [3, /*break*/
            3];
            n.label = 2;
          case 2:
            return [3, /*break*/
            0];
          case 3:
            // Broke out of the loop because underlying stream is closed, and there
            // happens to be no more data to process.
            return 0 === this.buffer.length ? [2, /*return*/
            null] : // Broke out of the loop because underlying stream is closed, but still
            // cannot find an open bracket.
            ((t = this.l_()) < 0 && this.u_("Reached the end of bundle when a length string is expected."), e = this.buffer.slice(0, t), [2, /*return*/
            (this.buffer = this.buffer.slice(t), e)]);
        }
      });
    });
  }, /**
  * Reads from a specified position from the internal buffer, for a specified
  * number of bytes, pulling more data from the underlying stream if needed.
  *
  * Returns a string decoded from the read bytes.
  */
  t.prototype.h_ = function (t) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var e;
      return _tslib.__generator(this, function (n) {
        switch (n.label) {
          case 0:
            return this.buffer.length < t ? [4, /*yield*/
            this.__()] : [3, /*break*/
            3];
          case 1:
            (n.sent() && this.u_("Reached the end of bundle when more is expected."), n.label = 2);
          case 2:
            return [3, /*break*/
            0];
          case 3:
            // Update the internal buffer to drop the read json string.
            return (e = this.o_.decode(this.buffer.slice(0, t)), [2, /*return*/
            (this.buffer = this.buffer.slice(t), e)]);
        }
      });
    });
  }, t.prototype.u_ = function (t) {
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    throw (this.r_.cancel(), new Error("Invalid bundle format: " + t));
  }, /**
  * Pulls more data from underlying stream to internal buffer.
  * Returns a boolean indicating whether the stream is finished.
  */
  t.prototype.__ = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t, e;
      return _tslib.__generator(this, function (n) {
        switch (n.label) {
          case 0:
            return [4, /*yield*/
            this.r_.read()];
          case 1:
            return ((t = n.sent()).done || ((e = new Uint8Array(this.buffer.length + t.value.length)).set(this.buffer), e.set(t.value, this.buffer.length), this.buffer = e), [2, /*return*/
            t.done]);
        }
      });
    });
  }, t);
})(), As = /** @class*/
(function () {
  /**
  * Creates a FieldPath from the provided field names. If more than one field
  * name is provided, the path will point to a nested field in a document.
  *
  * @param fieldNames - A list of field names.
  */
  function t() {
    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
    for (var n = 0; n < t.length; ++n) if (0 === t[n].length) throw new q(M.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
    this.f_ = new $(t);
  }
  /**
  * Returns true if this `FieldPath` is equal to the provided one.
  *
  * @param other - The `FieldPath` to compare against.
  * @returns true if this `FieldPath` is equal to the provided one.
  */
  return (t.prototype.isEqual = function (t) {
    return this.f_.isEqual(t.f_);
  }, t);
})(), Ds = /**
* @param _methodName - The public API endpoint that returns this class.
*/
function (t) {
  this._methodName = t;
}, Ss = function (t) {
  this.d_ = t;
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A class representing a bundle.
*
* Takes a bundle stream or buffer, and presents abstractions to read bundled
* elements out of the underlying content.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function xs(t, e, n) {
  if (!n) throw new q(M.INVALID_ARGUMENT, "Function " + t + "() cannot be called with an empty " + e + ".");
}
function ks(t, e) {
  if (void 0 === e) return {
    merge: !1
  };
  if (void 0 !== e.mergeFields && void 0 !== e.merge) throw new q(M.INVALID_ARGUMENT, "Invalid options passed to function " + t + '(): You cannot specify both "merge" and "mergeFields".');
  return e;
}
/**
* Validates that two boolean options are not set at the same time.
*/
function Os(t, e, n, r) {
  if (!0 === e && !0 === r) throw new q(M.INVALID_ARGUMENT, t + " and " + n + " cannot be used together.");
}
/**
* Validates that `path` refers to a document (indicated by the fact it contains
* an even numbers of segments).
*/
function Ps(t) {
  if (!tt.wt(t)) throw new q(M.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t + " has " + t.length + ".");
}
/**
* Validates that `path` refers to a collection (indicated by the fact it
* contains an odd numbers of segments).
*/
function Vs(t) {
  if (tt.wt(t)) throw new q(M.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t + " has " + t.length + ".");
}
/**
* Returns true if it's a non-null object without a custom prototype
* (i.e. excludes Array, Date, etc.).
*/
/** Returns a string describing the type / value of the provided input.*/
function Cs(t) {
  if (void 0 === t) return "undefined";
  if (null === t) return "null";
  if ("string" == typeof t) return (t.length > 20 && (t = t.substring(0, 20) + "..."), JSON.stringify(t));
  if ("number" == typeof t || "boolean" == typeof t) return "" + t;
  if ("object" == typeof t) {
    if (t instanceof Array) return "an array";
    var e = /** Hacky method to try to get the constructor name for an object.*/
    (function (t) {
      if (t.constructor) {
        var e = (/function\s+([^\s(]+)\s*\(/).exec(t.constructor.toString());
        if (e && e.length > 1) return e[1];
      }
      return null;
    })(t);
    return e ? "a custom " + e + " object" : "an object";
  }
  return "function" == typeof t ? "a function" : x();
}
function Ls(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
  if ((("_delegate" in t) && (// Unwrap Compat types
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  t = t.d_), !(t instanceof e))) {
    if (e.name === t.constructor.name) throw new q(M.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    var n = Cs(t);
    throw new q(M.INVALID_ARGUMENT, "Expected type '" + e.name + "', but it was: " + n);
  }
  return t;
}
function Rs(t, e) {
  if (e <= 0) throw new q(M.INVALID_ARGUMENT, "Function " + t + "() requires a positive number, but it was: " + e + ".");
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
// settings() defaults:
/**
* A concrete type describing all the values that can be applied via a
* user-supplied firestore.Settings object. This is a separate type so that
* defaults can be supplied and the value can be checked for equality.
*/
var Us = /** @class*/
(function () {
  function t(t) {
    var e;
    if (void 0 === t.host) {
      if (void 0 !== t.ssl) throw new q(M.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      (this.host = "firestore.googleapis.com", this.ssl = !0);
    } else (this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e);
    if ((this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, void 0 === t.cacheSizeBytes)) this.cacheSizeBytes = 41943040; else {
      if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new q(M.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
      this.cacheSizeBytes = t.cacheSizeBytes;
    }
    (this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, Os("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling));
  }
  return (t.prototype.isEqual = function (t) {
    return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties;
  }, t);
})(), Ms = new Map(), qs = /** @class*/
(function () {
  /** @hideconstructor*/
  function t(t, e) {
    (this.w_ = "(lite)", this.E_ = new Us({}), this.T_ = !1, t instanceof I ? (this.I_ = t, this.m_ = new G()) : (this.A_ = t, this.I_ = (function (t) {
      if (!Object.prototype.hasOwnProperty.apply(t.options, ["projectId"])) throw new q(M.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
      return new I(t.options.projectId);
    })(t), this.m_ = new B(e)));
  }
  return (Object.defineProperty(t.prototype, "app", {
    /**
    * The {@link FirebaseApp} associated with this `Firestore` service
    * instance.
    */
    get: function () {
      if (!this.A_) throw new q(M.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
      return this.A_;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "R_", {
    get: function () {
      return this.T_;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "P_", {
    get: function () {
      return void 0 !== this.y_;
    },
    enumerable: !1,
    configurable: !0
  }), t.prototype.g_ = function (t) {
    if (this.T_) throw new q(M.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
    (this.E_ = new Us(t), void 0 !== t.credentials && (this.m_ = (function (t) {
      if (!t) return new G();
      switch (t.type) {
        case "gapi":
          var e = t.client;
          // Make sure this really is a Gapi client.
          return (k(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), new Y(e, t.sessionIndex || "0"));
        case "provider":
          return t.client;
        default:
          throw new q(M.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
      }
    })(t.credentials)));
  }, t.prototype.V_ = function () {
    return this.E_;
  }, t.prototype.p_ = function () {
    return (this.T_ = !0, this.E_);
  }, t.prototype._delete = function () {
    return (this.y_ || (this.y_ = this.b_()), this.y_);
  }, t.prototype.toJSON = function () {
    return {
      app: this.A_,
      t: this.I_,
      settings: this.E_
    };
  }, /**
  * Terminates all components used by this client. Subclasses can override
  * this method to clean up their own dependencies, but must also call this
  * method.
  *
  * Only ever called once.
  */
  t.prototype.b_ = function () {
    /**
    * Removes all components associated with the provided instance. Must be called
    * when the `Firestore` instance is terminated.
    */
    return (t = this, (e = Ms.get(t)) && (N("ComponentProvider", "Removing Datastore"), Ms.delete(t), e.terminate()), Promise.resolve());
    var t, e;
  }, t);
})(), Fs = /** @class*/
(function () {
  /** @hideconstructor*/
  function t(t, e, n) {
    (this.v_ = e, this.S_ = n, /** The type of this Firestore reference.*/
    this.type = "document", this.firestore = t);
  }
  return (Object.defineProperty(t.prototype, "D_", {
    get: function () {
      return this.S_.path;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "id", {
    /**
    * The document's identifier within its collection.
    */
    get: function () {
      return this.S_.path.tt();
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "path", {
    /**
    * A string representing the path of the referenced document (relative
    * to the root of the database).
    */
    get: function () {
      return this.S_.path.rt();
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "parent", {
    /**
    * The collection this `DocumentReference` belongs to.
    */
    get: function () {
      return new zs(this.firestore, this.v_, this.S_.path.X());
    },
    enumerable: !1,
    configurable: !0
  }), /**
  * Applies a custom data converter to this `DocumentReference`, allowing you
  * to use your own custom model objects with Firestore. When you call {@link
  * setDoc}, {@link getDoc}, etc. with the returned `DocumentReference`
  * instance, the provided converter will convert between Firestore data and
  * your custom type `U`.
  *
  * @param converter - Converts objects to and from Firestore.
  * @returns A `DocumentReference<U>` that uses the provided converter.
  */
  t.prototype.withConverter = function (e) {
    return new t(this.firestore, e, this.S_);
  }, t);
})(), js = /** @class*/
(function () {
  // This is the lite version of the Query class in the main SDK.
  /** @hideconstructor protected*/
  function t(t, e, n) {
    (this.v_ = e, this.C_ = n, /** The type of this Firestore reference.*/
    this.type = "query", this.firestore = t);
  }
  return (t.prototype.withConverter = function (e) {
    return new t(this.firestore, e, this.C_);
  }, t);
})(), zs = /** @class*/
(function (t) {
  /** @hideconstructor*/
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this, e, n, re(r)) || this).firestore = e, i.D_ = r, i.type = "collection", i);
  }
  return (_tslib.__extends(e, t), Object.defineProperty(e.prototype, "id", {
    /** The collection's identifier.*/
    get: function () {
      return this.C_.path.tt();
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "path", {
    /**
    * A string representing the path of the referenced collection (relative
    * to the root of the database).
    */
    get: function () {
      return this.C_.path.rt();
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "parent", {
    /**
    * A reference to the containing `DocumentReference` if this is a
    * subcollection. If this isn't a subcollection, the reference is null.
    */
    get: function () {
      var t = this.D_.X();
      return t.et() ? null : new Fs(this.firestore, /*converter=*/
      null, new tt(t));
    },
    enumerable: !1,
    configurable: !0
  }), /**
  * Applies a custom data converter to this CollectionReference, allowing you
  * to use your own custom model objects with Firestore. When you call {@link
  * addDoc} with the returned `CollectionReference` instance, the provided
  * converter will convert between Firestore data and your custom type `U`.
  *
  * @param converter - Converts objects to and from Firestore.
  * @returns A `CollectionReference<U>` that uses the provided converter.
  */
  e.prototype.withConverter = function (t) {
    return new e(this.firestore, t, this.D_);
  }, e);
})(js);
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function Gs(t, e) {
  for (var n, r = [], i = 2; i < arguments.length; i++) r[i - 2] = arguments[i];
  if ((t instanceof Ss && (t = t.d_), xs("collection", "path", e), t instanceof qs)) return (Vs(n = Z.ot.apply(Z, _tslib.__spreadArrays([e], r))), new zs(t, /*converter=*/
  null, n));
  if (!(t instanceof Fs || t instanceof zs)) throw new q(M.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
  return (Vs(n = Z.ot.apply(Z, _tslib.__spreadArrays([t.path], r)).child(Z.ot(e))), new zs(t.firestore, /*converter=*/
  null, n));
}
// TODO(firestorelite): Consider using ErrorFactory -
// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
/**
* Creates and returns a new `Query` instance that includes all documents in the
* database that are contained in a collection or subcollection with the
* given `collectionId`.
*
* @param firestore - A reference to the root Firestore instance.
* @param collectionId - Identifies the collections to query over. Every
* collection or subcollection with this ID as the last segment of its path
* will be included. Cannot contain a slash.
* @returns The created `Query`.
*/
function Bs(t, e) {
  for (var n, r = [], i = 2; i < arguments.length; i++) r[i - 2] = arguments[i];
  if ((t instanceof Ss && (t = t.d_), // We allow omission of 'pathString' but explicitly prohibit passing in both
  // 'undefined' and 'null'.
  1 === arguments.length && (e = V.u()), xs("doc", "path", e), t instanceof qs)) return (Ps(n = Z.ot.apply(Z, _tslib.__spreadArrays([e], r))), new Fs(t, /*converter=*/
  null, new tt(n)));
  if (!(t instanceof Fs || t instanceof zs)) throw new q(M.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
  return (Ps(n = t.D_.child(Z.ot.apply(Z, _tslib.__spreadArrays([e], r)))), new Fs(t.firestore, t instanceof zs ? t.v_ : null, new tt(n)));
}
/**
* Returns true if the provided references are equal.
*
* @param left - A reference to compare.
* @param right - A reference to compare.
* @returns true if the references point to the same location in the same
* Firestore database.
*/
function Qs(t, e) {
  return (t instanceof Ss && (t = t.d_), e instanceof Ss && (e = e.d_), (t instanceof Fs || t instanceof zs) && (e instanceof Fs || e instanceof zs) && t.firestore === e.firestore && t.path === e.path && t.v_ === e.v_);
}
function Ys(t, e) {
  return (t instanceof Ss && (t = t.d_), e instanceof Ss && (e = e.d_), t instanceof js && e instanceof js && t.firestore === e.firestore && le(t.C_, e.C_) && t.v_ === e.v_);
}
var Hs = /** @class*/
(function () {
  /**
  * Creates a new immutable `GeoPoint` object with the provided latitude and
  * longitude values.
  * @param latitude - The latitude as number between -90 and 90.
  * @param longitude - The longitude as number between -180 and 180.
  */
  function t(t, e) {
    if (!isFinite(t) || t < -90 || t > 90) throw new q(M.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
    if (!isFinite(e) || e < -180 || e > 180) throw new q(M.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
    (this.x_ = t, this.N_ = e);
  }
  return (Object.defineProperty(t.prototype, "latitude", {
    /**
    * The latitude of this `GeoPoint` instance.
    */
    get: function () {
      return this.x_;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "longitude", {
    /**
    * The longitude of this `GeoPoint` instance.
    */
    get: function () {
      return this.N_;
    },
    enumerable: !1,
    configurable: !0
  }), /**
  * Returns true if this `GeoPoint` is equal to the provided one.
  *
  * @param other - The `GeoPoint` to compare against.
  * @returns true if this `GeoPoint` is equal to the provided one.
  */
  t.prototype.isEqual = function (t) {
    return this.x_ === t.x_ && this.N_ === t.N_;
  }, t.prototype.toJSON = function () {
    return {
      latitude: this.x_,
      longitude: this.N_
    };
  }, /**
  * Actually private to JS consumers of our API, so this function is prefixed
  * with an underscore.
  */
  t.prototype.U = function (t) {
    return C(this.x_, t.x_) || C(this.N_, t.N_);
  }, t);
})(), Ks = /^__.*__$/, Xs = /** @class*/
(function () {
  function t(t, e, n) {
    (this.data = t, this.Gt = e, this.fieldTransforms = n);
  }
  return (t.prototype.F_ = function (t, e) {
    return null !== this.Gt ? new Qe(t, this.data, this.Gt, e, this.fieldTransforms) : new Be(t, this.data, e, this.fieldTransforms);
  }, t);
})(), Ws = /** @class*/
(function () {
  function t(t, // The fieldMask does not include document transforms.
  e, n) {
    (this.data = t, this.Gt = e, this.fieldTransforms = n);
  }
  return (t.prototype.F_ = function (t, e) {
    return new Qe(t, this.data, this.Gt, e, this.fieldTransforms);
  }, t);
})();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function Zs(t) {
  switch (t) {
    case 0:
    case 2:
    case 1:
      /*Update*/
      return !0;
    case 3:
    case 4:
      /*ArrayArgument*/
      return !1;
    default:
      throw x();
  }
}
/** A "context" object passed around while parsing user data.*/
var Js = /** @class*/
(function () {
  /**
  * Initializes a ParseContext with the given source and path.
  *
  * @param settings - The settings for the parser.
  * @param databaseId - The database ID of the Firestore instance.
  * @param serializer - The serializer to use to generate the Value proto.
  * @param ignoreUndefinedProperties - Whether to ignore undefined properties
  * rather than throw.
  * @param fieldTransforms - A mutable list of field transforms encountered
  * while parsing the data.
  * @param fieldMask - A mutable list of field paths encountered while parsing
  * the data.
  *
  * TODO(b/34871131): We don't support array paths right now, so path can be
  * null to indicate the context represents any location within an array (in
  * which case certain features will not work and errors will be somewhat
  * compromised).
  */
  function t(t, e, n, r, i, o) {
    (this.settings = t, this.t = e, this.Qt = n, this.ignoreUndefinedProperties = r, // Minor hack: If fieldTransforms is undefined, we assume this is an
    // external call and we need to validate the entire path.
    void 0 === i && this.O_(), this.fieldTransforms = i || [], this.Gt = o || []);
  }
  return (Object.defineProperty(t.prototype, "path", {
    get: function () {
      return this.settings.path;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "k_", {
    get: function () {
      return this.settings.k_;
    },
    enumerable: !1,
    configurable: !0
  }), /** Returns a new context with the specified settings overwritten.*/
  t.prototype.M_ = function (e) {
    return new t(Object.assign(Object.assign({}, this.settings), e), this.t, this.Qt, this.ignoreUndefinedProperties, this.fieldTransforms, this.Gt);
  }, t.prototype.L_ = function (t) {
    var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.M_({
      path: n,
      B_: !1
    });
    return (r.q_(t), r);
  }, t.prototype.U_ = function (t) {
    var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.M_({
      path: n,
      B_: !1
    });
    return (r.O_(), r);
  }, t.prototype.Q_ = function (t) {
    // TODO(b/34871131): We don't support array paths right now; so make path
    // undefined.
    return this.M_({
      path: void 0,
      B_: !0
    });
  }, t.prototype.K_ = function (t) {
    return ga(t, this.settings.methodName, this.settings.W_ || !1, this.path, this.settings.j_);
  }, /** Returns 'true' if 'fieldPath' was traversed when creating this context.*/
  t.prototype.contains = function (t) {
    return void 0 !== this.Gt.find(function (e) {
      return t.nt(e);
    }) || void 0 !== this.fieldTransforms.find(function (e) {
      return t.nt(e.field);
    });
  }, t.prototype.O_ = function () {
    // TODO(b/34871131): Remove null check once we have proper paths for fields
    // within arrays.
    if (this.path) for (var t = 0; t < this.path.length; t++) this.q_(this.path.get(t));
  }, t.prototype.q_ = function (t) {
    if (0 === t.length) throw this.K_("Document fields must not be empty");
    if (Zs(this.k_) && Ks.test(t)) throw this.K_('Document fields cannot begin and end with "__"');
  }, t);
})(), $s = /** @class*/
(function () {
  function t(t, e, n) {
    (this.t = t, this.ignoreUndefinedProperties = e, this.Qt = n || Bo(t));
  }
  return (t.prototype.G_ = function (t, e, n, r) {
    return (void 0 === r && (r = !1), new Js({
      k_: t,
      methodName: e,
      j_: n,
      path: $.ct(),
      B_: !1,
      W_: r
    }, this.t, this.Qt, this.ignoreUndefinedProperties));
  }, t);
})();
/**
* Helper for parsing raw user input (provided via the API) into internal model
* classes.
*/
function ta(t) {
  var e = t.p_(), n = Bo(t.I_);
  return new $s(t.I_, !!e.ignoreUndefinedProperties, n);
}
/** Parse document data from a set() call.*/
function ea(t, e, n, r, i, o) {
  void 0 === o && (o = {});
  var u = t.G_(o.merge || o.mergeFields ? 2 : /*MergeSet*/
  0, /*Set*/
  e, n, i);
  da("Data must be an object, but it was:", u, r);
  var s, a, c = la(r, u);
  if (o.merge) (s = new it(u.Gt), a = u.fieldTransforms); else if (o.mergeFields) {
    for (var h = [], f = 0, l = o.mergeFields; f < l.length; f++) {
      var p = va(e, l[f], n);
      if (!u.contains(p)) throw new q(M.INVALID_ARGUMENT, "Field '" + p + "' is specified in your field mask but missing from your input data.");
      wa(h, p) || h.push(p);
    }
    (s = new it(h), a = u.fieldTransforms.filter(function (t) {
      return s.Tt(t.field);
    }));
  } else (s = null, a = u.fieldTransforms);
  return new Xs(new St(c), s, a);
}
var na = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.z_ = function (t) {
    if (2 !== /*MergeSet*/
    t.k_) throw 1 === /*Update*/
    t.k_ ? t.K_(this._methodName + "() can only appear at the top level of your update data") : t.K_(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
    // No transform to add for a delete, but we need to add it to our
    // fieldMask so it gets deleted.
    return (t.Gt.push(t.path), null);
  }, e.prototype.isEqual = function (t) {
    return t instanceof e;
  }, e);
})(Ds);
/**
* Creates a child context for parsing SerializableFieldValues.
*
* This is different than calling `ParseContext.contextWith` because it keeps
* the fieldTransforms and fieldMask separate.
*
* The created context has its `dataSource` set to `UserDataSource.Argument`.
* Although these values are used with writes, any elements in these FieldValues
* are not considered writes since they cannot contain any FieldValue sentinels,
* etc.
*
* @param fieldValue - The sentinel FieldValue for which to create a child
*     context.
* @param context - The parent context.
* @param arrayElement - Whether or not the FieldValue has an array.
*/
function ra(t, e, n) {
  return new Js({
    k_: 3,
    /*Argument*/
    j_: e.settings.j_,
    methodName: t._methodName,
    B_: n
  }, e.t, e.Qt, e.ignoreUndefinedProperties);
}
var ia = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.z_ = function (t) {
    return new Ce(t.path, new Ae());
  }, e.prototype.isEqual = function (t) {
    return t instanceof e;
  }, e);
})(Ds), oa = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, e) || this).H_ = n, r);
  }
  return (_tslib.__extends(e, t), e.prototype.z_ = function (t) {
    var e = ra(this, t, /*array=*/
    !0), n = this.H_.map(function (t) {
      return fa(t, e);
    }), r = new De(n);
    return new Ce(t.path, r);
  }, e.prototype.isEqual = function (t) {
    // TODO(mrschmidt): Implement isEquals
    return this === t;
  }, e);
})(Ds), ua = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, e) || this).H_ = n, r);
  }
  return (_tslib.__extends(e, t), e.prototype.z_ = function (t) {
    var e = ra(this, t, /*array=*/
    !0), n = this.H_.map(function (t) {
      return fa(t, e);
    }), r = new xe(n);
    return new Ce(t.path, r);
  }, e.prototype.isEqual = function (t) {
    // TODO(mrschmidt): Implement isEquals
    return this === t;
  }, e);
})(Ds), sa = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, e) || this).J_ = n, r);
  }
  return (_tslib.__extends(e, t), e.prototype.z_ = function (t) {
    var e = new Oe(t.Qt, _e(t.Qt, this.J_));
    return new Ce(t.path, e);
  }, e.prototype.isEqual = function (t) {
    // TODO(mrschmidt): Implement isEquals
    return this === t;
  }, e);
})(Ds);
/** Parse update data from an update() call.*/
function aa(t, e, n, r) {
  var i = t.G_(1, /*Update*/
  e, n);
  da("Data must be an object, but it was:", i, r);
  var o = [], u = new xt();
  nt(r, function (t, r) {
    var s = ma(e, t, n);
    // For Compat types, we have to "extract" the underlying types before
    // performing validation.
    r instanceof Ss && (r = r.d_);
    var a = i.U_(s);
    if (r instanceof na) // Add it to the field mask, but don't add anything to updateData.
    o.push(s); else {
      var c = fa(r, a);
      null != c && (o.push(s), u.set(s, c));
    }
  });
  var s = new it(o);
  return new Ws(u.Pt(), s, i.fieldTransforms);
}
/** Parse update data from a list of field/value arguments.*/
function ca(t, e, n, r, i, o) {
  var u = t.G_(1, /*Update*/
  e, n), s = [va(e, r, n)], a = [i];
  if (o.length % 2 != 0) throw new q(M.INVALID_ARGUMENT, "Function " + e + "() needs to be called with an even number of arguments that alternate between field names and values.");
  for (var c = 0; c < o.length; c += 2) (s.push(va(e, o[c])), a.push(o[c + 1]));
  // We iterate in reverse order to pick the last value for a field if the
  // user specified the field multiple times.
  for (var h = [], f = new xt(), l = s.length - 1; l >= 0; --l) if (!wa(h, s[l])) {
    var p = s[l], d = a[l];
    // For Compat types, we have to "extract" the underlying types before
    // performing validation.
    d instanceof Ss && (d = d.d_);
    var v = u.U_(p);
    if (d instanceof na) // Add it to the field mask, but don't add anything to updateData.
    h.push(p); else {
      var y = fa(d, v);
      null != y && (h.push(p), f.set(p, y));
    }
  }
  var m = new it(h);
  return new Ws(f.Pt(), m, u.fieldTransforms);
}
/**
* Parse a "query value" (e.g. value in a where filter or a value in a cursor
* bound).
*
* @param allowArrays - Whether the query value is an array that may directly
* contain additional arrays (e.g. the operand of an `in` query).
*/
function ha(t, e, n, r) {
  return (void 0 === r && (r = !1), fa(n, t.G_(r ? 4 : /*ArrayArgument*/
  3, /*Argument*/
  e)));
}
/**
* Parses user data to Protobuf Values.
*
* @param input - Data to be parsed.
* @param context - A context object representing the current path being parsed,
* the source of the data being parsed, etc.
* @returns The parsed value, or null if the value was a FieldValue sentinel
* that should not be included in the resulting parsed data.
*/
function fa(t, e) {
  if (// Unwrap the API type from the Compat SDK. This will return the API type
  // from firestore-exp.
  (t instanceof Ss && (t = t.d_), pa(t))) return (da("Unsupported field value:", e, t), la(t, e));
  if (t instanceof Ds) // FieldValues usually parse into transforms (except FieldValue.delete())
  // in which case we do not want to include this field in our parsed data
  // (as doing so will overwrite the field directly prior to the transform
  // trying to transform it). So we don't add this location to
  // context.fieldMask and we return null as our parsing result.
  /**
  * "Parses" the provided FieldValueImpl, adding any necessary transforms to
  * context.fieldTransforms.
  */
  return ((function (t, e) {
    // Sentinels are only supported with writes, and not within arrays.
    if (!Zs(e.k_)) throw e.K_(t._methodName + "() can only be used with update() and set()");
    if (!e.path) throw e.K_(t._methodName + "() is not currently supported inside arrays");
    var n = t.z_(e);
    n && e.fieldTransforms.push(n);
  })(t, e), null);
  if (void 0 === t && e.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so
  // don't handle this below. If `ignoreUndefinedProperties` is false,
  // `parseScalarValue` will reject an undefined value.
  return null;
  if (// If context.path is null we are inside an array and we don't support
  // field mask paths more granular than the top-level array.
  (e.path && e.Gt.push(e.path), t instanceof Array)) {
    // TODO(b/34871131): Include the path containing the array in the error
    // message.
    // In the case of IN queries, the parsed data is an array (representing
    // the set of values to be included for the IN query) that may directly
    // contain additional arrays (each representing an individual field
    // value), so we disable this validation.
    if (e.settings.B_ && 4 !== /*ArrayArgument*/
    e.k_) throw e.K_("Nested arrays are not supported");
    return (function (t, e) {
      for (var n = [], r = 0, i = 0, o = t; i < o.length; i++) {
        var u = fa(o[i], e.Q_(r));
        (null == u && (// Just include nulls in the array for fields being replaced with a
        // sentinel.
        u = {
          nullValue: "NULL_VALUE"
        }), n.push(u), r++);
      }
      return {
        arrayValue: {
          values: n
        }
      };
    })(t, e);
  }
  return (function (t, e) {
    if ((t instanceof Ss && (t = t.d_), null === t)) return {
      nullValue: "NULL_VALUE"
    };
    if ("number" == typeof t) return _e(e.Qt, t);
    if ("boolean" == typeof t) return {
      booleanValue: t
    };
    if ("string" == typeof t) return {
      stringValue: t
    };
    if (t instanceof Date) {
      var n = K.fromDate(t);
      return {
        timestampValue: Ln(e.Qt, n)
      };
    }
    if (t instanceof K) {
      // Firestore backend truncates precision down to microseconds. To ensure
      // offline mode works the same with regards to truncation, perform the
      // truncation immediately without waiting for the backend to do that.
      n = new K(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
      return {
        timestampValue: Ln(e.Qt, n)
      };
    }
    if (t instanceof Hs) return {
      geoPointValue: {
        latitude: t.latitude,
        longitude: t.longitude
      }
    };
    if (t instanceof F) return {
      bytesValue: Rn(e.Qt, t.I)
    };
    if (t instanceof Fs) {
      n = e.t;
      var r = t.firestore.I_;
      if (!r.isEqual(n)) throw e.K_("Document reference is for database " + r.projectId + "/" + r.database + " but should be for database " + n.projectId + "/" + n.database);
      return {
        referenceValue: qn(t.firestore.I_ || e.t, t.S_.path)
      };
    }
    throw e.K_("Unsupported field value: " + Cs(t));
  })(t, e);
}
function la(t, e) {
  var n = {};
  return (rt(t) ? // If we encounter an empty object, we explicitly add it to the update
  // mask to ensure that the server creates a map entry.
  e.path && e.path.length > 0 && e.Gt.push(e.path) : nt(t, function (t, r) {
    var i = fa(r, e.L_(t));
    null != i && (n[t] = i);
  }), {
    mapValue: {
      fields: n
    }
  });
}
function pa(t) {
  return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof K || t instanceof Hs || t instanceof F || t instanceof Fs || t instanceof Ds);
}
function da(t, e, n) {
  if (!pa(n) || !(function (t) {
    return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
  })(n)) {
    var r = Cs(n);
    throw "an object" === r ? e.K_(t + " a custom object") : e.K_(t + " " + r);
  }
}
/**
* Helper that calls fromDotSeparatedString() but wraps any error thrown.
*/
function va(t, e, n) {
  if (// If required, replace the FieldPath Compat class with with the firestore-exp
  // FieldPath.
  (e instanceof Ss && (e = e.d_), e instanceof As)) return e.f_;
  if ("string" == typeof e) return ma(t, e);
  throw ga("Field path arguments must be of type string or FieldPath.", t, /*hasConverter=*/
  !1, /*path=*/
  void 0, n);
}
/**
* Matches any characters in a field path string that are reserved.
*/
var ya = new RegExp("[~\\*/\\[\\]]");
/**
* Wraps fromDotSeparatedString with an error message about the method that
* was thrown.
* @param methodName - The publicly visible method name
* @param path - The dot-separated string form of a field path which will be
* split on dots.
* @param targetDoc - The document against which the field path will be
* evaluated.
*/
function ma(t, e, n) {
  if (e.search(ya) >= 0) throw ga("Invalid field path (" + e + "). Paths must not contain '~', '*', '/', '[', or ']'", t, /*hasConverter=*/
  !1, /*path=*/
  void 0, n);
  try {
    return new (As.bind.apply(As, _tslib.__spreadArrays([void 0], e.split("."))))().f_;
  } catch (r) {
    throw ga("Invalid field path (" + e + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", t, /*hasConverter=*/
    !1, /*path=*/
    void 0, n);
  }
}
function ga(t, e, n, r, i) {
  var o = r && !r.et(), u = void 0 !== i, s = "Function " + e + "() called with invalid data";
  n && (s += " (via `toFirestore()`)");
  var a = "";
  return ((o || u) && (a += " (found", o && (a += " in field " + r), u && (a += " in document " + i), a += ")"), new q(M.INVALID_ARGUMENT, (s += ". ") + t + a));
}
function wa(t, e) {
  return t.some(function (t) {
    return t.isEqual(e);
  });
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Internal transaction object responsible for accumulating the mutations to
* perform and the base versions for any documents read.
*/
var ba = /** @class*/
(function () {
  function t(t) {
    (this.Sh = t, // The version of each document that was read during this transaction.
    this.Y_ = new Map(), this.mutations = [], this.X_ = !1, /**
    * A deferred usage error that occurred previously in this transaction that
    * will cause the transaction to fail once it actually commits.
    */
    this.Z_ = null, /**
    * Set of documents that have been written in the transaction.
    *
    * When there's more than one write to the same key in a transaction, any
    * writes after the first are handled differently.
    */
    this.tf = new Set());
  }
  return (t.prototype.ef = function (t) {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var e, n = this;
      return _tslib.__generator(this, function (r) {
        switch (r.label) {
          case 0:
            if ((this.nf(), this.mutations.length > 0)) throw new q(M.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
            return [4, /*yield*/
            (function (t, e) {
              return _tslib.__awaiter(this, void 0, void 0, function () {
                var n, r, i, o, u, s;
                return _tslib.__generator(this, function (a) {
                  switch (a.label) {
                    case 0:
                      return (n = O(t), r = Qn(n.Qt) + "/documents", i = {
                        documents: e.map(function (t) {
                          return jn(n.Qt, t);
                        })
                      }, [4, /*yield*/
                      n.Du("BatchGetDocuments", r, i)]);
                    case 1:
                      return (o = a.sent(), u = new Map(), o.forEach(function (t) {
                        var e = (function (t, e) {
                          return ("found" in e) ? (function (t, e) {
                            (k(!!e.found), e.found.name, e.found.updateTime);
                            var n = zn(t, e.found.name), r = Mn(e.found.updateTime), i = new St({
                              mapValue: {
                                fields: e.found.fields
                              }
                            });
                            return new Pt(n, r, i, {});
                          })(t, e) : ("missing" in e) ? (function (t, e) {
                            (k(!!e.missing), k(!!e.readTime));
                            var n = zn(t, e.missing), r = Mn(e.readTime);
                            return new Vt(n, r);
                          })(t, e) : x();
                        })(n.Qt, t);
                        u.set(e.key.toString(), e);
                      }), s = [], [2, /*return*/
                      (e.forEach(function (t) {
                        var e = u.get(t.toString());
                        (k(!!e), s.push(e));
                      }), s)]);
                  }
                });
              });
            })(this.Sh, t)];
          case 1:
            return [2, /*return*/
            ((e = r.sent()).forEach(function (t) {
              t instanceof Vt || t instanceof Pt ? n.sf(t) : x();
            }), e)];
        }
      });
    });
  }, t.prototype.set = function (t, e) {
    (this.write(e.F_(t, this.jt(t))), this.tf.add(t.toString()));
  }, t.prototype.update = function (t, e) {
    try {
      this.write(e.F_(t, this.rf(t)));
    } catch (t) {
      this.Z_ = t;
    }
    this.tf.add(t.toString());
  }, t.prototype.delete = function (t) {
    (this.write(new Je(t, this.jt(t))), this.tf.add(t.toString()));
  }, t.prototype.commit = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t, e = this;
      return _tslib.__generator(this, function (n) {
        switch (n.label) {
          case 0:
            if ((this.nf(), this.Z_)) throw this.Z_;
            return (t = this.Y_, // For each mutation, note that the doc was written.
            this.mutations.forEach(function (e) {
              t.delete(e.key.toString());
            }), // For each document that was read but not written to, we want to perform
            // a `verify` operation.
            t.forEach(function (t, n) {
              var r = tt._t(n);
              e.mutations.push(new $e(r, e.jt(r)));
            }), [4, /*yield*/
            (function (t, e) {
              return _tslib.__awaiter(this, void 0, void 0, function () {
                var n, r, i;
                return _tslib.__generator(this, function (o) {
                  switch (o.label) {
                    case 0:
                      return (n = O(t), r = Qn(n.Qt) + "/documents", i = {
                        writes: e.map(function (t) {
                          return Xn(n.Qt, t);
                        })
                      }, [4, /*yield*/
                      n.pu("Commit", r, i)]);
                    case 1:
                      return (o.sent(), [2]);
                  }
                });
              });
            })(this.Sh, this.mutations)]);
          case 1:
            // For each mutation, note that the doc was written.
            return (n.sent(), this.X_ = !0, [2]);
        }
      });
    });
  }, t.prototype.sf = function (t) {
    var e;
    if (t instanceof Pt) e = t.version; else {
      if (!(t instanceof Vt)) throw x();
      // For deleted docs, we must use baseVersion 0 when we overwrite them.
      e = X.min();
    }
    var n = this.Y_.get(t.key.toString());
    if (n) {
      if (!e.isEqual(n)) // This transaction will fail no matter what.
      throw new q(M.ABORTED, "Document version changed between two reads.");
    } else this.Y_.set(t.key.toString(), e);
  }, /**
  * Returns the version of this document when it was read in this transaction,
  * as a precondition, or no precondition if it was not read.
  */
  t.prototype.jt = function (t) {
    var e = this.Y_.get(t.toString());
    return !this.tf.has(t.toString()) && e ? Re.updateTime(e) : Re.Kt();
  }, /**
  * Returns the precondition for a document if the operation is an update.
  */
  t.prototype.rf = function (t) {
    var e = this.Y_.get(t.toString());
    // The first time a document is written, we want to take into account the
    // read time and existence
    if (!this.tf.has(t.toString()) && e) {
      if (e.isEqual(X.min())) // The document doesn't exist, so fail the transaction.
      // This has to be validated locally because you can't send a
      // precondition that a document does not exist without changing the
      // semantics of the backend write to be an insert. This is the reverse
      // of what we want, since we want to assert that the document doesn't
      // exist but then send the update and have it fail. Since we can't
      // express that to the backend, we have to validate locally.
      // Note: this can change once we can send separate verify writes in the
      // transaction.
      throw new q(M.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
      // Document exists, base precondition on document update time.
      return Re.updateTime(e);
    }
    // Document was not read, so we just use the preconditions for a blind
    // update.
    return Re.exists(!0);
  }, t.prototype.write = function (t) {
    (this.nf(), this.mutations.push(t));
  }, t.prototype.nf = function () {}, t);
})(), _a = /** @class*/
(function () {
  function t(t, e, n, r) {
    (this._s = t, this.Sh = e, this.updateFunction = n, this.Es = r, this.cf = 5, this.Gu = new Qo(this._s, "transaction_retry"));
  }
  return (t.prototype.run = function () {
    this.af();
  }, t.prototype.af = function () {
    var t = this;
    this.Gu.Lu(function () {
      return _tslib.__awaiter(t, void 0, void 0, function () {
        var t, e, n = this;
        return _tslib.__generator(this, function (r) {
          return (t = new ba(this.Sh), (e = this.uf(t)) && e.then(function (e) {
            n._s.Ps(function () {
              return t.commit().then(function () {
                n.Es.resolve(e);
              }).catch(function (t) {
                n.hf(t);
              });
            });
          }).catch(function (t) {
            n.hf(t);
          }), [2]);
        });
      });
    });
  }, t.prototype.uf = function (t) {
    try {
      var e = this.updateFunction(t);
      return !lt(e) && e.catch && e.then ? e : (this.Es.reject(Error("Transaction callback must return a Promise")), null);
    } catch (t) {
      // Do not retry errors thrown by user provided updateFunction.
      return (this.Es.reject(t), null);
    }
  }, t.prototype.hf = function (t) {
    var e = this;
    this.cf > 0 && this.lf(t) ? (this.cf -= 1, this._s.Ps(function () {
      return (e.af(), Promise.resolve());
    })) : this.Es.reject(t);
  }, t.prototype.lf = function (t) {
    if ("FirebaseError" === t.name) {
      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
      // non-matching document versions with ABORTED. These errors should be retried.
      var e = t.code;
      return "aborted" === e || "failed-precondition" === e || !en(e);
    }
    return !1;
  }, t);
})(), Ia = /** @class*/
(function () {
  function t(t, /**
  * Asynchronous queue responsible for all of our internal processing. When
  * we get incoming work from the user (via public API) or the network
  * (incoming GRPC messages), we should always schedule onto this queue.
  * This ensures all of our work is properly serialized (e.g. we don't
  * start processing a new operation while the previous one is waiting for
  * an async I/O to complete).
  */
  e, n) {
    var r = this;
    (this.credentials = t, this._s = e, this.yu = n, this.user = j.UNAUTHENTICATED, this.clientId = V.u(), this._f = function () {}, this.C = new fr(), this.credentials.v(function (t) {
      (N("FirestoreClient", "Received user=", t.uid), r.user = t, r._f(t), r.C.resolve());
    }));
  }
  return (t.prototype.getConfiguration = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      return _tslib.__generator(this, function (t) {
        switch (t.label) {
          case 0:
            return [4, /*yield*/
            this.C.promise];
          case 1:
            return [2, /*return*/
            (t.sent(), {
              _s: this._s,
              yu: this.yu,
              clientId: this.clientId,
              credentials: this.credentials,
              Jl: this.user,
              pl: 100
            })];
        }
      });
    });
  }, t.prototype.ff = function (t) {
    var e = this;
    (this._f = t, // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.C.promise.then(function () {
      return e._f(e.user);
    }));
  }, /**
  * Checks that the client has not been terminated. Ensures that other methods on
  * this class cannot be called after the client is terminated.
  */
  t.prototype.df = function () {
    if (this._s.wf) throw new q(M.FAILED_PRECONDITION, "The client has already been terminated.");
  }, t.prototype.terminate = function () {
    var t = this;
    this._s.Ef();
    var e = new fr();
    return (this._s.Tf(function () {
      return _tslib.__awaiter(t, void 0, void 0, function () {
        var t, n;
        return _tslib.__generator(this, function (r) {
          switch (r.label) {
            case 0:
              return (r.trys.push([0, 5, , 6]), this.If ? [4, /*yield*/
              this.If.terminate()] : [3, /*break*/
              2]);
            case 1:
              (r.sent(), r.label = 2);
            case 2:
              return this.mf ? [4, /*yield*/
              this.mf.terminate()] : [3, /*break*/
              4];
            case 3:
              (r.sent(), r.label = 4);
            case 4:
              // `removeChangeListener` must be called after shutting down the
              // RemoteStore as it will prevent the RemoteStore from retrieving
              // auth tokens.
              return (this.credentials.S(), e.resolve(), [3, /*break*/
              6]);
            case 5:
              return (t = r.sent(), n = Er(t, "Failed to shutdown persistence"), e.reject(n), [3, /*break*/
              6]);
            case 6:
              return [2];
          }
        });
      });
    }), e.promise);
  }, t);
})();
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* TransactionRunner encapsulates the logic needed to run and retry transactions
* with backoff.
*/
function Ea(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r, i = this;
    return _tslib.__generator(this, function (o) {
      switch (o.label) {
        case 0:
          return (t._s.Af(), N("FirestoreClient", "Initializing OfflineComponentProvider"), [4, /*yield*/
          t.getConfiguration()]);
        case 1:
          return (n = o.sent(), [4, /*yield*/
          e.initialize(n)]);
        case 2:
          return (o.sent(), r = n.Jl, t.ff(function (n) {
            r.isEqual(n) || (r = n, t._s.po(function () {
              return _tslib.__awaiter(i, void 0, void 0, function () {
                return _tslib.__generator(this, function (t) {
                  switch (t.label) {
                    case 0:
                      return [4, /*yield*/
                      no(e.bh, n)];
                    case 1:
                      return (t.sent(), [2]);
                  }
                });
              });
            }));
          }), // When a user calls clearPersistence() in one client, all other clients
          // need to be terminated to allow the delete to succeed.
          e.persistence.Po(function () {
            return t.terminate();
          }), t.mf = e, [2]);
      }
    });
  });
}
function Ta(t, e) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var n, r;
    return _tslib.__generator(this, function (i) {
      switch (i.label) {
        case 0:
          return (t._s.Af(), [4, /*yield*/
          Na(t)]);
        case 1:
          return (n = i.sent(), N("FirestoreClient", "Initializing OnlineComponentProvider"), [4, /*yield*/
          t.getConfiguration()]);
        case 2:
          return (r = i.sent(), [4, /*yield*/
          e.initialize(n, r)]);
        case 3:
          return (i.sent(), // The CredentialChangeListener of the online component provider takes
          // precedence over the offline component provider.
          t.ff(function (n) {
            return t._s.po(function () {
              return (function (t, e) {
                return _tslib.__awaiter(this, void 0, void 0, function () {
                  var n, r;
                  return _tslib.__generator(this, function (i) {
                    switch (i.label) {
                      case 0:
                        return ((n = O(t))._s.Af(), N("RemoteStore", "RemoteStore received new credentials"), r = uu(n), // Tear down and re-create our network streams. This will ensure we get a
                        // fresh auth token for the new user and re-fill the write pipeline with
                        // new mutations from the LocalStore (since mutations are per-user).
                        n.Nh.add(3), [4, /*yield*/
                        $o(n)]);
                      case 1:
                        return (i.sent(), r && // Don't set the network status to Unknown if we are offline.
                        n.Oh.set("Unknown"), [4, /*yield*/
                        n.Dh.n_(e)]);
                      case 2:
                        return (i.sent(), n.Nh.delete(3), [4, /*yield*/
                        Jo(n)]);
                      case 3:
                        // Tear down and re-create our network streams. This will ensure we get a
                        // fresh auth token for the new user and re-fill the write pipeline with
                        // new mutations from the LocalStore (since mutations are per-user).
                        return (i.sent(), [2]);
                    }
                  });
                });
              })(e.yl, n);
            });
          }), t.If = e, [2]);
      }
    });
  });
}
function Na(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    return _tslib.__generator(this, function (e) {
      switch (e.label) {
        case 0:
          return t.mf ? [3, /*break*/
          2] : (N("FirestoreClient", "Using default OfflineComponentProvider"), [4, /*yield*/
          Ea(t, new ws())]);
        case 1:
          (e.sent(), e.label = 2);
        case 2:
          return [2, /*return*/
          t.mf];
      }
    });
  });
}
function Aa(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    return _tslib.__generator(this, function (e) {
      switch (e.label) {
        case 0:
          return t.If ? [3, /*break*/
          2] : (N("FirestoreClient", "Using default OnlineComponentProvider"), [4, /*yield*/
          Ta(t, new Is())]);
        case 1:
          (e.sent(), e.label = 2);
        case 2:
          return [2, /*return*/
          t.If];
      }
    });
  });
}
function Da(t) {
  return Na(t).then(function (t) {
    return t.persistence;
  });
}
function Sa(t) {
  return Na(t).then(function (t) {
    return t.bh;
  });
}
function xa(t) {
  return Aa(t).then(function (t) {
    return t.yl;
  });
}
function ka(t) {
  return Aa(t).then(function (t) {
    return t._a;
  });
}
function Oa(t) {
  return _tslib.__awaiter(this, void 0, void 0, function () {
    var e, n;
    return _tslib.__generator(this, function (r) {
      switch (r.label) {
        case 0:
          return [4, /*yield*/
          Aa(t)];
        case 1:
          return (e = r.sent(), [2, /*return*/
          ((n = e.gl).jh = ju.bind(null, e._a), n.Hh = Gu.bind(null, e._a), n)]);
      }
    });
  });
}
/** Enables the network connection and re-enqueues all pending operations.*/
function Pa(t, e, n) {
  var r = this;
  void 0 === n && (n = {});
  var i = new fr();
  return (t._s.Ps(function () {
    return _tslib.__awaiter(r, void 0, void 0, function () {
      var r;
      return _tslib.__generator(this, function (o) {
        switch (o.label) {
          case 0:
            return (r = function (t, e, n, r, i) {
              var o = new Ts({
                next: function (o) {
                  // Remove query first before passing event to user to avoid
                  // user actions affecting the now stale query.
                  e.Ps(function () {
                    return Au(t, u);
                  });
                  var s = o.docs.has(n);
                  !s && o.fromCache ? // TODO(dimond): If we're online and the document doesn't
                  // exist then we resolve with a doc.exists set to false. If
                  // we're offline however, we reject the Promise in this
                  // case. Two options: 1) Cache the negative response from
                  // the server so we can deliver that even when you're
                  // offline 2) Actually reject the Promise in the online case
                  // if the document doesn't exist.
                  i.reject(new q(M.UNAVAILABLE, "Failed to get document because the client is offline.")) : s && o.fromCache && r && "server" === r.source ? i.reject(new q(M.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(o);
                },
                error: function (t) {
                  return i.reject(t);
                }
              }), u = new ku(re(n.path), o, {
                includeMetadataChanges: !0,
                nl: !0
              });
              return Nu(t, u);
            }, [4, /*yield*/
            Oa(t)]);
          case 1:
            return [2, /*return*/
            r.apply(void 0, [o.sent(), t._s, e, n, i])];
        }
      });
    });
  }), i.promise);
}
function Va(t, e, n) {
  var r = this;
  void 0 === n && (n = {});
  var i = new fr();
  return (t._s.Ps(function () {
    return _tslib.__awaiter(r, void 0, void 0, function () {
      var r;
      return _tslib.__generator(this, function (o) {
        switch (o.label) {
          case 0:
            return (r = function (t, e, n, r, i) {
              var o = new Ts({
                next: function (n) {
                  // Remove query first before passing event to user to avoid
                  // user actions affecting the now stale query.
                  (e.Ps(function () {
                    return Au(t, u);
                  }), n.fromCache && "server" === r.source ? i.reject(new q(M.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n));
                },
                error: function (t) {
                  return i.reject(t);
                }
              }), u = new ku(n, o, {
                includeMetadataChanges: !0,
                nl: !0
              });
              return Nu(t, u);
            }, [4, /*yield*/
            Oa(t)]);
          case 1:
            return [2, /*return*/
            r.apply(void 0, [o.sent(), t._s, e, n, i])];
        }
      });
    });
  }), i.promise);
}
var Ca = /** @class*/
(function () {
  function t() {
    var t = this;
    // The last promise in the queue.
    (this.Rf = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
    // retried with backoff.
    this.Pf = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
    // be changed again.
    this.yf = !1, // Operations scheduled to be queued in the future. Operations are
    // automatically removed after they are run or canceled.
    this.gf = [], // visible for testing
    this.Vf = null, // Flag set while there's an outstanding AsyncQueue operation, used for
    // assertion sanity-checks.
    this.pf = !1, // List of TimerIds to fast-forward delays for.
    this.bf = [], // Backoff timer used to schedule retries for retryable operations
    this.Gu = new Qo(this, "async_queue_retry"), // Visibility handler that triggers an immediate retry of all retryable
    // operations. Meant to speed up recovery when we regain file system access
    // after page comes into foreground.
    this.vf = function () {
      var e = Go();
      (e && N("AsyncQueue", "Visibility state changed to " + e.visibilityState), t.Gu.qu());
    });
    var e = Go();
    e && "function" == typeof e.addEventListener && e.addEventListener("visibilitychange", this.vf);
  }
  return (Object.defineProperty(t.prototype, "wf", {
    get: function () {
      return this.yf;
    },
    enumerable: !1,
    configurable: !0
  }), /**
  * Adds a new operation to the queue without waiting for it to complete (i.e.
  * we ignore the Promise result).
  */
  t.prototype.Ps = function (t) {
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.enqueue(t);
  }, t.prototype.Tf = function (t) {
    (this.Sf(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.Df(t));
  }, t.prototype.Ef = function () {
    if (!this.yf) {
      this.yf = !0;
      var t = Go();
      t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.vf);
    }
  }, t.prototype.enqueue = function (t) {
    return (this.Sf(), this.yf ? new Promise(function (t) {}) : this.Df(t));
  }, t.prototype.po = function (t) {
    var e = this;
    this.Ps(function () {
      return (e.Pf.push(t), e.Cf());
    });
  }, /**
  * Runs the next operation from the retryable queue. If the operation fails,
  * reschedules with backoff.
  */
  t.prototype.Cf = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t, e = this;
      return _tslib.__generator(this, function (n) {
        switch (n.label) {
          case 0:
            if (0 === this.Pf.length) return [3, /*break*/
            5];
            n.label = 1;
          case 1:
            return (n.trys.push([1, 3, , 4]), [4, /*yield*/
            this.Pf[0]()]);
          case 2:
            return (n.sent(), this.Pf.shift(), this.Gu.reset(), [3, /*break*/
            4]);
          case 3:
            if (!mr(t = n.sent())) throw t;
            // Failure will be handled by AsyncQueue
            return (N("AsyncQueue", "Operation failed with retryable error: " + t), [3, /*break*/
            4]);
          case 4:
            (this.Pf.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
            // This is necessary to run retryable operations that failed during
            // their initial attempt since we don't know whether they are already
            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
            // call scheduled here.
            // Since `backoffAndRun()` cancels an existing backoff and schedules a
            // new backoff on every call, there is only ever a single additional
            // operation in the queue.
            this.Gu.Lu(function () {
              return e.Cf();
            }), n.label = 5);
          case 5:
            return [2];
        }
      });
    });
  }, t.prototype.Df = function (t) {
    var e = this, n = this.Rf.then(function () {
      return (e.pf = !0, t().catch(function (t) {
        // Re-throw the error so that this.tail becomes a rejected Promise and
        // all further attempts to chain (via .then) will just short-circuit
        // and return the rejected Promise.
        throw (e.Vf = t, e.pf = !1, A("INTERNAL UNHANDLED ERROR: ", /**
        * Chrome includes Error.message in Error.stack. Other browsers do not.
        * This returns expected output of message + stack when available.
        * @param error - Error or FirestoreError
        */
        (function (t) {
          var e = t.message || "";
          return (t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack), e);
        })(t)), t);
      }).then(function (t) {
        return (e.pf = !1, t);
      }));
    });
    return (this.Rf = n, n);
  }, t.prototype.Tr = function (t, e, n) {
    var r = this;
    (this.Sf(), // Fast-forward delays for timerIds that have been overriden.
    this.bf.indexOf(t) > -1 && (e = 0));
    var i = Ir.Ts(this, t, e, n, function (t) {
      return r.xf(t);
    });
    return (this.gf.push(i), i);
  }, t.prototype.Sf = function () {
    this.Vf && x();
  }, t.prototype.Af = function () {}, /**
  * Waits until all currently queued tasks are finished executing. Delayed
  * operations are not run.
  */
  t.prototype.Nf = function () {
    return _tslib.__awaiter(this, void 0, void 0, function () {
      var t;
      return _tslib.__generator(this, function (e) {
        switch (e.label) {
          case 0:
            return [4, /*yield*/
            t = this.Rf];
          case 1:
            (e.sent(), e.label = 2);
          case 2:
            if (t !== this.Rf) return [3, /*break*/
            0];
            e.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }, /**
  * For Tests: Determine if a delayed operation with a particular TimerId
  * exists.
  */
  t.prototype.$f = function (t) {
    for (var e = 0, n = this.gf; e < n.length; e++) {
      if (n[e].fs === t) return !0;
    }
    return !1;
  }, /**
  * For Tests: Runs some or all delayed operations early.
  *
  * @param lastTimerId - Delayed operations up to and including this TimerId
  * will be drained. Pass TimerId.All to run all delayed operations.
  * @returns a Promise that resolves once all operations have been run.
  */
  t.prototype.Ff = function (t) {
    var e = this;
    // Note that draining may generate more delayed ops, so we do that first.
    return this.Nf().then(function () {
      // Run ops in the same order they'd run if they ran naturally.
      e.gf.sort(function (t, e) {
        return t.ds - e.ds;
      });
      for (var n = 0, r = e.gf; n < r.length; n++) {
        var i = r[n];
        if ((i.Rs(), "all" !== /*All*/
        t && i.fs === t)) break;
      }
      return e.Nf();
    });
  }, /**
  * For Tests: Skip all subsequent delays for a timer id.
  */
  t.prototype.Of = function (t) {
    this.bf.push(t);
  }, /** Called once a DelayedOperation is run or canceled.*/
  t.prototype.xf = function (t) {
    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
    var e = this.gf.indexOf(t);
    this.gf.splice(e, 1);
  }, t);
})();
function La(t) {
  /**
  * Returns true if obj is an object and contains at least one of the specified
  * methods.
  */
  return (function (t, e) {
    if ("object" != typeof t || null === t) return !1;
    for (var n = t, r = 0, i = ["next", "error", "complete"]; r < i.length; r++) {
      var o = i[r];
      if ((o in n) && "function" == typeof n[o]) return !0;
    }
    return !1;
  })(t);
}
var Ra = /** @class*/
(function () {
  function t() {
    (this.kf = {}, this.Mf = new fr(), this.Lf = {
      taskState: "Running",
      totalBytes: 0,
      totalDocuments: 0,
      bytesLoaded: 0,
      documentsLoaded: 0
    });
  }
  return (t.prototype.onProgress = function (t, e, n) {
    this.kf = {
      next: t,
      error: e,
      complete: n
    };
  }, /**
  * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
  *
  * @param onRejected - Called when an error occurs during bundle loading.
  */
  t.prototype.catch = function (t) {
    return this.Mf.promise.catch(t);
  }, /**
  * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
  *
  * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
  *   The update will always have its `taskState` set to `"Success"`.
  * @param onRejected - Called when an error occurs during bundle loading.
  */
  t.prototype.then = function (t, e) {
    return this.Mf.promise.then(t, e);
  }, /**
  * Notifies all observers that bundle loading has completed, with a provided
  * `LoadBundleTaskProgress` object.
  *
  * @private
  */
  t.prototype.ql = function (t) {
    (this.Ul(t), this.kf.complete && this.kf.complete(), this.Mf.resolve(t));
  }, /**
  * Notifies all observers that bundle loading has failed, with a provided
  * `Error` as the reason.
  *
  * @private
  */
  t.prototype.Kl = function (t) {
    (this.Lf.taskState = "Error", this.kf.next && this.kf.next(this.Lf), this.kf.error && this.kf.error(t), this.Mf.reject(t));
  }, /**
  * Notifies a progress update of loading a bundle.
  * @param progress - The new progress.
  *
  * @private
  */
  t.prototype.Ul = function (t) {
    (this.Lf = t, this.kf.next && this.kf.next(t));
  }, t);
})(), Ua = -1, Ma = /** @class*/
(function (t) {
  /** @hideconstructor*/
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, e, n) || this).Bf = new Ca(), r.w_ = ("name" in e) ? e.name : "[DEFAULT]", r);
  }
  return (_tslib.__extends(e, t), e.prototype.b_ = function () {
    return (this.qf || // The client must be initialized to ensure that all subsequent API
    // usage throws an exception.
    Fa(this), this.qf.terminate());
  }, e);
})(qs);
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** DOMException error code constants.*/
function qa(t) {
  return (t.qf || Fa(t), t.qf.df(), t.qf);
}
function Fa(t) {
  var e = t.p_(), n = (function (t, e, n) {
    return new _(t, e, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling);
  })(t.I_, t.w_, e);
  t.qf = new Ia(t.m_, t.Bf, n);
}
/**
* Attempts to enable persistent storage, if possible.
*
* Must be called before any other functions (other than
* {@link initializeFirestore}, {@link getFirestore} or
* {@link clearIndexedDbPersistence}.
*
* If this fails, `enableIndexedDbPersistence()` will reject the promise it
* returns. Note that even after this failure, the `Firestore` instance will
* remain usable, however offline persistence will be disabled.
*
* There are several reasons why this can fail, which can be identified by
* the `code` on the error.
*
*   * failed-precondition: The app is already open in another browser tab.
*   * unimplemented: The browser is incompatible with the offline
*     persistence implementation.
*
* @param firestore - The `Firestore` instance to enable persistence for.
* @param persistenceSettings - Optional settings object to configure
* persistence.
* @returns A promise that represents successfully enabling persistent storage.
*/
/**
* Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
* If the operation fails with a recoverable error (see
* `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
* but the client remains usable.
*/
function ja(t, e, n) {
  var r = this, i = new fr();
  return t._s.enqueue(function () {
    return _tslib.__awaiter(r, void 0, void 0, function () {
      var r;
      return _tslib.__generator(this, function (o) {
        switch (o.label) {
          case 0:
            return (o.trys.push([0, 3, , 4]), [4, /*yield*/
            Ea(t, n)]);
          case 1:
            return (o.sent(), [4, /*yield*/
            Ta(t, e)]);
          case 2:
            return (o.sent(), i.resolve(), [3, /*break*/
            4]);
          case 3:
            if (!/**
            * Decides whether the provided error allows us to gracefully disable
            * persistence (as opposed to crashing the client).
            */
            (function (t) {
              return "FirebaseError" === t.name ? t.code === M.FAILED_PRECONDITION || t.code === M.UNIMPLEMENTED : !("undefined" != typeof DOMException && t instanceof DOMException) || (22 === t.code || 20 === t.code || // Firefox Private Browsing mode disables IndexedDb and returns
              // INVALID_STATE for any usage.
              11 === t.code);
            })(r = o.sent())) throw r;
            return (console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + r), i.reject(r), [3, /*break*/
            4]);
          case 4:
            return [2];
        }
      });
    });
  }).then(function () {
    return i.promise;
  });
}
/**
* Re-enables use of the network for this Firestore instance after a prior
* call to {@link disableNetwork}.
*
* @returns A promise that is resolved once the network has been enabled.
*/
function za(t) {
  if (t.R_ || t.P_) throw new q(M.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Converts Firestore's internal types to the JavaScript types that we expose
* to the user.
*/
var Ga = /** @class*/
(function () {
  function t() {}
  return (t.prototype.Uf = function (t, e) {
    switch ((void 0 === e && (e = "none"), vt(t))) {
      case 0:
        /*NullValue*/
        return null;
      case 1:
        /*BooleanValue*/
        return t.booleanValue;
      case 2:
        /*NumberValue*/
        return st(t.integerValue || t.doubleValue);
      case 3:
        /*TimestampValue*/
        return this.Qf(t.timestampValue);
      case 4:
        /*ServerTimestampValue*/
        return this.Kf(t, e);
      case 5:
        /*StringValue*/
        return t.stringValue;
      case 6:
        /*BlobValue*/
        return this.Wf(at(t.bytesValue));
      case 7:
        /*RefValue*/
        return this.jf(t.referenceValue);
      case 8:
        /*GeoPointValue*/
        return this.Gf(t.geoPointValue);
      case 9:
        /*ArrayValue*/
        return this.zf(t.arrayValue, e);
      case 10:
        /*ObjectValue*/
        return this.Hf(t.mapValue, e);
      default:
        throw x();
    }
  }, t.prototype.Hf = function (t, e) {
    var n = this, r = {};
    return (nt(t.fields || ({}), function (t, i) {
      r[t] = n.Uf(i, e);
    }), r);
  }, t.prototype.Gf = function (t) {
    return new Hs(st(t.latitude), st(t.longitude));
  }, t.prototype.zf = function (t, e) {
    var n = this;
    return (t.values || []).map(function (t) {
      return n.Uf(t, e);
    });
  }, t.prototype.Kf = function (t, e) {
    switch (e) {
      case "previous":
        var n = ht(t);
        return null == n ? null : this.Uf(n, e);
      case "estimate":
        return this.Qf(ft(t));
      default:
        return null;
    }
  }, t.prototype.Qf = function (t) {
    var e = ut(t);
    return new K(e.seconds, e.nanos);
  }, t.prototype.Jf = function (t, e) {
    var n = Z.ot(t);
    k(hr(n));
    var r = new I(n.get(1), n.get(3)), i = new tt(n.Y(5));
    return (r.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.
    A("Document " + i + " contains a document reference within a different database (" + r.projectId + "/" + r.database + ") which is not supported. It will be treated as a reference in the current database (" + e.projectId + "/" + e.database + ") instead."), i);
  }, t);
})(), Ba = /** @class*/
(function () {
  // Note: This class is stripped down version of the DocumentSnapshot in
  // the legacy SDK. The changes are:
  // - No support for SnapshotMetadata.
  // - No support for SnapshotOptions.
  /** @hideconstructor protected*/
  function t(t, e, n, r, i) {
    (this.Yf = t, this.Xf = e, this.S_ = n, this.Zf = r, this.v_ = i);
  }
  return (Object.defineProperty(t.prototype, "id", {
    /** Property of the `DocumentSnapshot` that provides the document's ID.*/
    get: function () {
      return this.S_.path.tt();
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "ref", {
    /**
    * The `DocumentReference` for the document included in the `DocumentSnapshot`.
    */
    get: function () {
      return new Fs(this.Yf, this.v_, this.S_);
    },
    enumerable: !1,
    configurable: !0
  }), /**
  * Signals whether or not the document at the snapshot's location exists.
  *
  * @returns true if the document exists.
  */
  t.prototype.exists = function () {
    return null !== this.Zf;
  }, /**
  * Retrieves all fields in the document as an `Object`. Returns `undefined` if
  * the document doesn't exist.
  *
  * @returns An `Object` containing all fields in the document or `undefined`
  * if the document doesn't exist.
  */
  t.prototype.data = function () {
    if (this.Zf) {
      if (this.v_) {
        // We only want to use the converter and create a new DocumentSnapshot
        // if a converter has been provided.
        var t = new Qa(this.Yf, this.Xf, this.S_, this.Zf, /*converter=*/
        null);
        return this.v_.fromFirestore(t);
      }
      return this.Xf.Uf(this.Zf.bt());
    }
  }, /**
  * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
  * document or field doesn't exist.
  *
  * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
  * field.
  * @returns The data at the specified field location or undefined if no such
  * field exists in the document.
  */
  // We are using `any` here to avoid an explicit cast by our users.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  t.prototype.get = function (t) {
    if (this.Zf) {
      var e = this.Zf.data().field(Ya("DocumentSnapshot.get", t));
      if (null !== e) return this.Xf.Uf(e);
    }
  }, t);
})(), Qa = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  /**
  * Retrieves all fields in the document as an `Object`.
  *
  * @override
  * @returns An `Object` containing all fields in the document.
  */
  return (_tslib.__extends(e, t), e.prototype.data = function () {
    return t.prototype.data.call(this);
  }, e);
})(Ba);
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A `DocumentSnapshot` contains data read from a document in your Firestore
* database. The data can be extracted with `.data()` or `.get(<field>)` to
* get a specific field.
*
* For a `DocumentSnapshot` that points to a non-existing document, any data
* access will return 'undefined'. You can use the `exists()` method to
* explicitly verify a document's existence.
*/
/**
* Helper that calls fromDotSeparatedString() but wraps any error thrown.
*/
function Ya(t, e) {
  return "string" == typeof e ? ma(t, e) : e instanceof Ss ? e.d_.f_ : e.f_;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function Ha(t) {
  if (oe(t) && 0 === t.xt.length) throw new q(M.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
/**
* A `QueryConstraint` is used to narrow the set of documents returned by a
* Firestore query. `QueryConstraint`s are created by invoking {@link where},
* {@link orderBy}, {@link startAt}, {@link startAfter}, {@link
* endBefore}, {@link endAt}, {@link limit} or {@link limitToLast} and
* can then be passed to {@link query} to create a new query instance that
* also contains this `QueryConstraint`.
*/
var Ka = function () {};
/**
* Creates a new immutable instance of `query` that is extended to also include
* additional query constraints.
*
* @param query - The query instance to use as a base for the new constraints.
* @param queryConstraints - The list of `QueryConstraint`s to apply.
* @throws if any of the provided query constraints cannot be combined with the
* existing or new constraints.
*/
function Xa(t) {
  for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
  for (var r = 0, i = e; r < i.length; r++) {
    var o = i[r];
    t = o.td(t);
  }
  return t;
}
var Wa = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this) || this).ed = e, i.nd = n, i.sd = r, i.type = "where", i);
  }
  return (_tslib.__extends(e, t), e.prototype.td = function (t) {
    var e = ta(t.firestore), n = (function (t, e, n, r, i, o, u) {
      var s;
      if (i.ut()) {
        if ("array-contains" === /*ARRAY_CONTAINS*/
        o || "array-contains-any" === /*ARRAY_CONTAINS_ANY*/
        o) throw new q(M.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o + "' queries on FieldPath.documentId().");
        if ("in" === /*IN*/
        o || "not-in" === /*NOT_IN*/
        o) {
          rc(u, o);
          for (var a = [], c = 0, h = u; c < h.length; c++) {
            var f = h[c];
            a.push(nc(r, t, f));
          }
          s = {
            arrayValue: {
              values: a
            }
          };
        } else s = nc(r, t, u);
      } else ("in" !== /*IN*/
      o && "not-in" !== /*NOT_IN*/
      o && "array-contains-any" !== /*ARRAY_CONTAINS_ANY*/
      o || rc(u, o), s = ha(n, "where", u, /*allowArrays=*/
      "in" === /*IN*/
      o || "not-in" === /*NOT_IN*/
      o));
      var l = Ft.create(i, o, s);
      return ((function (t, e) {
        if (e.Ct()) {
          var n = se(t);
          if (null !== n && !n.isEqual(e.field)) throw new q(M.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '" + n.toString() + "' and '" + e.field.toString() + "'");
          var r = ue(t);
          null !== r && ic(t, e.field, r);
        }
        var i = (function (t, e) {
          for (var n = 0, r = t.filters; n < r.length; n++) {
            var i = r[n];
            if (e.indexOf(i.op) >= 0) return i.op;
          }
          return null;
        })(t, /**
        * Given an operator, returns the set of operators that cannot be used with it.
        *
        * Operators in a query must adhere to the following set of rules:
        * 1. Only one array operator is allowed.
        * 2. Only one disjunctive operator is allowed.
        * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
        * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
        *
        * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
        * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
        */
        (function (t) {
          switch (t) {
            case "!=":
              /*NOT_EQUAL*/
              return ["!=", /*NOT_EQUAL*/
              /*NOT_EQUAL*/
              "not-in"];
            case "array-contains":
              /*ARRAY_CONTAINS*/
              return ["array-contains", /*ARRAY_CONTAINS*/
              /*ARRAY_CONTAINS*/
              "array-contains-any", /*ARRAY_CONTAINS*/
              /*ARRAY_CONTAINS*/
              /*ARRAY_CONTAINS_ANY*/
              "not-in"];
            case "in":
              /*IN*/
              return ["array-contains-any", /*IN*/
              /*ARRAY_CONTAINS_ANY*/
              "in", /*IN*/
              /*ARRAY_CONTAINS_ANY*/
              /*IN*/
              "not-in"];
            case "array-contains-any":
              /*ARRAY_CONTAINS_ANY*/
              return ["array-contains", /*ARRAY_CONTAINS_ANY*/
              /*ARRAY_CONTAINS*/
              "array-contains-any", /*ARRAY_CONTAINS_ANY*/
              /*ARRAY_CONTAINS*/
              /*ARRAY_CONTAINS_ANY*/
              "in", /*ARRAY_CONTAINS_ANY*/
              /*ARRAY_CONTAINS*/
              /*ARRAY_CONTAINS_ANY*/
              /*IN*/
              "not-in"];
            case "not-in":
              /*NOT_IN*/
              return ["array-contains", /*NOT_IN*/
              /*ARRAY_CONTAINS*/
              "array-contains-any", /*NOT_IN*/
              /*ARRAY_CONTAINS*/
              /*ARRAY_CONTAINS_ANY*/
              "in", /*NOT_IN*/
              /*ARRAY_CONTAINS*/
              /*ARRAY_CONTAINS_ANY*/
              /*IN*/
              "not-in", /*NOT_IN*/
              /*ARRAY_CONTAINS*/
              /*ARRAY_CONTAINS_ANY*/
              /*IN*/
              /*NOT_IN*/
              "!="];
            default:
              return [];
          }
        })(e.op));
        if (null !== i) // Special case when it's a duplicate op to give a slightly clearer error message.
        throw i === e.op ? new q(M.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e.op.toString() + "' filter.") : new q(M.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e.op.toString() + "' filters with '" + i.toString() + "' filters.");
      })(t, l), l);
    })(t.C_, 0, e, t.firestore.I_, this.ed, this.nd, this.sd);
    return new js(t.firestore, t.v_, (function (t, e) {
      var n = t.filters.concat([e]);
      return new ee(t.path, t.collectionGroup, t.xt.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
    })(t.C_, n));
  }, e);
})(Ka), Za = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this) || this).ed = e, r.rd = n, r.type = "orderBy", r);
  }
  return (_tslib.__extends(e, t), e.prototype.td = function (t) {
    var e = (function (t, e, n) {
      if (null !== t.startAt) throw new q(M.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
      if (null !== t.endAt) throw new q(M.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
      var r = new Zt(e, n);
      return ((function (t, e) {
        if (null === ue(t)) {
          // This is the first order by. It must match any inequality.
          var n = se(t);
          null !== n && ic(t, n, e.field);
        }
      })(t, r), r);
    })(t.C_, this.ed, this.rd);
    return new js(t.firestore, t.v_, (function (t, e) {
      // TODO(dimond): validate that orderBy does not list the same key twice.
      var n = t.xt.concat([e]);
      return new ee(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
    })(t.C_, e));
  }, e);
})(Ka), Ja = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this) || this).type = e, i.od = n, i.ad = r, i);
  }
  return (_tslib.__extends(e, t), e.prototype.td = function (t) {
    return new js(t.firestore, t.v_, fe(t.C_, this.od, this.ad));
  }, e);
})(Ka), $a = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this) || this).type = e, i.ud = n, i.hd = r, i);
  }
  return (_tslib.__extends(e, t), e.prototype.td = function (t) {
    var e = ec(t, this.type, this.ud, this.hd);
    return new js(t.firestore, t.v_, (function (t, e) {
      return new ee(t.path, t.collectionGroup, t.xt.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
    })(t.C_, e));
  }, e);
})(Ka), tc = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this) || this).type = e, i.ud = n, i.hd = r, i);
  }
  return (_tslib.__extends(e, t), e.prototype.td = function (t) {
    var e = ec(t, this.type, this.ud, this.hd);
    return new js(t.firestore, t.v_, (function (t, e) {
      return new ee(t.path, t.collectionGroup, t.xt.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
    })(t.C_, e));
  }, e);
})(Ka);
/**
* Creates a `QueryConstraint` that enforces that documents must contain the
* specified field and that the value should satisfy the relation constraint
* provided.
*
* @param fieldPath - The path to compare
* @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
*   "&lt;=", "!=").
* @param value - The value for comparison
* @returns The created `Query`.
*/
/** Helper function to create a bound from a document or fields*/
function ec(t, e, n, r) {
  if ((n[0] instanceof Ss && (n[0] = n[0].d_), n[0] instanceof Ba)) return (function (t, e, n, r, i) {
    if (!r) throw new q(M.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n + "().");
    // Because people expect to continue/end a query at the exact document
    // provided, we need to use the implicit sort order rather than the explicit
    // sort order, because it's guaranteed to contain the document key. That way
    // the position becomes unambiguous and the query continues/ends exactly at
    // the provided document. Without the key (by using the explicit sort
    // orders), multiple documents could match the position, yielding duplicate
    // results.
    for (var o = [], u = 0, s = ce(t); u < s.length; u++) {
      var a = s[u];
      if (a.field.ut()) o.push(It(e, r.key)); else {
        var c = r.field(a.field);
        if (ct(c)) throw new q(M.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
        if (null === c) {
          var h = a.field.rt();
          throw new q(M.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + h + "' (used as the orderBy) does not exist.");
        }
        o.push(c);
      }
    }
    return new Xt(o, i);
  })(t.C_, t.firestore.I_, e, n[0].Zf, r);
  var i = ta(t.firestore);
  return (function (t, e, n, r, i, o) {
    // Use explicit order by's because it has to match the query the user made
    var u = t.xt;
    if (i.length > u.length) throw new q(M.INVALID_ARGUMENT, "Too many arguments provided to " + r + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
    for (var s = [], a = 0; a < i.length; a++) {
      var c = i[a];
      if (u[a].field.ut()) {
        if ("string" != typeof c) throw new q(M.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r + "(), but got a " + typeof c);
        if (!ae(t) && -1 !== c.indexOf("/")) throw new q(M.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r + "() must be a plain document ID, but '" + c + "' contains a slash.");
        var h = t.path.child(Z.ot(c));
        if (!tt.wt(h)) throw new q(M.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r + "() must result in a valid document path, but '" + h + "' is not because it contains an odd number of segments.");
        var f = new tt(h);
        s.push(It(e, f));
      } else {
        var l = ha(n, r, c);
        s.push(l);
      }
    }
    return new Xt(s, o);
  })(t.C_, t.firestore.I_, i, e, n, r);
}
function nc(t, e, n) {
  if ((n instanceof Ss && (n = n.d_), "string" == typeof n)) {
    if ("" === n) throw new q(M.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!ae(e) && -1 !== n.indexOf("/")) throw new q(M.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n + "' contains a '/' character.");
    var r = e.path.child(Z.ot(n));
    if (!tt.wt(r)) throw new q(M.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r + "' is not because it has an odd number of segments (" + r.length + ").");
    return It(t, new tt(r));
  }
  if (n instanceof Fs) return It(t, n.S_);
  throw new q(M.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + Cs(n) + ".");
}
/**
* Validates that the value passed into a disjunctive filter satisfies all
* array requirements.
*/
function rc(t, e) {
  if (!Array.isArray(t) || 0 === t.length) throw new q(M.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e.toString() + "' filters.");
  if (t.length > 10) throw new q(M.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters support a maximum of 10 elements in the value array.");
}
function ic(t, e, n) {
  if (!n.isEqual(e)) throw new q(M.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '" + e.toString() + "' and so you must also use '" + e.toString() + "' as your first argument to orderBy(), but your first orderBy() is on field '" + n.toString() + "' instead.");
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Converts custom model object of type T into DocumentData by applying the
* converter if it exists.
*
* This function is used when converting user objects to DocumentData
* because we want to provide the user with a more specific error message if
* their set() or fails due to invalid data originating from a toFirestore()
* call.
*/
function oc(t, e, n) {
  // Cast to `any` in order to satisfy the union type constraint on
  // toFirestore().
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e;
}
var uc = /** @class*/
(function (t) {
  function e(e) {
    var n = this;
    return ((n = t.call(this) || this).firestore = e, n);
  }
  return (_tslib.__extends(e, t), e.prototype.Wf = function (t) {
    return new F(t);
  }, e.prototype.jf = function (t) {
    var e = this.Jf(t, this.firestore.I_);
    return new Fs(this.firestore, /*converter=*/
    null, e);
  }, e);
})(Ga), sc = /** @class*/
(function () {
  /** @hideconstructor*/
  function t(t, e) {
    (this.hasPendingWrites = t, this.fromCache = e);
  }
  return (t.prototype.isEqual = function (t) {
    return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
  }, t);
})(), ac = /** @class*/
(function (t) {
  /** @hideconstructor protected*/
  function e(e, n, r, i, o, u) {
    var s = this;
    return ((s = t.call(this, e, n, r, i, u) || this).Yf = e, s.ld = e, s.metadata = o, s);
  }
  /**
  * Property of the `DocumentSnapshot` that signals whether or not the data
  * exists. True if the document exists.
  */
  return (_tslib.__extends(e, t), e.prototype.exists = function () {
    return t.prototype.exists.call(this);
  }, /**
  * Retrieves all fields in the document as an `Object`. Returns `undefined` if
  * the document doesn't exist.
  *
  * By default, `FieldValue.serverTimestamp()` values that have not yet been
  * set to their final value will be returned as `null`. You can override
  * this by passing an options object.
  *
  * @param options - An options object to configure how data is retrieved from
  * the snapshot (for example the desired behavior for server timestamps that
  * have not yet been set to their final value).
  * @returns An `Object` containing all fields in the document or `undefined` if
  * the document doesn't exist.
  */
  e.prototype.data = function (t) {
    if ((void 0 === t && (t = {}), this.Zf)) {
      if (this.v_) {
        // We only want to use the converter and create a new DocumentSnapshot
        // if a converter has been provided.
        var e = new cc(this.Yf, this.Xf, this.S_, this.Zf, this.metadata, /*converter=*/
        null);
        return this.v_.fromFirestore(e, t);
      }
      return this.Xf.Uf(this.Zf.bt(), t.serverTimestamps);
    }
  }, /**
  * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
  * document or field doesn't exist.
  *
  * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
  * its final value will be returned as `null`. You can override this by
  * passing an options object.
  *
  * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
  * field.
  * @param options - An options object to configure how the field is retrieved
  * from the snapshot (for example the desired behavior for server timestamps
  * that have not yet been set to their final value).
  * @returns The data at the specified field location or undefined if no such
  * field exists in the document.
  */
  // We are using `any` here to avoid an explicit cast by our users.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  e.prototype.get = function (t, e) {
    if ((void 0 === e && (e = {}), this.Zf)) {
      var n = this.Zf.data().field(Ya("DocumentSnapshot.get", t));
      if (null !== n) return this.Xf.Uf(n, e.serverTimestamps);
    }
  }, e);
})(Ba), cc = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  /**
  * Retrieves all fields in the document as an `Object`.
  *
  * By default, `FieldValue.serverTimestamp()` values that have not yet been
  * set to their final value will be returned as `null`. You can override
  * this by passing an options object.
  *
  * @override
  * @param options - An options object to configure how data is retrieved from
  * the snapshot (for example the desired behavior for server timestamps that
  * have not yet been set to their final value).
  * @returns An `Object` containing all fields in the document.
  */
  return (_tslib.__extends(e, t), e.prototype.data = function (e) {
    return (void 0 === e && (e = {}), t.prototype.data.call(this, e));
  }, e);
})(ac), hc = /** @class*/
(function () {
  /** @hideconstructor*/
  function t(t, e, n, r) {
    (this.Yf = t, this.Xf = e, this._d = r, this.metadata = new sc(r.hasPendingWrites, r.fromCache), this.query = n);
  }
  return (Object.defineProperty(t.prototype, "docs", {
    /** An array of all the documents in the `QuerySnapshot`.*/
    get: function () {
      var t = [];
      return (this.forEach(function (e) {
        return t.push(e);
      }), t);
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "size", {
    /** The number of documents in the `QuerySnapshot`.*/
    get: function () {
      return this._d.docs.size;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(t.prototype, "empty", {
    /** True if there are no documents in the `QuerySnapshot`.*/
    get: function () {
      return 0 === this.size;
    },
    enumerable: !1,
    configurable: !0
  }), /**
  * Enumerates all of the documents in the `QuerySnapshot`.
  *
  * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
  * each document in the snapshot.
  * @param thisArg - The `this` binding for the callback.
  */
  t.prototype.forEach = function (t, e) {
    var n = this;
    this._d.docs.forEach(function (r) {
      t.call(e, new cc(n.Yf, n.Xf, r.key, r, new sc(n._d.De.has(r.key), n._d.fromCache), n.query.v_));
    });
  }, /**
  * Returns an array of the documents changes since the last snapshot. If this
  * is the first snapshot, all documents will be in the list as 'added'
  * changes.
  *
  * @param options - `SnapshotListenOptions` that control whether metadata-only
  * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
  * snapshot events.
  */
  t.prototype.docChanges = function (t) {
    void 0 === t && (t = {});
    var e = !!t.includeMetadataChanges;
    if (e && this._d.xe) throw new q(M.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
    return (this.fd && this.dd === e || (this.fd = /** Calculates the array of DocumentChanges for a given ViewSnapshot.*/
    (function (t, e) {
      if (t._d.Se.et()) {
        // Special case the first snapshot because index calculation is easy and
        // fast
        var n = 0;
        return t._d.docChanges.map(function (e) {
          var r = new cc(t.Yf, t.Xf, e.doc.key, e.doc, new sc(t._d.De.has(e.doc.key), t._d.fromCache), t.query.v_);
          return (e.doc, {
            type: "added",
            doc: r,
            oldIndex: -1,
            newIndex: n++
          });
        });
      }
      // A DocumentSet that is updated incrementally as changes are applied to use
      // to lookup the index of a document.
      var r = t._d.Se;
      return t._d.docChanges.filter(function (t) {
        return e || 3 !== /*Metadata*/
        t.type;
      }).map(function (e) {
        var n = new cc(t.Yf, t.Xf, e.doc.key, e.doc, new sc(t._d.De.has(e.doc.key), t._d.fromCache), t.query.v_), i = -1, o = -1;
        return (0 !== /*Added*/
        e.type && (i = r.indexOf(e.doc.key), r = r.delete(e.doc.key)), 1 !== /*Removed*/
        e.type && (o = (r = r.add(e.doc)).indexOf(e.doc.key)), {
          type: fc(e.type),
          doc: n,
          oldIndex: i,
          newIndex: o
        });
      });
    })(this, e), this.dd = e), this.fd);
  }, t);
})();
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Metadata about a snapshot, describing the state of the snapshot.
*/
function fc(t) {
  switch (t) {
    case 0:
      /*Added*/
      return "added";
    case 2:
    case 3:
      /*Metadata*/
      return "modified";
    case 1:
      /*Removed*/
      return "removed";
    default:
      return x();
  }
}
// TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
// metadata
/**
* Returns true if the provided snapshots are equal.
*
* @param left - A snapshot to compare.
* @param right - A snapshot to compare.
* @returns true if the snapshots are equal.
*/
function lc(t, e) {
  return t instanceof ac && e instanceof ac ? t.Yf === e.Yf && t.S_.isEqual(e.S_) && (null === t.Zf ? null === e.Zf : t.Zf.isEqual(e.Zf)) && t.v_ === e.v_ : t instanceof hc && e instanceof hc && t.Yf === e.Yf && Ys(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._d.isEqual(e._d);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Reads the document referred to by this `DocumentReference`.
*
* Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
* for data from the server, but it may return cached data or fail if you are
* offline and the server cannot be reached. To specify this behavior, invoke
* {@link getDocFromCache} or {@link getDocFromServer}.
*
* @param reference - The reference of the document to fetch.
* @returns A Promise resolved with a `DocumentSnapshot` containing the
* current document contents.
*/
var pc = /** @class*/
(function (t) {
  function e(e) {
    var n = this;
    return ((n = t.call(this) || this).firestore = e, n);
  }
  return (_tslib.__extends(e, t), e.prototype.Wf = function (t) {
    return new F(t);
  }, e.prototype.jf = function (t) {
    var e = this.Jf(t, this.firestore.I_);
    return new Fs(this.firestore, /*converter=*/
    null, e);
  }, e);
})(Ga);
/**
* Reads the document referred to by this `DocumentReference` from cache.
* Returns an error if the document is not currently cached.
*
* @returns A Promise resolved with a `DocumentSnapshot` containing the
* current document contents.
*/
function dc(t, e, n) {
  for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
  t = Ls(t, Fs);
  var o = Ls(t.firestore, Ma), u = ta(o);
  // For Compat types, we have to "extract" the underlying types before
  // performing validation.
  return (e instanceof Ss && (e = e.d_), yc(o, [("string" == typeof e || e instanceof As ? ca(u, "updateDoc", t.S_, e, n, r) : aa(u, "updateDoc", t.S_, e)).F_(t.S_, Re.exists(!0))]));
}
/**
* Deletes the document referred to by the specified `DocumentReference`.
*
* @param reference - A reference to the document to delete.
* @returns A Promise resolved once the document has been successfully
* deleted from the backend (note that it won't resolve while you're offline).
*/
function vc(t) {
  for (var e, n, r, i = [], o = 1; o < arguments.length; o++) i[o - 1] = arguments[o];
  t instanceof Ss && (t = t.d_);
  var u = {
    includeMetadataChanges: !1
  }, s = 0;
  "object" != typeof i[s] || La(i[s]) || (u = i[s], s++);
  var a, c, h, f = {
    includeMetadataChanges: u.includeMetadataChanges
  };
  if (La(i[s])) {
    var l = i[s];
    (i[s] = null === (e = l.next) || void 0 === e ? void 0 : e.bind(l), i[s + 1] = null === (n = l.error) || void 0 === n ? void 0 : n.bind(l), i[s + 2] = null === (r = l.complete) || void 0 === r ? void 0 : r.bind(l));
  }
  if (t instanceof Fs) (c = Ls(t.firestore, Ma), h = re(t.S_.path), a = {
    next: function (e) {
      i[s] && i[s](mc(c, t, e));
    },
    error: i[s + 1],
    complete: i[s + 2]
  }); else {
    var p = Ls(t, js);
    (c = Ls(p.firestore, Ma), h = p.C_);
    var d = new pc(c);
    (a = {
      next: function (t) {
        i[s] && i[s](new hc(c, d, p, t));
      },
      error: i[s + 1],
      complete: i[s + 2]
    }, Ha(t.C_));
  }
  return (function (t, e, n, r) {
    var i = this, o = new Ts(r), u = new ku(e, o, n);
    return (t._s.Ps(function () {
      return _tslib.__awaiter(i, void 0, void 0, function () {
        var e;
        return _tslib.__generator(this, function (n) {
          switch (n.label) {
            case 0:
              return (e = Nu, [4, /*yield*/
              Oa(t)]);
            case 1:
              return [2, /*return*/
              e.apply(void 0, [n.sent(), u])];
          }
        });
      });
    }), function () {
      (o.i_(), t._s.Ps(function () {
        return _tslib.__awaiter(i, void 0, void 0, function () {
          var e;
          return _tslib.__generator(this, function (n) {
            switch (n.label) {
              case 0:
                return (e = Au, [4, /*yield*/
                Oa(t)]);
              case 1:
                return [2, /*return*/
                e.apply(void 0, [n.sent(), u])];
            }
          });
        });
      }));
    });
  })(qa(c), h, f, a);
}
/** Locally writes `mutations` on the async queue.*/
function yc(t, e) {
  return (function (t, e) {
    var n = this, r = new fr();
    return (t._s.Ps(function () {
      return _tslib.__awaiter(n, void 0, void 0, function () {
        var n;
        return _tslib.__generator(this, function (i) {
          switch (i.label) {
            case 0:
              return (n = Bu, [4, /*yield*/
              ka(t)]);
            case 1:
              return [2, /*return*/
              n.apply(void 0, [i.sent(), e, r])];
          }
        });
      });
    }), r.promise);
  })(qa(t), e);
}
/**
* Converts a ViewSnapshot that contains the single document specified by `ref`
* to a DocumentSnapshot.
*/
function mc(t, e, n) {
  var r = n.docs.get(e.S_), i = new pc(t);
  return new ac(t, i, e.S_, r, new sc(n.hasPendingWrites, n.fromCache), e.v_);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A write batch, used to perform multiple writes as a single atomic unit.
*
* A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
* provides methods for adding writes to the write batch. None of the writes
* will be committed (or visible locally) until {@link WriteBatch#commit} is
* called.
*/
var gc = /** @class*/
(function () {
  /** @hideconstructor*/
  function t(t, e) {
    (this.Yf = t, this.wd = e, this.Ed = [], this.Td = !1, this.Id = ta(t));
  }
  return (t.prototype.set = function (t, e, n) {
    this.md();
    var r = wc(t, this.Yf), i = oc(r.v_, e, n), o = ea(this.Id, "WriteBatch.set", r.S_, i, null !== r.v_, n);
    return (this.Ed.push(o.F_(r.S_, Re.Kt())), this);
  }, t.prototype.update = function (t, e, n) {
    for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
    this.md();
    var o, u = wc(t, this.Yf);
    // For Compat types, we have to "extract" the underlying types before
    // performing validation.
    return (e instanceof Ss && (e = e.d_), o = "string" == typeof e || e instanceof As ? ca(this.Id, "WriteBatch.update", u.S_, e, n, r) : aa(this.Id, "WriteBatch.update", u.S_, e), this.Ed.push(o.F_(u.S_, Re.exists(!0))), this);
  }, /**
  * Deletes the document referred to by the provided {@link DocumentReference}.
  *
  * @param documentRef - A reference to the document to be deleted.
  * @returns This `WriteBatch` instance. Used for chaining method calls.
  */
  t.prototype.delete = function (t) {
    this.md();
    var e = wc(t, this.Yf);
    return (this.Ed = this.Ed.concat(new Je(e.S_, Re.Kt())), this);
  }, /**
  * Commits all of the writes in this write batch as a single atomic unit.
  *
  * The result of these writes will only be reflected in document reads that
  * occur after the returned Promise resolves. If the client is offline, the
  * write fails. If you would like to see local modifications or buffer writes
  * until the client is online, use the full Firestore SDK.
  *
  * @returns A Promise resolved once all of the writes in the batch have been
  * successfully written to the backend as an atomic unit (note that it won't
  * resolve while you're offline).
  */
  t.prototype.commit = function () {
    return (this.md(), this.Td = !0, this.Ed.length > 0 ? this.wd(this.Ed) : Promise.resolve());
  }, t.prototype.md = function () {
    if (this.Td) throw new q(M.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
  }, t);
})();
function wc(t, e) {
  if ((t instanceof Ss && (t = t.d_), t.firestore !== e)) throw new q(M.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
  return t;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
// legacy SDK.
/**
* A reference to a transaction.
*
* The `Transaction` object passed to a transaction's `updateFunction` provides
* the methods to read and write data within the transaction context. See
* {@link runTransaction}.
*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A reference to a transaction.
*
* The `Transaction` object passed to a transaction's `updateFunction` provides
* the methods to read and write data within the transaction context. See
* {@link runTransaction}.
*/
var bc = /** @class*/
(function (t) {
  // This class implements the same logic as the Transaction API in the Lite SDK
  // but is subclassed in order to return its own DocumentSnapshot types.
  /** @hideconstructor*/
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, e, n) || this).Yf = e, r);
  }
  /**
  * Reads the document referenced by the provided {@link DocumentReference}.
  *
  * @param documentRef - A reference to the document to be read.
  * @returns A `DocumentSnapshot` with the read data.
  */
  return (_tslib.__extends(e, t), e.prototype.get = function (e) {
    var n = this, r = wc(e, this.Yf), i = new pc(this.Yf);
    return t.prototype.get.call(this, e).then(function (t) {
      return new ac(n.Yf, i, r.S_, t.Zf, new sc(/*hasPendingWrites=*/
      !1, /*fromCache=*/
      !1), r.v_);
    });
  }, e);
})(/** @class*/
(function () {
  /** @hideconstructor*/
  function t(t, e) {
    (this.Yf = t, this.Ad = e, this.Id = ta(t));
  }
  return (t.prototype.get = function (t) {
    var e = this, n = wc(t, this.Yf), r = new uc(this.Yf);
    return this.Ad.ef([n.S_]).then(function (t) {
      if (!t || 1 !== t.length) return x();
      var i = t[0];
      if (i instanceof Vt) return new Ba(e.Yf, r, n.S_, null, n.v_);
      if (i instanceof Pt) return new Ba(e.Yf, r, i.key, i, n.v_);
      throw x();
    });
  }, t.prototype.set = function (t, e, n) {
    var r = wc(t, this.Yf), i = oc(r.v_, e, n), o = ea(this.Id, "Transaction.set", r.S_, i, null !== r.v_, n);
    return (this.Ad.set(r.S_, o), this);
  }, t.prototype.update = function (t, e, n) {
    for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
    var o, u = wc(t, this.Yf);
    // For Compat types, we have to "extract" the underlying types before
    // performing validation.
    return (e instanceof Ss && (e = e.d_), o = "string" == typeof e || e instanceof As ? ca(this.Id, "Transaction.update", u.S_, e, n, r) : aa(this.Id, "Transaction.update", u.S_, e), this.Ad.update(u.S_, o), this);
  }, /**
  * Deletes the document referred to by the provided {@link DocumentReference}.
  *
  * @param documentRef - A reference to the document to be deleted.
  * @returns This `Transaction` instance. Used for chaining method calls.
  */
  t.prototype.delete = function (t) {
    var e = wc(t, this.Yf);
    return (this.Ad.delete(e.S_), this);
  }, t);
})());
/**
* Executes the given `updateFunction` and then attempts to commit the changes
* applied within the transaction. If any document read within the transaction
* has changed, Cloud Firestore retries the `updateFunction`. If it fails to
* commit after 5 attempts, the transaction fails.
*
* The maximum number of writes allowed in a single transaction is 500.
*
* @param firestore - A reference to the Firestore database to run this
* transaction against.
* @param updateFunction - The function to execute within the transaction
* context.
* @returns If the transaction completed successfully or was explicitly aborted
* (the `updateFunction` returned a failed promise), the promise returned by the
* `updateFunction `is returned here. Otherwise, if the transaction failed, a
* rejected promise with the corresponding failure error is returned.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Helper function to assert Uint8Array is available at runtime.*/
function _c() {
  if ("undefined" == typeof Uint8Array) throw new q(M.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
}
/** Helper function to assert Base64 functions are available at runtime.*/
function Ic() {
  if ("undefined" == typeof atob) throw new q(M.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
}
/** Immutable class holding a blob (binary data)*/
var Ec = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e.fromBase64String = function (t) {
    return (Ic(), new e(F.fromBase64String(t)));
  }, e.fromUint8Array = function (t) {
    return (_c(), new e(F.fromUint8Array(t)));
  }, e.prototype.toBase64 = function () {
    return (Ic(), this.d_.toBase64());
  }, e.prototype.toUint8Array = function () {
    return (_c(), this.d_.toUint8Array());
  }, e.prototype.isEqual = function (t) {
    return this.d_.isEqual(t.d_);
  }, e.prototype.toString = function () {
    return "Blob(base64: " + this.toBase64() + ")";
  }, e);
})(Ss), Tc = /** @class*/
(function () {
  function t() {}
  return (t.prototype.enableIndexedDbPersistence = function (t, e) {
    return (function (t, e) {
      za(t = Ls(t, Ma));
      var n = qa(t), r = t.p_(), i = new Is();
      return ja(n, i, new bs(i, r.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
    })(t.d_, {
      forceOwnership: e
    });
  }, t.prototype.enableMultiTabIndexedDbPersistence = function (t) {
    return (function (t) {
      za(t = Ls(t, Ma));
      var e = qa(t), n = t.p_(), r = new Is();
      return ja(e, r, new _s(r, n.cacheSizeBytes));
    })(t.d_);
  }, t.prototype.clearIndexedDbPersistence = function (t) {
    return (function (t) {
      var e = this;
      if (t.R_ && !t.P_) throw new q(M.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
      var n = new fr();
      return (t.Bf.Tf(function () {
        return _tslib.__awaiter(e, void 0, void 0, function () {
          var e;
          return _tslib.__generator(this, function (r) {
            switch (r.label) {
              case 0:
                return (r.trys.push([0, 2, , 3]), [4, /*yield*/
                (function (t) {
                  return _tslib.__awaiter(this, void 0, void 0, function () {
                    var e;
                    return _tslib.__generator(this, function (n) {
                      switch (n.label) {
                        case 0:
                          return dr.Kn() ? (e = t + "main", [4, /*yield*/
                          dr.delete(e)]) : [2, /*return*/
                          Promise.resolve()];
                        case 1:
                          return (n.sent(), [2]);
                      }
                    });
                  });
                })(Xi(t.I_, t.w_))]);
              case 1:
                return (r.sent(), n.resolve(), [3, /*break*/
                3]);
              case 2:
                return (e = r.sent(), n.reject(e), [3, /*break*/
                3]);
              case 3:
                return [2];
            }
          });
        });
      }), n.promise);
    })(t.d_);
  }, t);
})(), Nc = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this, n) || this).Rd = r, i.INTERNAL = {
      delete: function () {
        return i.terminate();
      }
    }, e instanceof I || (i.Pd = e), i);
  }
  return (_tslib.__extends(e, t), Object.defineProperty(e.prototype, "I_", {
    get: function () {
      return this.d_.I_;
    },
    enumerable: !1,
    configurable: !0
  }), e.prototype.settings = function (t) {
    (t.merge && // Remove the property from the settings once the merge is completed
    delete (t = Object.assign(Object.assign({}, this.d_.V_()), t)).merge, this.d_.g_(t));
  }, e.prototype.useEmulator = function (t, e) {
    !(function (t, e, n) {
      var r = (t = Ls(t, qs)).V_();
      ("firestore.googleapis.com" !== r.host && r.host !== e && D("Host has been set in both settings() and useEmulator(), emulator host will be used"), t.g_(Object.assign(Object.assign({}, r), {
        host: e + ":" + n,
        ssl: !1
      })));
    })(this.d_, t, e);
  }, e.prototype.enableNetwork = function () {
    return (function (t) {
      var e = this;
      return t._s.enqueue(function () {
        return _tslib.__awaiter(e, void 0, void 0, function () {
          var e, n;
          return _tslib.__generator(this, function (r) {
            switch (r.label) {
              case 0:
                return [4, /*yield*/
                Da(t)];
              case 1:
                return (e = r.sent(), [4, /*yield*/
                xa(t)]);
              case 2:
                return (n = r.sent(), [2, /*return*/
                (e.yo(!0), (function (t) {
                  var e = O(t);
                  return (e.Nh.delete(0), Jo(e));
                })(n))]);
            }
          });
        });
      });
    })(/** Disables the network connection. Pending operations will not complete.*/
    qa(Ls(this.d_, Ma)));
  }, e.prototype.disableNetwork = function () {
    return (function (t) {
      var e = this;
      return t._s.enqueue(function () {
        return _tslib.__awaiter(e, void 0, void 0, function () {
          var e, n;
          return _tslib.__generator(this, function (r) {
            switch (r.label) {
              case 0:
                return [4, /*yield*/
                Da(t)];
              case 1:
                return (e = r.sent(), [4, /*yield*/
                xa(t)]);
              case 2:
                return (n = r.sent(), [2, /*return*/
                (e.yo(!1), (function (t) {
                  return _tslib.__awaiter(this, void 0, void 0, function () {
                    var e;
                    return _tslib.__generator(this, function (n) {
                      switch (n.label) {
                        case 0:
                          return ((e = O(t)).Nh.add(0), [4, /*yield*/
                          $o(e)]);
                        case 1:
                          return (n.sent(), // Set the OnlineState to Offline so get()s return from cache, etc.
                          e.Oh.set("Offline"), [2]);
                      }
                    });
                  });
                })(n))]);
            }
          });
        });
      });
    })(/**
    * Returns a Promise that resolves when all writes that were pending at the time
    * this method was called received server acknowledgement. An acknowledgement
    * can be either acceptance or rejection.
    */
    qa(Ls(this.d_, Ma)));
  }, e.prototype.enablePersistence = function (t) {
    var e = !1, n = !1;
    return (t && Os("synchronizeTabs", e = !!t.synchronizeTabs, "experimentalForceOwningTab", n = !!t.experimentalForceOwningTab), e ? this.Rd.enableMultiTabIndexedDbPersistence(this) : this.Rd.enableIndexedDbPersistence(this, n));
  }, e.prototype.clearPersistence = function () {
    return this.Rd.clearIndexedDbPersistence(this);
  }, e.prototype.terminate = function () {
    return (this.Pd && (this.Pd._removeServiceInstance("firestore"), this.Pd._removeServiceInstance("firestore-exp")), this.d_._delete());
  }, e.prototype.waitForPendingWrites = function () {
    return (function (t) {
      var e = this, n = new fr();
      return (t._s.Ps(function () {
        return _tslib.__awaiter(e, void 0, void 0, function () {
          var e;
          return _tslib.__generator(this, function (r) {
            switch (r.label) {
              case 0:
                return (e = Wu, [4, /*yield*/
                ka(t)]);
              case 1:
                return [2, /*return*/
                e.apply(void 0, [r.sent(), n])];
            }
          });
        });
      }), n.promise);
    })(qa(Ls(this.d_, Ma)));
  }, e.prototype.onSnapshotsInSync = function (t) {
    return (function (t, e) {
      return (function (t, e) {
        var n = this, r = new Ts(e);
        return (t._s.Ps(function () {
          return _tslib.__awaiter(n, void 0, void 0, function () {
            var e;
            return _tslib.__generator(this, function (n) {
              switch (n.label) {
                case 0:
                  return (e = function (t, e) {
                    (O(t).Wh.add(e), // Immediately fire an initial event, indicating all existing listeners
                    // are in-sync.
                    e.next());
                  }, [4, /*yield*/
                  Oa(t)]);
                case 1:
                  return [2, /*return*/
                  e.apply(void 0, [n.sent(), r])];
              }
            });
          });
        }), function () {
          (r.i_(), t._s.Ps(function () {
            return _tslib.__awaiter(n, void 0, void 0, function () {
              var e;
              return _tslib.__generator(this, function (n) {
                switch (n.label) {
                  case 0:
                    return (e = function (t, e) {
                      O(t).Wh.delete(e);
                    }, [4, /*yield*/
                    Oa(t)]);
                  case 1:
                    return [2, /*return*/
                    e.apply(void 0, [n.sent(), r])];
                }
              });
            });
          }));
        });
      })(qa(t = Ls(t, Ma)), La(e) ? e : {
        next: e
      });
    })(this.d_, t);
  }, Object.defineProperty(e.prototype, "app", {
    get: function () {
      if (!this.Pd) throw new q(M.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
      return this.Pd;
    },
    enumerable: !1,
    configurable: !0
  }), e.prototype.collection = function (t) {
    try {
      return new Fc(this, Gs(this.d_, t));
    } catch (t) {
      throw Pc(t, "collection()", "Firestore.collection()");
    }
  }, e.prototype.doc = function (t) {
    try {
      return new Oc(this, Bs(this.d_, t));
    } catch (t) {
      throw Pc(t, "doc()", "Firestore.doc()");
    }
  }, e.prototype.collectionGroup = function (t) {
    try {
      return new Uc(this, (function (t, e) {
        if ((t = Ls(t, qs), xs("collectionGroup", "collection id", e), e.indexOf("/") >= 0)) throw new q(M.INVALID_ARGUMENT, "Invalid collection ID '" + e + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
        return new js(t, /*converter=*/
        null, /**
        * Creates a new Query for a collection group query that matches all documents
        * within the provided collection group.
        */
        (function (t) {
          return new ee(Z.ct(), t);
        })(e));
      })(this.d_, t));
    } catch (t) {
      throw Pc(t, "collectionGroup()", "Firestore.collectionGroup()");
    }
  }, e.prototype.runTransaction = function (t) {
    var e = this;
    return (function (t, e) {
      return (function (t, e) {
        var n = this, r = new fr();
        return (t._s.Ps(function () {
          return _tslib.__awaiter(n, void 0, void 0, function () {
            var n;
            return _tslib.__generator(this, function (i) {
              switch (i.label) {
                case 0:
                  return [4, /*yield*/
                  (function (t) {
                    return Aa(t).then(function (t) {
                      return t.Sh;
                    });
                  })(t)];
                case 1:
                  return (n = i.sent(), new _a(t._s, n, e, r).run(), [2]);
              }
            });
          });
        }), r.promise);
      })(qa(t), function (n) {
        return e(new bc(t, n));
      });
    })(this.d_, function (n) {
      return t(new Sc(e, n));
    });
  }, e.prototype.batch = function () {
    var t = this;
    return (qa(this.d_), new xc(new gc(this.d_, function (e) {
      return yc(t.d_, e);
    })));
  }, e.prototype.loadBundle = function (t) {
    throw new q(M.FAILED_PRECONDITION, '"loadBundle()" does not exist, have you imported "firebase/firestore/bundle"?');
  }, e.prototype.namedQuery = function (t) {
    throw new q(M.FAILED_PRECONDITION, '"namedQuery()" does not exist, have you imported "firebase/firestore/bundle"?');
  }, e);
})(Ss), Ac = /** @class*/
(function (t) {
  function e(e) {
    var n = this;
    return ((n = t.call(this) || this).firestore = e, n);
  }
  return (_tslib.__extends(e, t), e.prototype.Wf = function (t) {
    return new Ec(new F(t));
  }, e.prototype.jf = function (t) {
    var e = this.Jf(t, this.firestore.I_);
    return Oc.yd(e, this.firestore, /*converter=*/
    null);
  }, e);
})(Ga);
/**
* The persistence provider included with the full Firestore SDK.
*/
function Dc(t) {
  var e;
  (e = t, E.setLogLevel(e));
}
/**
* A reference to a transaction.
*/
var Sc = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, n) || this).Yf = e, r.Xf = new Ac(e), r);
  }
  return (_tslib.__extends(e, t), e.prototype.get = function (t) {
    var e = this, n = jc(t);
    return this.d_.get(n).then(function (t) {
      return new Lc(e.Yf, new ac(e.Yf.d_, e.Xf, t.S_, t.Zf, t.metadata, n.v_));
    });
  }, e.prototype.set = function (t, e, n) {
    var r = jc(t);
    return (n ? (ks("Transaction.set", n), this.d_.set(r, e, n)) : this.d_.set(r, e), this);
  }, e.prototype.update = function (t, e, n) {
    for (var r, i = [], o = 3; o < arguments.length; o++) i[o - 3] = arguments[o];
    var u = jc(t);
    return (2 === arguments.length ? this.d_.update(u, e) : (r = this.d_).update.apply(r, _tslib.__spreadArrays([u, e, n], i)), this);
  }, e.prototype.delete = function (t) {
    var e = jc(t);
    return (this.d_.delete(e), this);
  }, e);
})(Ss), xc = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.set = function (t, e, n) {
    var r = jc(t);
    return (n ? (ks("WriteBatch.set", n), this.d_.set(r, e, n)) : this.d_.set(r, e), this);
  }, e.prototype.update = function (t, e, n) {
    for (var r, i = [], o = 3; o < arguments.length; o++) i[o - 3] = arguments[o];
    var u = jc(t);
    return (2 === arguments.length ? this.d_.update(u, e) : (r = this.d_).update.apply(r, _tslib.__spreadArrays([u, e, n], i)), this);
  }, e.prototype.delete = function (t) {
    var e = jc(t);
    return (this.d_.delete(e), this);
  }, e.prototype.commit = function () {
    return this.d_.commit();
  }, e);
})(Ss), kc = /** @class*/
(function (t) {
  function e(e, n, r) {
    var i = this;
    return ((i = t.call(this, r) || this).Yf = e, i.Xf = n, i);
  }
  return (_tslib.__extends(e, t), e.prototype.fromFirestore = function (t, e) {
    var n = new cc(this.Yf.d_, this.Xf, t.S_, t.Zf, t.metadata, /*converter=*/
    null);
    return this.d_.fromFirestore(new Rc(this.Yf, n), null != e ? e : {});
  }, e.prototype.toFirestore = function (t, e) {
    return e ? this.d_.toFirestore(t, e) : this.d_.toFirestore(t);
  }, // Use the same instance of `FirestoreDataConverter` for the given instances
  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will
  // compare equal for two objects created with the same converter instance.
  e.gd = function (t, n) {
    var r = e.Vd, i = r.get(t);
    i || (i = new WeakMap(), r.set(t, i));
    var o = i.get(n);
    return (o || (o = new e(t, new Ac(t), n), i.set(n, o)), o);
  }, e);
})(Ss);
kc.Vd = new WeakMap();
/**
* A reference to a particular document in a collection in the database.
*/
var Oc = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, n) || this).firestore = e, r.Xf = new Ac(e), r);
  }
  return (_tslib.__extends(e, t), e.pd = function (t, n, r) {
    if (t.length % 2 != 0) throw new q(M.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t.rt() + " has " + t.length);
    return new e(n, new Fs(n.d_, r, new tt(t)));
  }, e.yd = function (t, n, r) {
    return new e(n, new Fs(n.d_, r, t));
  }, Object.defineProperty(e.prototype, "id", {
    get: function () {
      return this.d_.id;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "parent", {
    get: function () {
      return new Fc(this.firestore, this.d_.parent);
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "path", {
    get: function () {
      return this.d_.path;
    },
    enumerable: !1,
    configurable: !0
  }), e.prototype.collection = function (t) {
    try {
      return new Fc(this.firestore, Gs(this.d_, t));
    } catch (t) {
      throw Pc(t, "collection()", "DocumentReference.collection()");
    }
  }, e.prototype.isEqual = function (t) {
    return (t instanceof Ss && (t = t.d_), t instanceof Fs && Qs(this.d_, t));
  }, e.prototype.set = function (t, e) {
    e = ks("DocumentReference.set", e);
    try {
      return (function (t, e, n) {
        t = Ls(t, Fs);
        var r = Ls(t.firestore, Ma), i = oc(t.v_, e, n);
        return yc(r, [ea(ta(r), "setDoc", t.S_, i, null !== t.v_, n).F_(t.S_, Re.Kt())]);
      })(this.d_, t, e);
    } catch (t) {
      throw Pc(t, "setDoc()", "DocumentReference.set()");
    }
  }, e.prototype.update = function (t, e) {
    for (var n = [], r = 2; r < arguments.length; r++) n[r - 2] = arguments[r];
    try {
      return 1 === arguments.length ? dc(this.d_, t) : dc.apply(void 0, _tslib.__spreadArrays([this.d_, t, e], n));
    } catch (t) {
      throw Pc(t, "updateDoc()", "DocumentReference.update()");
    }
  }, e.prototype.delete = function () {
    return yc(Ls((t = this.d_).firestore, Ma), [new Je(t.S_, Re.Kt())]);
    var t;
  }, e.prototype.onSnapshot = function () {
    for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
    var r = Vc(e), i = Cc(e, function (e) {
      return new Lc(t.firestore, new ac(t.firestore.d_, t.Xf, e.S_, e.Zf, e.metadata, t.d_.v_));
    });
    return vc(this.d_, r, i);
  }, e.prototype.get = function (t) {
    var e = this;
    return ("cache" === (null == t ? void 0 : t.source) ? (function (t) {
      t = Ls(t, Fs);
      var e = Ls(t.firestore, Ma), n = qa(e), r = new pc(e);
      return (function (t, e) {
        var n = this, r = new fr();
        return (t._s.Ps(function () {
          return _tslib.__awaiter(n, void 0, void 0, function () {
            var n;
            return _tslib.__generator(this, function (i) {
              switch (i.label) {
                case 0:
                  return (n = function (t, e, n) {
                    return _tslib.__awaiter(this, void 0, void 0, function () {
                      var r, i;
                      return _tslib.__generator(this, function (o) {
                        switch (o.label) {
                          case 0:
                            return (o.trys.push([0, 2, , 3]), [4, /*yield*/
                            (function (t, e) {
                              var n = O(t);
                              return n.persistence.runTransaction("read document", "readonly", function (t) {
                                return n.Tc.Ho(t, e);
                              });
                            })(t, e)]);
                          case 1:
                            return ((i = o.sent()) instanceof Pt ? n.resolve(i) : i instanceof Vt ? n.resolve(null) : n.reject(new q(M.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), [3, /*break*/
                            3]);
                          case 2:
                            return (r = o.sent(), i = Er(r, "Failed to get document '" + e + " from cache"), n.reject(i), [3, /*break*/
                            3]);
                          case 3:
                            return [2];
                        }
                      });
                    });
                  }, [4, /*yield*/
                  Sa(t)]);
                case 1:
                  return [2, /*return*/
                  n.apply(void 0, [i.sent(), e, r])];
              }
            });
          });
        }), r.promise);
      })(n, t.S_).then(function (n) {
        return new ac(e, r, t.S_, n, new sc(n instanceof Pt && n.Vt, /*fromCache=*/
        !0), t.v_);
      });
    })(this.d_) : "server" === (null == t ? void 0 : t.source) ? (function (t) {
      t = Ls(t, Fs);
      var e = Ls(t.firestore, Ma);
      return Pa(qa(e), t.S_, {
        source: "server"
      }).then(function (n) {
        return mc(e, t, n);
      });
    })(this.d_) : (function (t) {
      t = Ls(t, Fs);
      var e = Ls(t.firestore, Ma);
      return Pa(qa(e), t.S_).then(function (n) {
        return mc(e, t, n);
      });
    })(this.d_)).then(function (t) {
      return new Lc(e.firestore, new ac(e.firestore.d_, e.Xf, t.S_, t.Zf, t.metadata, e.d_.v_));
    });
  }, e.prototype.withConverter = function (t) {
    return new e(this.firestore, this.d_.withConverter(kc.gd(this.firestore, t)));
  }, e);
})(Ss);
/**
* Replaces the function name in an error thrown by the firestore-exp API
* with the function names used in the classic API.
*/
function Pc(t, e, n) {
  return (t.message = t.message.replace(e, n), t);
}
function Vc(t) {
  for (var e = 0, n = t; e < n.length; e++) {
    var r = n[e];
    if ("object" == typeof r && !La(r)) return r;
  }
  return {};
}
/**
* Creates an observer that can be passed to the firestore-exp SDK. The
* observer converts all observed values into the format expected by the classic
* SDK.
*
* @param args - The list of arguments from an `onSnapshot` call.
* @param wrapper - The function that converts the firestore-exp type into the
* type used by this shim.
*/
function Cc(t, e) {
  var n, r, i;
  return {
    next: function (t) {
      i.next && i.next(e(t));
    },
    error: null === (n = (i = La(t[0]) ? t[0] : La(t[1]) ? t[1] : "function" == typeof t[0] ? {
      next: t[0],
      error: t[1],
      complete: t[2]
    } : {
      next: t[1],
      error: t[2],
      complete: t[3]
    }).error) || void 0 === n ? void 0 : n.bind(i),
    complete: null === (r = i.complete) || void 0 === r ? void 0 : r.bind(i)
  };
}
var Lc = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, n) || this).Yf = e, r);
  }
  return (_tslib.__extends(e, t), Object.defineProperty(e.prototype, "ref", {
    get: function () {
      return new Oc(this.Yf, this.d_.ref);
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "id", {
    get: function () {
      return this.d_.id;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "metadata", {
    get: function () {
      return this.d_.metadata;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "exists", {
    get: function () {
      return this.d_.exists();
    },
    enumerable: !1,
    configurable: !0
  }), e.prototype.data = function (t) {
    return this.d_.data(t);
  }, e.prototype.get = function (t, e) {
    return this.d_.get(t, e);
  }, e.prototype.isEqual = function (t) {
    return lc(this.d_, t.d_);
  }, e);
})(Ss), Rc = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e.prototype.data = function (t) {
    return this.d_.data(t);
  }, e);
})(Lc), Uc = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, n) || this).firestore = e, r.Xf = new Ac(e), r);
  }
  return (_tslib.__extends(e, t), e.prototype.where = function (t, n, r) {
    try {
      // The "as string" cast is a little bit of a hack. `where` accepts the
      // FieldPath Compat type as input, but is not typed as such in order to
      // not expose this via our public typings file.
      return new e(this.firestore, Xa(this.d_, (function (t, e, n) {
        var r = e, i = Ya("where", t);
        return new Wa(i, r, n);
      })(t, n, r)));
    } catch (t) {
      throw Pc(t, /(orderBy|where)\(\)/, "Query.$1()");
    }
  }, e.prototype.orderBy = function (t, n) {
    try {
      // The "as string" cast is a little bit of a hack. `orderBy` accepts the
      // FieldPath Compat type as input, but is not typed as such in order to
      // not expose this via our public typings file.
      return new e(this.firestore, Xa(this.d_, (function (t, e) {
        void 0 === e && (e = "asc");
        var n = e, r = Ya("orderBy", t);
        return new Za(r, n);
      })(t, n)));
    } catch (t) {
      throw Pc(t, /(orderBy|where)\(\)/, "Query.$1()");
    }
  }, e.prototype.limit = function (t) {
    try {
      return new e(this.firestore, Xa(this.d_, (function (t) {
        return (Rs("limit", t), new Ja("limit", t, "F"));
      })(t)));
    } catch (t) {
      throw Pc(t, "limit()", "Query.limit()");
    }
  }, e.prototype.limitToLast = function (t) {
    try {
      return new e(this.firestore, Xa(this.d_, (function (t) {
        return (Rs("limitToLast", t), new Ja("limitToLast", t, "L"));
      })(t)));
    } catch (t) {
      throw Pc(t, "limitToLast()", "Query.limitToLast()");
    }
  }, e.prototype.startAt = function () {
    for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
    try {
      return new e(this.firestore, Xa(this.d_, (function () {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        return new $a("startAt", t, /*before=*/
        !0);
      }).apply(void 0, t)));
    } catch (t) {
      throw Pc(t, "startAt()", "Query.startAt()");
    }
  }, e.prototype.startAfter = function () {
    for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
    try {
      return new e(this.firestore, Xa(this.d_, (function () {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        return new $a("startAfter", t, /*before=*/
        !1);
      }).apply(void 0, t)));
    } catch (t) {
      throw Pc(t, "startAfter()", "Query.startAfter()");
    }
  }, e.prototype.endBefore = function () {
    for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
    try {
      return new e(this.firestore, Xa(this.d_, (function () {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        return new tc("endBefore", t, /*before=*/
        !0);
      }).apply(void 0, t)));
    } catch (t) {
      throw Pc(t, "endBefore()", "Query.endBefore()");
    }
  }, e.prototype.endAt = function () {
    for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
    try {
      return new e(this.firestore, Xa(this.d_, (function () {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        return new tc("endAt", t, /*before=*/
        !1);
      }).apply(void 0, t)));
    } catch (t) {
      throw Pc(t, "endAt()", "Query.endAt()");
    }
  }, e.prototype.isEqual = function (t) {
    return Ys(this.d_, t.d_);
  }, e.prototype.get = function (t) {
    var e = this;
    return ("cache" === (null == t ? void 0 : t.source) ? /**
    * Executes the query and returns the results as a `QuerySnapshot` from cache.
    * Returns an error if the document is not currently cached.
    *
    * @returns A Promise that will be resolved with the results of the query.
    */
    (function (t) {
      t = Ls(t, js);
      var e = Ls(t.firestore, Ma), n = qa(e), r = new pc(e);
      return (function (t, e) {
        var n = this, r = new fr();
        return (t._s.Ps(function () {
          return _tslib.__awaiter(n, void 0, void 0, function () {
            var n;
            return _tslib.__generator(this, function (i) {
              switch (i.label) {
                case 0:
                  return (n = function (t, e, n) {
                    return _tslib.__awaiter(this, void 0, void 0, function () {
                      var r, i, o, u, s;
                      return _tslib.__generator(this, function (a) {
                        switch (a.label) {
                          case 0:
                            return (a.trys.push([0, 2, , 3]), [4, /*yield*/
                            ho(t, e, /*usePreviousResults=*/
                            !0)]);
                          case 1:
                            return (s = a.sent(), r = new Uu(e, s.Rc), i = r.fl(s.documents), o = r.wi(i, /*updateLimboDocuments=*/
                            !1), n.resolve(o.snapshot), [3, /*break*/
                            3]);
                          case 2:
                            return (u = a.sent(), s = Er(u, "Failed to execute query '" + e + " against cache"), n.reject(s), [3, /*break*/
                            3]);
                          case 3:
                            return [2];
                        }
                      });
                    });
                  }, [4, /*yield*/
                  Sa(t)]);
                case 1:
                  return [2, /*return*/
                  n.apply(void 0, [i.sent(), e, r])];
              }
            });
          });
        }), r.promise);
      })(n, t.C_).then(function (n) {
        return new hc(e, r, t, n);
      });
    })(this.d_) : "server" === (null == t ? void 0 : t.source) ? (function (t) {
      t = Ls(t, js);
      var e = Ls(t.firestore, Ma), n = qa(e), r = new pc(e);
      return Va(n, t.C_, {
        source: "server"
      }).then(function (n) {
        return new hc(e, r, t, n);
      });
    })(this.d_) : (function (t) {
      t = Ls(t, js);
      var e = Ls(t.firestore, Ma), n = qa(e), r = new pc(e);
      return (Ha(t.C_), Va(n, t.C_).then(function (n) {
        return new hc(e, r, t, n);
      }));
    })(this.d_)).then(function (t) {
      return new qc(e.firestore, new hc(e.firestore.d_, e.Xf, e.d_, t._d));
    });
  }, e.prototype.onSnapshot = function () {
    for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
    var r = Vc(e), i = Cc(e, function (e) {
      return new qc(t.firestore, new hc(t.firestore.d_, t.Xf, t.d_, e._d));
    });
    return vc(this.d_, r, i);
  }, e.prototype.withConverter = function (t) {
    return new e(this.firestore, this.d_.withConverter(kc.gd(this.firestore, t)));
  }, e);
})(Ss), Mc = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, n) || this).Yf = e, r);
  }
  return (_tslib.__extends(e, t), Object.defineProperty(e.prototype, "type", {
    get: function () {
      return this.d_.type;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "doc", {
    get: function () {
      return new Rc(this.Yf, this.d_.doc);
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "oldIndex", {
    get: function () {
      return this.d_.oldIndex;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "newIndex", {
    get: function () {
      return this.d_.newIndex;
    },
    enumerable: !1,
    configurable: !0
  }), e);
})(Ss), qc = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, n) || this).Yf = e, r);
  }
  return (_tslib.__extends(e, t), Object.defineProperty(e.prototype, "query", {
    get: function () {
      return new Uc(this.Yf, this.d_.query);
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "metadata", {
    get: function () {
      return this.d_.metadata;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "size", {
    get: function () {
      return this.d_.size;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "empty", {
    get: function () {
      return this.d_.empty;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "docs", {
    get: function () {
      var t = this;
      return this.d_.docs.map(function (e) {
        return new Rc(t.Yf, e);
      });
    },
    enumerable: !1,
    configurable: !0
  }), e.prototype.docChanges = function (t) {
    var e = this;
    return this.d_.docChanges(t).map(function (t) {
      return new Mc(e.Yf, t);
    });
  }, e.prototype.forEach = function (t, e) {
    var n = this;
    this.d_.forEach(function (r) {
      t.call(e, new Rc(n.Yf, r));
    });
  }, e.prototype.isEqual = function (t) {
    return lc(this.d_, t.d_);
  }, e);
})(Ss), Fc = /** @class*/
(function (t) {
  function e(e, n) {
    var r = this;
    return ((r = t.call(this, e, n) || this).firestore = e, r.d_ = n, r);
  }
  return (_tslib.__extends(e, t), Object.defineProperty(e.prototype, "id", {
    get: function () {
      return this.d_.id;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "path", {
    get: function () {
      return this.d_.path;
    },
    enumerable: !1,
    configurable: !0
  }), Object.defineProperty(e.prototype, "parent", {
    get: function () {
      var t = this.d_.parent;
      return t ? new Oc(this.firestore, t) : null;
    },
    enumerable: !1,
    configurable: !0
  }), e.prototype.doc = function (t) {
    try {
      return new Oc(this.firestore, void 0 === t ? Bs(this.d_) : Bs(this.d_, t));
    } catch (t) {
      throw Pc(t, "doc()", "CollectionReference.doc()");
    }
  }, e.prototype.add = function (t) {
    var e = this;
    return (function (t, e) {
      var n = Ls(t.firestore, Ma), r = Bs(t), i = oc(t.v_, e);
      return yc(n, [ea(ta(t.firestore), "addDoc", r.S_, i, null !== t.v_, {}).F_(r.S_, Re.exists(!1))]).then(function () {
        return r;
      });
    })(this.d_, t).then(function (t) {
      return new Oc(e.firestore, t);
    });
  }, e.prototype.isEqual = function (t) {
    return Qs(this.d_, t.d_);
  }, e.prototype.withConverter = function (t) {
    return new e(this.firestore, this.d_.withConverter(kc.gd(this.firestore, t)));
  }, e);
})(Uc);
function jc(t) {
  return (t instanceof Ss && (t = t.d_), Ls(t, Fs));
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
// The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.
/**
* A `FieldPath` refers to a field in a document. The path may consist of a
* single field name (referring to a top-level field in the document), or a list
* of field names (referring to a nested field in the document).
*/
var zc = /** @class*/
(function (t) {
  /**
  * Creates a FieldPath from the provided field names. If more than one field
  * name is provided, the path will point to a nested field in a document.
  *
  * @param fieldNames - A list of field names.
  */
  function e() {
    for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
    return t.call(this, new (As.bind.apply(As, _tslib.__spreadArrays([void 0], e)))()) || this;
  }
  return (_tslib.__extends(e, t), e.documentId = function () {
    /**
    * Internal Note: The backend doesn't technically support querying by
    * document ID. Instead it queries by the entire document name (full path
    * included), but in the cases we currently support documentId(), the net
    * effect is the same.
    */
    return new e($.ht().rt());
  }, e.prototype.isEqual = function (t) {
    return (t instanceof Ss && (t = t.d_), t instanceof As && this.d_.f_.isEqual(t.f_));
  }, e);
})(Ss), Gc = /** @class*/
(function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }
  return (_tslib.__extends(e, t), e.serverTimestamp = function () {
    var t = new ia("serverTimestamp");
    return (t._methodName = "FieldValue.serverTimestamp", new e(t));
  }, e.delete = function () {
    var t = new na("deleteField");
    return (t._methodName = "FieldValue.delete", new e(t));
  }, e.arrayUnion = function () {
    for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
    var r = /**
    * Returns a special value that can be used with {@link setDoc} or {@link
    * updateDoc} that tells the server to union the given elements with any array
    * value that already exists on the server. Each specified element that doesn't
    * already exist in the array will be added to the end. If the field being
    * modified is not already an array it will be overwritten with an array
    * containing exactly the specified elements.
    *
    * @param elements - The elements to union into the array.
    * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
    * `updateDoc()`.
    */
    (function () {
      for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
      // NOTE: We don't actually parse the data until it's used in set() or
      // update() since we'd need the Firestore instance to do this.
      return new oa("arrayUnion", t);
    }).apply(void 0, t);
    return (r._methodName = "FieldValue.arrayUnion", new e(r));
  }, e.arrayRemove = function () {
    for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
    var r = (function () {
      for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
      // NOTE: We don't actually parse the data until it's used in set() or
      // update() since we'd need the Firestore instance to do this.
      return new ua("arrayRemove", t);
    }).apply(void 0, t);
    return (r._methodName = "FieldValue.arrayRemove", new e(r));
  }, e.increment = function (t) {
    var n = (function (t) {
      return new sa("increment", t);
    })(t);
    return (n._methodName = "FieldValue.increment", new e(n));
  }, e.prototype.isEqual = function (t) {
    return this.d_.isEqual(t.d_);
  }, e);
})(Ss);
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Returns a sentinel for use with {@link updateDoc} or
* {@link setDoc} with `{merge: true}` to mark a field for deletion.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
function Bc(t) {
  /**
  * Loads a Firestore bundle into the local cache.
  *
  * @param firestore - The `Firestore` instance to load bundles for for.
  * @param bundleData - An object representing the bundle to be loaded. Valid objects are
  *   `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
  *
  * @return
  *   A `LoadBundleTask` object, which notifies callers with progress updates, and completion
  *   or error events. It can be used as a `Promise<LoadBundleTaskProgress>`.
  */
  return (function (t, e) {
    var n = qa(t = Ls(t, Ma)), r = new Ra();
    return ((function (t, e, n, r) {
      var i = this, o = (function (t, e) {
        return (function (t, e) {
          return new Ns(t, e);
        })((function (t, e) {
          if (t instanceof Uint8Array) return Es(t, e);
          if (t instanceof ArrayBuffer) return Es(new Uint8Array(t), e);
          if (t instanceof ReadableStream) return t.getReader();
          throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
        })("string" == typeof t ? new TextEncoder().encode(t) : t), e);
      })(n, Bo(e));
      t._s.Ps(function () {
        return _tslib.__awaiter(i, void 0, void 0, function () {
          var e;
          return _tslib.__generator(this, function (n) {
            switch (n.label) {
              case 0:
                return (e = gs, [4, /*yield*/
                ka(t)]);
              case 1:
                return (e.apply(void 0, [n.sent(), o, r]), [2]);
            }
          });
        });
      });
    })(n, t.I_, e, r), r);
  })(this.d_, t);
}
function Qc(t) {
  var e, n, r = this;
  return (e = this.d_, n = t, (function (t, e) {
    var n = this;
    return t._s.enqueue(function () {
      return _tslib.__awaiter(n, void 0, void 0, function () {
        var n;
        return _tslib.__generator(this, function (r) {
          switch (r.label) {
            case 0:
              return (n = function (t, e) {
                var n = O(t);
                return n.persistence.runTransaction("Get named query", "readonly", function (t) {
                  return n.wo.Ms(t, e);
                });
              }, [4, /*yield*/
              Sa(t)]);
            case 1:
              return [2, /*return*/
              n.apply(void 0, [r.sent(), e])];
          }
        });
      });
    });
  })(qa(e = Ls(e, Ma)), n).then(function (t) {
    return t ? new js(e, null, t.query) : null;
  })).then(function (t) {
    return t ? new Uc(r, t) : null;
  });
}

},{"process":"7AgFc","@firebase/logger":"5PuYX","@firebase/util":"3bR6t","@firebase/webchannel-wrapper":"71Sz5","tslib":"4rd38","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"7AgFc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    // normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    // normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};
// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = '';
// empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) {
  return [];
};
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};

},{}]},["3Imd1","5rkFb"], "5rkFb", "parcelRequire38a2")

//# sourceMappingURL=index.3fafb3e2.js.map
